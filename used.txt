					imports
			importNamePattern
			importNamePattern?
			importNames
			importNames?
			| 'webworker.importscripts'
			| 'webworker.importscripts';
		Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
		Allows TypeScript files to import each other with a TypeScript-specific extension like .ts, .mts, or .tsx.
		Designed to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.
		Do not add triple-slash references or module import targets to the list of compiled files.
		Emit `__importStar` and `__importDefault` helpers for runtime Babel ecosystem compatibility and enable `--allowSyntheticDefaultImports` for typesystem compatibility.
		Forces TypeScript to consult the imports field of package.json files when performing a lookup that starts with # from a file whose ancestor directory contains a package.json.
		Include modules imported with `.json` extension.
		Preserve unused imported values in the JavaScript output that would otherwise be removed.
		Report error if failed to find a source file for a side effect import.
		Resolution algorithm for importing ".js" files from the package's scope.
		Specify emit/checking behavior for imports that are only used for types.
		Specify module specifier used to import the JSX factory functions when using `jsx
		Subpath imports to define internal package import maps that only apply to import specifiers from within the package itself.
		Unconditionally emit imports for unresolved files.
		[Read more.](https
		import chalk = require('chalk');
		import findUp = require('find-up');
		import path = require('path');
		importHelpers?
		importer?
		imports?
		importsNotUsedAsValues?
		| 'import'
	 * @see https
	 * Rule to disallow assigning to imported bindings.
	 * Rule to disallow duplicate module imports.
	 * Rule to disallow renaming import, export, and destructured assignments to the same name.
	 * Rule to disallow specified modules when loaded by `import`.
	 * Rule to enforce sorted `import` declarations within modules.
	"no-duplicate-imports"
	"no-import-assign"
	"no-restricted-imports"
	"sort-imports"
	*  const axios = await vi.importActual<typeof import('./example.js')>('./example.js')
	* Called when test and setup files are imported. Can be called in two situations
	* Changes the value of `import.meta.env` and `process.env`.
	* Determine the transform method for all modules imported inside a test that matches the glob pattern.
	* List of modules that should always be imported before compiler hints.
	* Mocks every import call to the module even if it was already statically imported.
	* Mocks every subsequent [dynamic import](https
	* Module ids that imports this module
	* Removes module from mocked registry. All calls to import will return the original module even if it was mocked before.
	* Removes module from mocked registry. All subsequent calls to import will return original module.
	* Resets modules registry by clearing the cache of all modules. This allows modules to be reevaluated when reimported.
	* Run the factory before imports are evaluated. You can return a value from the factory
	* The time it takes to import and initiate an environment.
	* The time it takes to import the setup module.
	* The time it takes to import the test module.
	* The time it took to import the setup file.
	* This includes importing everything in the module and executing suite callbacks.
	* This time also includes importing all the file dependencies.
	* Top-level imports cannot be re-evaluated. Might be useful to isolate modules where local state conflicts between tests.
	* Unlike [`vi.mock`](https
	* Vite-Node checks the whole absolute path of the import, so make sure you don't include
	* Wait for all imports to load. Useful, if you have a synchronous call that starts
	* When mocking with a factory, this refers to the module that imported the mock.
	* Will also wait for new imports, started during the wait.
	* const example = await vi.importMock<typeof import('./example.js')>('./example.js')
	* import example from './example.js'
	* import { inject } from 'vitest'
	* importing a module that you cannot await otherwise.
	* via the browser `import("@vitest/browser/context").commands` API.
	* which defines aliases used to replace values in `import` or `require` statements.
	Import map entries of a module, optionally with conditions and subpath imports.
	get(fsPath
	getByModuleId(modulePath
	import * as fs from 'fs';
	import Queue = require('yocto-queue');
	import QuickLRU = require('quick-lru');
	import callsites = require('callsites');
	import camelCase = require('camelcase');
	import envPaths = require('env-paths');
	import findUp = require('find-up');
	import getStream = require('get-stream');
	import locatePath = require('locate-path');
	import pLocate = require('p-locate');
	import pTry = require('p-try');
	import path = require('path');
	import pathExists = require('path-exists');
	import pathKey = require('path-key');
	import stringWidth = require('string-width');
	import type {ArrayTail} from 'type-fest';
	import type {IsTuple} from 'type-fest';
	import type {PartialDeep} from 'type-fest';
	import(identifier
	import<T>(moduleId
	importActual
	importActual<T>(id
	importActual<T>(rawId
	importAttributesKey
	importAttributesKey?
	importExternalModule(path
	importFile
	importFile(filepath
	importMock
	importMock(rawId
	importMock<T>(rawId
	importModuleDynamically
	importSource
	importTinybench()
	importedBindings
	importedIdResolutions
	importedIds
	importer
	importer?
	importers
	importers?
	imports
	imports?
	originalResolveUrl(id
	protected importExternalModule(path
	queueMock(id
	queueMock(rawId
	queueUnmock(id
	readonly 'importClass'
	readonly 'importPackage'
	readonly 'importScripts'
	resolveId
	resolveId(id
	resolveMock
	resolveMock(rawId
	resolveUrl(id
	shouldResolveId(id
	| ((source
	| { allowImportNames?
	| { importNames?
    
        
            
                    '@typescript-eslint/consistent-type-imports'
                    '@typescript-eslint/no-import-type-side-effects'
                    '@typescript-eslint/no-require-imports'
                    '@typescript-eslint/no-restricted-imports'
                    'no-restricted-imports'
                  This modal contains important information about your vehicle's
                 * An important requirement when calling `process.dlopen()` is that the `module` instance must be passed. Functions exported by the C++ Addon
                 * It is very important for APIs to be either 100% synchronous or 100%
                 * The time spent creating or updating the auto-import program, in milliseconds.
                 * This is important when developing APIs in order to give users the opportunity
                 * Used to import modules, `JSON`, and local files.
                 * `process.stderr` differs from other Node.js streams in important ways. See `note on process I/O` for more information.
                 * `process.stdout` differs from other Node.js streams in important ways. See `note on process I/O` for more information.
                 * dlopen(module, fileURLToPath(new URL('local.node', import.meta.url)),
                 * import process from 'node
                 * import process, { kill } from 'node
                 * import { EventEmitter } from 'node
                 * import { allowedNodeEnvironmentFlags } from 'node
                 * import { arch } from 'node
                 * import { argv } from 'node
                 * import { chdir, cwd } from 'node
                 * import { constants } from 'node
                 * import { cpuUsage } from 'node
                 * import { cwd } from 'node
                 * import { dlopen } from 'node
                 * import { emitWarning } from 'node
                 * import { env } from 'node
                 * import { exit } from 'node
                 * import { fileURLToPath } from 'node
                 * import { getActiveResourcesInfo } from 'node
                 * import { hrtime } from 'node
                 * import { loadEnvFile } from 'node
                 * import { nextTick } from 'node
                 * import { pid } from 'node
                 * import { platform } from 'node
                 * import { ppid } from 'node
                 * import { resourceUsage } from 'node
                 * import { setTimeout } from 'node
                 * import { stdin, stdout } from 'node
                 * import { version } from 'node
                 * import { versions } from 'node
                 * priority
                 * something that is not a CommonJS module (e.g. REPL or `import`).
                '@typescript-eslint/consistent-type-imports'
                '@typescript-eslint/no-import-type-side-effects'
                '@typescript-eslint/no-require-imports'
                '@typescript-eslint/no-restricted-imports'
                'no-restricted-imports'
                `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
                allow?
                importAttributes
              Body L - This is larger body text for emphasizing important
             *   1) Removing unused imports
             *   2) Coalescing imports from the same module
             *   3) Sorting imports
             *  An object whose key-value pairs represent the assertions for the module to import
             * If importing a `'PBKDF2'` key, `extractable` must be `false`.
             * If the import is successful, the returned promise will be resolved with the created `<CryptoKey>`.
             * Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.
             * Initiator column number, set for Parser type or for Script type (when script is importing
             * Initiator line number, set for Parser type or for Script type (when script is importing
             * It is important to remember that a backing `ArrayBuffer` can cover a range
             * Organize imports by
             * Second `parent` parameter is only used when the `--experimental-import-meta-resolve`
             * Source of the media query
             * The `subtle.importKey()` method attempts to interpret the provided `keyData` as the given `format`
             * The associated rule (@media or @import) header range in the enclosing stylesheet (if
             * The directory name of the current module. This is the same as the `path.dirname()` of the `import.meta.filename`.
             * The import attributes to use when caching the module (optional; if excluded the input will be used)
             * The module importing this one, or undefined if this is the Node.js entry point
             * This is the same as the `url.fileURLToPath()` of the `import.meta.url`.
             * This property used to return the imported document for the HTMLImport links.
             * True if this stylesheet is created through new CSSStyleSheet() or imported as a
             * WebSocket override instance is important.
             * Whether the property has "!important" annotation (implies `false` if absent).
             * base URL, such as `import.meta.url`, you can pass that URL here. This
             * difference is subtle but can be important when an application requires the
             * import assert from 'node
             * import fs from 'node
             * import { Buffer } from 'node
             * import { OldReader } from './old-api-module.js';
             * import { Readable } from 'node
             * import { StringDecoder } from 'node
             * new CSSStyleSheet() (but non-empty if this is a constructed stylesheet imported
             * normally happen, if this is unimportant to what's being tested.
             * specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked
             * then passing the result into the `subtle.importKey()` method using the `deriveKeyAlgorithm`, `extractable`, and `keyUsages` parameters as input.
             * then passing the results in to the `subtle.importKey()` method using the `unwrappedKeyAlgo`, `extractable`, and `keyUsages` arguments as inputs.
            'adjacent-overload-signatures'
            'array-type'
            'await-thenable'
            'ban-ts-comment'
            'ban-tslint-comment'
            'class-literal-property-style'
            'class-methods-use-this'
            'consistent-generic-constructors'
            'consistent-indexed-object-style'
            'consistent-type-assertions'
            'consistent-type-definitions'
            'consistent-type-exports'
            'consistent-type-imports'
            'default-param-last'
            'explicit-function-return-type'
            'explicit-member-accessibility'
            'explicit-module-boundary-types'
            'member-ordering'
            'method-signature-style'
            'naming-convention'
            'no-array-constructor'
            'no-array-delete'
            'no-base-to-string'
            'no-confusing-non-null-assertion'
            'no-confusing-void-expression'
            'no-dupe-class-members'
            'no-duplicate-enum-values'
            'no-duplicate-type-constituents'
            'no-dynamic-delete'
            'no-empty-interface'
            'no-empty-object-type'
            'no-explicit-any'
            'no-extra-non-null-assertion'
            'no-extraneous-class'
            'no-floating-promises'
            'no-for-in-array'
            'no-implied-eval'
            'no-import-type-side-effects'
            'no-inferrable-types'
            'no-invalid-void-type'
            'no-loop-func'
            'no-loss-of-precision'
            'no-meaningless-void-operator'
            'no-misused-new'
            'no-misused-promises'
            'no-mixed-enums'
            'no-namespace'
            'no-non-null-asserted-nullish-coalescing'
            'no-non-null-asserted-optional-chain'
            'no-non-null-assertion'
            'no-redeclare'
            'no-redundant-type-constituents'
            'no-require-imports'
            'no-restricted-imports'
            'no-restricted-types'
            'no-shadow'
            'no-this-alias'
            'no-type-alias'
            'no-unnecessary-boolean-literal-compare'
            'no-unnecessary-condition'
            'no-unnecessary-parameter-property-assignment'
            'no-unnecessary-qualifier'
            'no-unnecessary-template-expression'
            'no-unnecessary-type-arguments'
            'no-unnecessary-type-assertion'
            'no-unnecessary-type-constraint'
            'no-unnecessary-type-conversion'
            'no-unnecessary-type-parameters'
            'no-unsafe-argument'
            'no-unsafe-assignment'
            'no-unsafe-call'
            'no-unsafe-declaration-merging'
            'no-unsafe-enum-comparison'
            'no-unsafe-function-type'
            'no-unsafe-member-access'
            'no-unsafe-return'
            'no-unsafe-type-assertion'
            'no-unsafe-unary-minus'
            'no-unused-vars'
            'no-use-before-define'
            'no-useless-constructor'
            'no-useless-empty-export'
            'no-var-requires'
            'no-wrapper-object-types'
            'non-nullable-type-assertion-style'
            'only-throw-error'
            'parameter-properties'
            'prefer-as-const'
            'prefer-destructuring'
            'prefer-enum-initializers'
            'prefer-find'
            'prefer-for-of'
            'prefer-function-type'
            'prefer-includes'
            'prefer-namespace-keyword'
            'prefer-nullish-coalescing'
            'prefer-optional-chain'
            'prefer-promise-reject-errors'
            'prefer-readonly'
            'prefer-readonly-parameter-types'
            'prefer-reduce-type-parameter'
            'prefer-regexp-exec'
            'prefer-return-this-type'
            'prefer-string-starts-ends-with'
            'prefer-ts-expect-error'
            'promise-function-async'
            'related-getter-setter-pairs'
            'require-array-sort-compare'
            'require-await'
            'restrict-plus-operands'
            'restrict-template-expressions'
            'return-await'
            'sort-type-constituents'
            'strict-boolean-expressions'
            'switch-exhaustiveness-check'
            'triple-slash-reference'
            'unbound-method'
            'unified-signatures'
            'use-unknown-in-catch-callback-variable'
            // they can't live in tty.d.ts because we need to disambiguate the imported name.
            ImportRule = 'importRule',
            allow?
            export import ApplicableRefactorInfo = ts.ApplicableRefactorInfo;
            export import ClassificationType = ts.ClassificationType;
            export import CompletionTriggerKind = ts.CompletionTriggerKind;
            export import CompletionsTriggerCharacter = ts.CompletionsTriggerCharacter;
            export import InlayHintKind = ts.InlayHintKind;
            export import OrganizeImportsMode = ts.OrganizeImportsMode;
            export import RefactorActionInfo = ts.RefactorActionInfo;
            export import RefactorTriggerReason = ts.RefactorTriggerReason;
            export import RenameInfoFailure = ts.RenameInfoFailure;
            export import SemicolonPreference = ts.SemicolonPreference;
            export import SignatureHelpCharacterTypedReason = ts.SignatureHelpCharacterTypedReason;
            export import SignatureHelpInvokedReason = ts.SignatureHelpInvokedReason;
            export import SignatureHelpParameter = ts.SignatureHelpParameter;
            export import SignatureHelpRetriggerCharacter = ts.SignatureHelpRetriggerCharacter;
            export import SignatureHelpRetriggeredReason = ts.SignatureHelpRetriggeredReason;
            export import SignatureHelpTriggerCharacter = ts.SignatureHelpTriggerCharacter;
            export import SignatureHelpTriggerReason = ts.SignatureHelpTriggerReason;
            export import SymbolDisplayPart = ts.SymbolDisplayPart;
            export import UserPreferences = ts.UserPreferences;
            handler
            import __promisify__ = promises.setImmediate;
            import __promisify__ = promises.setTimeout;
            importAttributes
            importAttributes?
            importKey(
            important?
            importedDocument?
            onClick={importVehicleData}
            source
            typedef
            typeof import("assert"),
            | ((specifier
            } | undefined)?], import("../rules").ESLintPluginDocs, TSESLint.RuleListener>;
            })[], import("../rules").ESLintPluginDocs, TSESLint.RuleListener>;
            }], import("../rules").ESLintPluginDocs, TSESLint.RuleListener>;
          "message"
          (i) => `this id is very important but you passed
          transforms
         * * The linker function is allowed to be asynchronous while [HostResolveImportedModule](https
         * // Result
         * // does not support conditional imports/exports
         * // import colors from 'yoctocolors-cjs';
         * // supports conditional imports/exports
         * A constant that can be used as the `importModuleDynamically` option to `vm.Script`
         * Calculates the final resolution mode for an import at some index within a file's `imports` list. This function only returns a result
         * Called during evaluation of this module to initialize the `import.meta`.
         * Conditions that are used during ssr import (including `ssrLoadModule`) of externalized dependencies.
         * Enables auto-import-style completions on partially-typed import statements. E.g., allows
         * Files with imports, exports and/or import.meta are considered modules
         * For detailed information, see [Support of dynamic `import()` in compilation APIs](https
         * If false, each call to `require()` or `import()` generates a new mock module.
         * If true, this completion was an auto-import-style completion of an import statement (i.e., the
         * If true, this completion was for an auto-import of a module not yet in the program, but listed
         * Importing the `webcrypto` object (`import { webcrypto } from 'node
         * Indicates where named type-only imports should sort. "inline" sorts named imports without regard to if the import is
         * Indicates whether imports should be organized in a case-insensitive manner.
         * Indicates whether imports should be organized via an "ordinal" (binary) comparison using the numeric value
         * Keep import assertions.
         * Note that the case of the config path has not yet been normalized, as no files have been imported into the project yet
         * Preserve `with` in imports and exports.
         * Return an import object that can be passed to `WebAssembly.instantiate()` if no other WASM imports are needed beyond those provided by WASI.
         * The absolute path of the test file that created the current suite. If a test file imports
         * The absolute path of the test file that created the current test. If a test file imports
         * The actual [HostResolveImportedModule](https
         * The linker function roughly corresponds to the implementation-defined [HostResolveImportedModule](https
         * URL, such as `import.meta.url`, you can pass that URL here.
         * Use `assert` instead of `with` for imports and exports.
         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is
         * [Support of dynamic `import()` in compilation APIs](https
         * [`process.stderr`](https
         * `Blob` class is a global reference for `import { Blob } from 'node
         * `BroadcastChannel` class is a global reference for `import { BroadcastChannel } from 'worker_threads'`
         * `ByteLengthQueuingStrategy` class is a global reference for `import { ByteLengthQueuingStrategy } from 'node
         * `CompressionStream` class is a global reference for `import { CompressionStream } from 'node
         * `CountQueuingStrategy` class is a global reference for `import { CountQueuingStrategy } from 'node
         * `DecompressionStream` class is a global reference for `import { DecompressionStream } from 'node
         * `File` class is a global reference for `import { File } from 'node
         * `MessageChannel` class is a global reference for `import { MessageChannel } from 'worker_threads'`
         * `MessagePort` class is a global reference for `import { MessagePort } from 'worker_threads'`
         * `PerformanceEntry` is a global reference for `import { PerformanceEntry } from 'node
         * `PerformanceMark` is a global reference for `import { PerformanceMark } from 'node
         * `PerformanceMeasure` is a global reference for `import { PerformanceMeasure } from 'node
         * `PerformanceObserverEntryList` is a global reference for `import { PerformanceObserverEntryList } from 'node
         * `PerformanceObserver` is a global reference for `import { PerformanceObserver } from 'node
         * `PerformanceResourceTiming` is a global reference for `import { PerformanceResourceTiming } from 'node
         * `ReadableByteStreamController` class is a global reference for `import { ReadableByteStreamController } from 'node
         * `ReadableStreamBYOBReader` class is a global reference for `import { ReadableStreamBYOBReader } from 'node
         * `ReadableStreamBYOBRequest` class is a global reference for `import { ReadableStreamBYOBRequest } from 'node
         * `ReadableStreamDefaultController` class is a global reference for `import { ReadableStreamDefaultController } from 'node
         * `ReadableStreamDefaultReader` class is a global reference for `import { ReadableStreamDefaultReader } from 'node
         * `ReadableStream` class is a global reference for `import { ReadableStream } from 'node
         * `TextDecoderStream` class is a global reference for `import { TextDecoderStream } from 'node
         * `TextDecoder` class is a global reference for `import { TextDecoder } from 'node
         * `TextEncoderStream` class is a global reference for `import { TextEncoderStream } from 'node
         * `TextEncoder` class is a global reference for `import { TextEncoder } from 'node
         * `TransformStreamDefaultController` class is a global reference for `import { TransformStreamDefaultController } from 'node
         * `TransformStream` class is a global reference for `import { TransformStream } from 'node
         * `URLSearchParams` class is a global reference for `import { URLSearchParams } from 'node
         * `URL` class is a global reference for `import { URL } from 'url'`
         * `WritableStreamDefaultController` class is a global reference for `import { WritableStreamDefaultController } from 'node
         * `WritableStreamDefaultWriter` class is a global reference for `import { WritableStreamDefaultWriter } from 'node
         * `WritableStream` class is a global reference for `import { WritableStream } from 'node
         * `import write|` to be completed to `import { writeFile } from "fs"`.
         * `import.meta.url`. You do not need to pass it if `specifier` is an _absolute specifier_.
         * `performance` is a global reference for `import { performance } from 'node
         * additional modules that generate suites, the imported suites will return the path of the root test file.
         * additional modules that generate tests, the imported tests will return the path of the root test file.
         * asynchronous calls, it's important to ensure that the current domain is exited.
         * const { Certificate } = await import('node
         * const { KeyObject } = await import('node
         * converted to the platform native line-ending as specified by `import { EOL } from 'node
         * findPackageJSON('..', import.meta.url);
         * findPackageJSON('@foo/qux', import.meta.url);
         * findPackageJSON('some-package', import.meta.url);
         * findPackageJSON(import.meta.resolve('../'));
         * findPackageJSON(import.meta.resolve('some-package'));
         * findPackageJSON(new URL('../', import.meta.url));
         * how to cache a given `import` statement or expression, or `require` call. It can
         * import assert from 'node
         * import child_process from 'node
         * import cluster from 'node
         * import cp from 'node
         * import dgram from 'node
         * import diagnostics_channel from 'node
         * import domain from 'node
         * import fs from 'node
         * import http from 'node
         * import http2 from 'node
         * import net from 'node
         * import process from 'node
         * import repl from 'node
         * import trace_events from 'node
         * import type {} from "mod" with { "resolution-mode"
         * import vm from 'node
         * import zlib from 'node
         * import {
         * import { AsyncLocalStorage } from 'node
         * import { Buffer } from 'node
         * import { EventEmitter } from 'node
         * import { EventEmitter, listenerCount } from 'node
         * import { EventEmitter, once } from 'node
         * import { EventEmitterAsyncResource, EventEmitter } from 'node
         * import { GCProfiler } from 'node
         * import { MIMEType } from 'node
         * import { MessageChannel } from 'node
         * import { Session } from 'node
         * import { addAbortListener } from 'node
         * import { availableParallelism } from 'node
         * import { createServer } from 'node
         * import { debuglog } from 'node
         * import { executionAsyncId, triggerAsyncId } from 'node
         * import { findPackageJSON } from 'node
         * import { finished } from 'node
         * import { fork } from 'node
         * import { getEventListeners, EventEmitter } from 'node
         * import { getMaxListeners, setMaxListeners, EventEmitter } from 'node
         * import { mock } from 'node
         * import { notStrictEqual, strictEqual } from 'node
         * import { on, EventEmitter } from 'node
         * import { once, EventEmitter } from 'node
         * import { open } from 'node
         * import { pipeline } from 'node
         * import { scheduler } from 'node
         * import { setMaxListeners, EventEmitter } from 'node
         * import { spawn } from 'node
         * import { strict as assert } from 'node
         * import { stripTypeScriptTypes } from 'node
         * import { syncBuiltinESMExports } from 'node
         * import { test } from 'node
         * import { test, type TestContext } from 'node
         * import {} from "mod";
         * import('node
         * is an auto-import.
         * it is available as `import { threadId } from 'node
         * items with the same name. Currently only defined for auto-import completions, but the type is
         * module specifier was inserted along with the imported identifier). Used for telemetry reporting.
         * settings allow differing resolution between ESM imports and CJS requires, or when a mode is explicitly provided via import attributes,
         * should be passed as the `wasi_snapshot_preview1` import during the instantiation
         * template contents, and imported documents) in a flattened array, as well as layout and
         * that point all modules would have been fully linked already, the [HostResolveImportedModule](https
         * the file and its imports/references are put into an InferredProject.
         * the same string that would be passed to `import()`, except that if it is
         * validating the import attributes.
         * via import attributes, which cause an `import` or `require` condition to be used during resolution regardless of module resolution
         * when module resolution settings allow differing resolution between ESM imports and CJS requires, or when a mode is explicitly provided
         * which cause an `import` or `require` condition to be used during resolution regardless of module resolution settings. In absence of
         * will be converted to the platform native line-ending as specified by `import { EOL } from 'node
         * } = await import('node
        "assert"
        "assert/strict"
        "async_hooks"
        "buffer"
        "child_process"
        "cluster"
        "console"
        "constants"
        "crypto"
        "dgram"
        "diagnostics_channel"
        "dns"
        "dns/promises"
        "domain"
        "events"
        "fs"
        "fs/promises"
        "http"
        "http2"
        "https"
        "import-vehicle-data",
        "inspector"
        "inspector/promises"
        "module"
        "net"
        "node
        "os"
        "path"
        "path/posix"
        "path/win32"
        "perf_hooks"
        "process"
        "punycode"
        "querystring"
        "readline"
        "readline/promises"
        "repl"
        "stream"
        "stream/consumers"
        "stream/promises"
        "stream/web"
        "string_decoder"
        "sys"
        "timers"
        "timers/promises"
        "tls"
        "trace_events"
        "tty"
        "url"
        "util"
        "util/types"
        "v8"
        "vm"
        "wasi"
        "worker_threads"
        "zlib"
        & typeof import("node
        '@typescript-eslint/consistent-type-imports'
        '@typescript-eslint/no-import-type-side-effects'
        '@typescript-eslint/no-require-imports'
        '@typescript-eslint/no-restricted-imports'
        'adjacent-overload-signatures'
        'array-type'
        'await-thenable'
        'ban-ts-comment'
        'ban-tslint-comment'
        'class-literal-property-style'
        'class-methods-use-this'
        'consistent-generic-constructors'
        'consistent-indexed-object-style'
        'consistent-return'
        'consistent-type-assertions'
        'consistent-type-definitions'
        'consistent-type-exports'
        'consistent-type-imports'
        'default-param-last'
        'dot-notation'
        'explicit-function-return-type'
        'explicit-member-accessibility'
        'explicit-module-boundary-types'
        'font-face'
        'init-declarations'
        'max-params'
        'member-ordering'
        'method-signature-style'
        'missing-glyph'
        'naming-convention'
        'no-array-constructor'
        'no-array-delete'
        'no-base-to-string'
        'no-confusing-non-null-assertion'
        'no-confusing-void-expression'
        'no-deprecated'
        'no-dupe-class-members'
        'no-duplicate-enum-values'
        'no-duplicate-type-constituents'
        'no-dynamic-delete'
        'no-empty-function'
        'no-empty-interface'
        'no-empty-object-type'
        'no-explicit-any'
        'no-extra-non-null-assertion'
        'no-extraneous-class'
        'no-floating-promises'
        'no-for-in-array'
        'no-implied-eval'
        'no-import-type-side-effects'
        'no-inferrable-types'
        'no-invalid-this'
        'no-invalid-void-type'
        'no-loop-func'
        'no-loss-of-precision'
        'no-magic-numbers'
        'no-meaningless-void-operator'
        'no-misused-new'
        'no-misused-promises'
        'no-misused-spread'
        'no-mixed-enums'
        'no-namespace'
        'no-non-null-asserted-nullish-coalescing'
        'no-non-null-asserted-optional-chain'
        'no-non-null-assertion'
        'no-redeclare'
        'no-redundant-type-constituents'
        'no-require-imports'
        'no-restricted-imports'
        'no-restricted-types'
        'no-shadow'
        'no-this-alias'
        'no-type-alias'
        'no-unnecessary-boolean-literal-compare'
        'no-unnecessary-condition'
        'no-unnecessary-parameter-property-assignment'
        'no-unnecessary-qualifier'
        'no-unnecessary-template-expression'
        'no-unnecessary-type-arguments'
        'no-unnecessary-type-assertion'
        'no-unnecessary-type-constraint'
        'no-unnecessary-type-conversion'
        'no-unnecessary-type-parameters'
        'no-unsafe-argument'
        'no-unsafe-assignment'
        'no-unsafe-call'
        'no-unsafe-declaration-merging'
        'no-unsafe-enum-comparison'
        'no-unsafe-function-type'
        'no-unsafe-member-access'
        'no-unsafe-return'
        'no-unsafe-type-assertion'
        'no-unsafe-unary-minus'
        'no-unused-expressions'
        'no-unused-vars'
        'no-use-before-define'
        'no-useless-constructor'
        'no-useless-empty-export'
        'no-var-requires'
        'no-wrapper-object-types'
        'non-nullable-type-assertion-style'
        'only-throw-error'
        'parameter-properties'
        'prefer-as-const'
        'prefer-destructuring'
        'prefer-enum-initializers'
        'prefer-find'
        'prefer-for-of'
        'prefer-function-type'
        'prefer-includes'
        'prefer-literal-enum-member'
        'prefer-namespace-keyword'
        'prefer-nullish-coalescing'
        'prefer-optional-chain'
        'prefer-promise-reject-errors'
        'prefer-readonly'
        'prefer-readonly-parameter-types'
        'prefer-reduce-type-parameter'
        'prefer-regexp-exec'
        'prefer-return-this-type'
        'prefer-string-starts-ends-with'
        'prefer-ts-expect-error'
        'promise-function-async'
        'related-getter-setter-pairs'
        'require-array-sort-compare'
        'require-await'
        'restrict-plus-operands'
        'restrict-template-expressions'
        'return-await'
        'sort-type-constituents'
        'strict-boolean-expressions'
        'switch-exhaustiveness-check'
        'triple-slash-reference'
        'unbound-method'
        'unified-signatures'
        'use-unknown-in-catch-callback-variable'
        .map((name) => new URL(`../maps/${name}.json`, import.meta.url))
        /** Contiguous blocks of import declarations */
        /** Determines whether we import `foo/index.ts` as "foo", "foo/index", or "foo/index.js" */
        /** [MDN Reference](https
        // Sucrase can't transform import.meta so we have to use Babel
        Date
        ImportAttributes = "__importAttributes",
        Imports = "imports",
        Kids
        RegExp
        This tool imports vehicle makes and models into the Supabase database.
        [key
        [x
        a
        activeCoordinate
        allow?
        animate
        animateColor
        animateTransform
        array
        boolean
        chart
        circle
        clipPath
        createImportDeclaration(modifiers
        createJSDocImportTag(tagName
        def(typeName
        defs
        desc
        element
        ellipse
        feColorMatrix
        feComposite
        feDropShadow
        feGaussianBlur
        feMorphology
        filter
        font
        from<T>(value
        function
        function dataset(chart
        function index(chart
        function nearest(chart
        function point(chart
        function x(chart
        function y(chart
        g
        glyph
        humanize
        if (opts.source.includes('import.meta')) {
        import('@supabase/node-fetch' as any).then(({ default
        importHelpers?
        importKind?
        importModuleDynamically?
        imported
        importedBy
        importedFiles
        importedId
        imports
        imports(moduleObject
        importsNotUsedAsValues?
        line
        linearGradient
        marker
        mask
        new(module
        null
        number
        object
        or(...types
        path
        pattern
        polygon
        polyline
        radialGradient
        readonly importClause?
        readonly importModuleSpecifierEnding?
        readonly importModuleSpecifierPreference?
        rect
        ref
        register(name
        resolveAll
        stop
        string
        style
        symbol
        text
        textPath
        title
        transfer?
        tref
        tspan
        typedef
        types?
        undefined
        updateImportDeclaration(node
        updateJSDocImportTag(node
        use
        | Omit<import('openai').OpenAI.Chat.ChatCompletionCreateParams, 'model' | 'stream'>,
        } | undefined)?], import("../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        })[], import("../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        }], import("../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
       * Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.
       * Initiator column number, set for Parser type or for Script type (when script is importing
       * Initiator line number, set for Parser type or for Script type (when script is importing
       * Source of the media query
       * The associated rule (@media or @import) header range in the enclosing stylesheet (if
       * True if this stylesheet is created through new CSSStyleSheet() or imported as a
       * Whether the property has "!important" annotation (implies `false` if absent).
      "Bulk import functionality",
      '"Segoe UI Emoji", "Segoe UI Symbol", "Segoe UI", "Apple Color Emoji", "Twemoji Mozilla", "Noto Color Emoji", "EmojiOne Color", "Android Emoji"!important',
      (await importDebug())(prefix)(logArgs);
      console.error("Vehicle data import error
      const a = await vi.importActual<any>('valibot');
      const publicKey = await crypto.subtle.importKey('jwk', signingKey, algorithm, true, [
      import('@supabase/node-fetch' as any).then(({ default
      important?
      importedDocument?
      imports
      source
      toast.error("Failed to import vehicle data");
      {/* You'll need to import or create these components */}
     *       '@typescript-eslint/consistent-type-imports'
     *     "imports"
     *     '@typescript-eslint/consistent-type-imports'
     *   const filePath = new URL('./package.json', import.meta.url);
     *   const projectFolder = new URL('./test/project/', import.meta.url);
     *   import .. from 'module'
     *   import defer * as x from 'module'
     *   import s from 'foo';
     *   import source x from 'module'
     *   import { fork } from 'node
     *   import {unified} from 'unified'
     *   import.defer('module')
     *   import.source('module')
     *   where the `jsx` function (or a variation) is automatically imported.
     *  - `Array<string>` - Lazy-initialize all imports with source matching one of the given strings.
     *  - `false` - No lazy initialization of any imported module.
     *  - `import "foo";`
     *  - `true` - Do not lazy-initialize local `./foo` imports, but lazy-init `foo` dependencies.
     *  That function handles TypeScript implicit import name elision, and removes
     *  an import if all typical imported names (without `type`) are removed due
     *  import * as api from "../api";
     *  import { MyClass } from "./library";
     *  import { myFunction } from "./library";
     *  properly distinguishes `import 'foo'` from `import {} from 'foo'` for TS
     *  to being type-only imports. This function handles Flow import removal and
     * (`import { sep } from 'node
     * (for minification compat) and assumes native dynamic imports support.
     * * The `import { isMainThread } from 'node
     * * The `import { parentPort } from 'node
     * - import x = M.x;
     * - import x = require("mod");
     * - resolving bare imports from optimized deps
     * // "Link" the imported dependencies of this Module to it.
     * // Result
     * // Returns "import { a } from 'asdf';"
     * // does not support conditional imports/exports
     * // import colors from 'yoctocolors-cjs';
     * // supports conditional imports/exports
     * // the imported module. The callback is expected to return a Module that
     * @deprecated  Use the `importInterop` option instead.
     * @deprecated An alias of `importAttributes`
     * @deprecated Use `PropTypes.*` where `PropTypes` comes from `import * as PropTypes from 'prop-types'` instead.
     * @param file The file the import or import-like reference is contained within
     * @param index Index into the file's complete resolution list to get the resolution of - this is a concatenation of the file's imports and module augmentations
     * @param staticImportedUrls Subset of `importedModules` where they're statically imported in code.
     * @param {import('../core/core.config.js').default} config
     * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements
     * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified
     * @return {import('../types.js').LabelItem[]}
     * @returns The final resolution mode of the import
     * @returns {import('../types/index.js').ActiveElement[]} - The active elements
     * A defer phase import
     * A dynamic defer phase import
     * A dynamic import expression `import(specifier)`
     * A dynamic source phase import
     * A list of predefined network conditions can be used by importing
     * A list of predefined network conditions can be used by importing
     * A shortcut for {@link Locator.race} that does not require static imports.
     * A source phase import
     * An import.meta expression
     * By default, import and export declarations can only appear at a program's top level.
     * Calculates the final resolution mode for an import at some index within a file's `imports` list. This is the resolution mode
     * Calling `await server.waitForRequestsIdle(id)` will wait until all static imports
     * Changes Babel's compiled import statements to be lazily evaluated when their imported bindings are used for the first time.
     * Control where the JSX factory is imported from.
     * Creating a program proceeds from a set of root files, expanding the set of inputs by following imports and
     * Custom environment variables available on `import.meta.env`. This doesn't modify the actual `process.env`.
     * Declares the module specifier to be used for importing the `jsx` and `jsxs` factory functions when using `runtime` 'automatic'
     * Defaults to `true` if import_interop is Node, else `false`
     * Do not optimize these dependencies (must be resolvable import paths,
     * ESM elides all imports with the rule that we only elide if we see that it's
     * Enables support of HMR partial accept via `import.meta.hot.acceptExports`.
     * End of import statement
     * Env variables starts with `envPrefix` will be exposed to your client source code via import.meta.env.
     * Erase this import (since any CJS output would be completely different), and
     * Files with ES6 imports and exports are considered "module" and are otherwise "script".
     * For dynamic import expressions, this field will be empty if not a valid JS string.
     * For static import expressions, this field will always be populated.
     * Force optimize listed dependencies (must be resolvable import paths,
     * Forces ESM interop when importing these dependencies. Some legacy
     * Get a mutable import info object for this path, creating one if it doesn't
     * Handle custom event emitted by `import.meta.hot.send`
     * However, any import working in Node.js will also work when compiled with swc using `importInterop
     * If it is, combine it into the import info for that path. Otherwise, just
     * If set to true, dynamic imports will be preserved.
     * If specified, disable automatic removal of type-only import and export
     * If specified, import path prefix to use in place of "react" when compiling
     * If specified, the imports transform does not attempt to change dynamic
     * If there are dependencies that no longer have any importers, they are
     * If this import has an import assertion, this is the start value.
     * If this import keyword is a dynamic import, this is the start value.
     * If this import keyword is a static import, this is -1.
     * If this import keyword is an import.meta expresion, this is -2.
     * If true, replicate the import behavior Babel 5 and babel-plugin-add-module-exports.
     * If true, replicate the import behavior of TypeScript's esModuleInterop
     * If you know that the imported file has been transformed with a compiler that stores the `default` export on
     * In TypeScript, import statements that only import types should be removed.
     * Metadata for non-entry optimized chunks and dynamic imports
     * Module graph that tracks the import relationships, url to file mapping
     * Module ids that imports this module
     * Module loader for any `import` statements or expressions.
     * Note
     * Only relevant when targeting ESM (i.e. when the imports transform is *not*
     * Options to pass on to `@rollup/plugin-dynamic-import-vars`
     * Or it is a side-effect import
     * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.
     * Pre-transform known direct imports
     * Remove type bindings from this import, leaving the rest of the import intact.
     * Resolve the list of dependencies to preload for a given dynamic import
     * Return all imported/exported names where we might be interested in whether usages of those
     * Return the code to use for the import for this path, or the empty string if
     * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out
     * Side-effect imports are automatically non-lazy since their very existence means
     * Start of import statement
     * The `describe()` function is imported from the `node
     * The `it()` function is imported from the `node
     * The `suite()` function is imported from the `node
     * The `test()` function is the value imported from the `test` module. Each
     * The attributes declared for the dynamic import.
     * The content of the important statement, if it is not just `!important`.
     * The import attributes/assertions syntax to use.
     * The import code was already generated in the import preprocessing step, so
     * The kind of the import.
     * The kind of the import. Always `'value'` unless `moduleReference` is a
     * The locally imported name.
     * The options bag declared for the dynamic import.
     * The position should end at the import string.
     * The source module being imported from.
     * The specifiers being imported.
     * The two cases where imports can never be lazy are
     * This includes `import {} from 'foo';`, but not `import 'foo';`.
     * This method starts to search from `import`/`export` declarations.
     * This property is then used to determine if the import is the default export
     * This property is then used to determine if the import is the default export or if
     * This will be resolved as import.meta.url/filename
     * To handle escape sequences in specifier strings, the .n field of imported specifiers will be provided where possible.
     * Type of import statement
     * Type of the module. Will be used to determine if import statement is correct.
     * Update the module graph based on a module's updated imports information
     * Useful for fields whose values are computed, imported from a database, or
     * Useful for fields whose values are computed, imported from a database, or
     * Visit import node.
     * We recommend using `import.meta.hot` rather than connecting
     * When defining the regular expressions, it’s important to note that the
     * When importing CommonJS files (either directly written in CommonJS, or generated with a compiler)
     * When the imports transform is enabled, use the CJSImportTransformer
     * When this import interop is used, if both the imported and the importer module are compiled
     * Whether the class has an `!important` modifier.
     * With the imports transform, this becomes
     * With this imports transform, this becomes
     * [MDN Reference](https
     * `cjs-module-lexer` is used in Node.js core for detecting the named exports available when importing a CJS module into ESM.
     * `import` or `export` statements. Files with ES6 `import`s and `export`s are considered `"module"` and are otherwise `"script"`.
     * `import`, even indirectly, because the stack cannot be unwound twice.
     * `{importantModifier}{variantModifiers}{classGroupId}`
     * an edit has happened, while signature help is still active, the host can ask important
     * as a named export, while Node.js only allows importing statically analyzable properties of `module.exports`.
     * assets and imports via Lightning CSS. It requires to install it as a
     * auto-imported, but the auto-import will be either CJS or ESM based on the
     * but we must remove the runtime import if all exports are type exports.
     * by default this will be imported via a dynamic "import"
     * const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));
     * const [imports, exports] = parse(source);
     * const [imports1, exports1] = parse(String.raw`import './\u0061\u0062.js'`);
     * const [imports2, exports2] = parse(`import("./ab.js")`);
     * const [imports3, exports3] = parse(`import("./" + "ab.js")`);
     * const __filename = fileURLToPath(import.meta.url);
     * const loadFeatures = import("./features.js")
     * const source = `import { a } from 'asdf'`;
     * const { X509Certificate } = await import('node
     * const { createDiffieHellmanGroup } = await import('node
     * const { createHash } = await import('node
     * const { randomFill } = await import('node
     * const { randomFillSync } = await import('node
     * elides imports that are completely unknown.
     * explicitly provided via import attributes, if present, or the syntax the usage would have if emitted to JavaScript. In
     * extremely important to retain original semantics.
     * https
     * if the import is the default export or if it contains the default export.
     * import 'mod';
     * import * as namespace from 'world
     * import * as ns from './a.js';
     * import * from 'mod' assert \{ type
     * import * from 'mod' with \{ type
     * import EventEmitter from 'node
     * import F1 = A;
     * import F2 = A.B.C;
     * import F3 = require('mod');
     * import Foo = require("foo");
     * import React from 'react'
     * import assert from 'node
     * import child_process from 'node
     * import crypto from 'crypto';
     * import crypto from 'crypto';
     * import crypto from 'node
     * import diagnostics_channel from 'node
     * import dns from 'node
     * import dnsPromises from 'node
     * import fontkit from '@pdf-lib/fontkit'
     * import fontkit from '@pdf-lib/fontkit'
     * import foo from "foo";
     * import foo, { bar as baz, qux } from 'hello'
     * import foo, {bar} from 'baz';
     * import fs from 'fs'
     * import fs from 'fs'
     * import fs from 'node
     * import http from 'node
     * import http2 from 'node
     * import https from 'node
     * import native from 'napi_addon.node';
     * import net from 'node
     * import path from 'node
     * import process from 'node
     * import puppeteer from 'puppeteer';
     * import puppeteer from 'puppeteer';
     * import readline from 'node
     * import readlinePromises from 'node
     * import repl from 'node
     * import tls from 'node
     * import trace_events from 'node
     * import type {} from "mod" with { "resolution-mode"
     * import url from 'node
     * import util from 'node
     * import v8 from 'node
     * import vm from 'node
     * import zlib from 'node
     * import {
     * import {
     * import { AnimatePresence, motion } from 'framer-motion'
     * import { AsyncLocalStorage } from 'node
     * import { AsyncResource, executionAsyncId } from 'node
     * import { Buffer } from 'node
     * import { Buffer, transcode } from 'node
     * import { EventEmitter } from 'node
     * import { Faker, es } from '@faker-js/faker';
     * import { Fragment } from 'react';
     * import { LazyMotion, m } from "framer-motion"
     * import { MessageChannel } from 'node
     * import { MessageChannel, markAsUntransferable } from 'node
     * import { MessageChannel, receiveMessageOnPort } from 'node
     * import { PDFDocument } from 'pdf-lib'
     * import { PDFDocument } from 'pdf-lib'
     * import { PDFDocument, Duplex } from 'pdf-lib'
     * import { PDFDocument, Duplex } from 'pdf-lib'
     * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'
     * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'
     * import { PDFDocument, PrintScaling } from 'pdf-lib'
     * import { PDFDocument, PrintScaling } from 'pdf-lib'
     * import { PDFDocument, ReadingDirection } from 'pdf-lib'
     * import { PDFDocument, ReadingDirection } from 'pdf-lib'
     * import { PageSizes } from 'pdf-lib'
     * import { PageSizes } from 'pdf-lib'
     * import { Resolver } from 'node
     * import { SimpleFaker } from '@faker-js/faker';
     * import { StandardFonts } from 'pdf-lib'
     * import { StandardFonts } from 'pdf-lib'
     * import { StandardFonts, rgb } from 'pdf-lib'
     * import { StandardFonts, rgb } from 'pdf-lib'
     * import { StrictMode } from 'react';
     * import { Suspense } from 'react';
     * import { UserContext } from './user-context';
     * import { aborted } from 'node
     * import { access, constants } from 'node
     * import { access, open, close } from 'node
     * import { accessSync, constants } from 'node
     * import { appendFile } from 'node
     * import { appendFileSync } from 'node
     * import { argv } from 'node
     * import { bar } from "bar";
     * import { callbackify } from 'node
     * import { chmod } from 'node
     * import { copyFile, constants } from 'node
     * import { copyFileSync, constants } from 'node
     * import { createContext } from 'react';
     * import { createContext, runInContext } from 'node
     * import { createHook } from 'node
     * import { createInterface } from 'node
     * import { createReadStream } from 'node
     * import { createServer } from 'node
     * import { debuglog } from 'node
     * import { degrees } from 'pdf-lib'
     * import { degrees } from 'pdf-lib'
     * import { degrees, grayscale, rgb } from 'pdf-lib'
     * import { degrees, grayscale, rgb } from 'pdf-lib'
     * import { deprecate } from 'node
     * import { domAnimation } from "framer-motion"
     * import { exec } from 'node
     * import { execFile } from 'node
     * import { executionAsyncId } from 'node
     * import { executionAsyncId, executionAsyncResource } from 'node
     * import { exists } from 'node
     * import { exists, open, close } from 'node
     * import { existsSync } from 'node
     * import { expectTypeOf } from 'expect-type'
     * import { faker, fakerES_MX } from '@faker-js/faker';
     * import { fetchTodos, type Todo } from './api'
     * import { fileURLToPath } from 'node
     * import { getCallSites } from 'node
     * import { grayscale, rgb } from 'pdf-lib'
     * import { grayscale, rgb } from 'pdf-lib'
     * import { inspect } from 'node
     * import { join } from 'node
     * import { lazy } from 'react';
     * import { memo } from 'react';
     * import { mkdir } from 'node
     * import { mkdtemp } from 'node
     * import { monitorEventLoopDelay } from 'node
     * import { once } from 'node
     * import { open } from 'node
     * import { open, close } from 'node
     * import { open, close, appendFile } from 'node
     * import { open, close, exists } from 'node
     * import { open, close, ftruncate } from 'node
     * import { openAsBlob } from 'node
     * import { openSync, closeSync, appendFileSync } from 'node
     * import { opendir } from 'node
     * import { parseArgs } from 'node
     * import { parseEnv } from 'node
     * import { pathToFileURL } from 'node
     * import { promises } from 'node
     * import { promisify } from 'node
     * import { queryObjects } from 'node
     * import { readFile } from 'node
     * import { readFileSync } from 'node
     * import { readdir } from 'node
     * import { rename } from 'node
     * import { rgb } from 'pdf-lib'
     * import { rgb } from 'pdf-lib'
     * import { rgb, cmyk, grayscale } from 'pdf-lib'
     * import { rgb, cmyk, grayscale } from 'pdf-lib'
     * import { run } from 'node
     * import { sep } from 'node
     * import { spawn } from 'node
     * import { stat } from 'node
     * import { stderr } from 'node
     * import { stdout } from 'node
     * import { styleText } from 'node
     * import { symlink } from 'node
     * import { tap } from 'node
     * import { tmpdir } from 'node
     * import { tokenize } from '@csstools/css-tokenizer';
     * import { truncate } from 'node
     * import { types } from 'node
     * import { unlink } from 'node
     * import { urlToHttpOptions } from 'node
     * import { useQuery } from '@tanstack/react-query'
     * import { validateHeaderName } from 'node
     * import { validateHeaderValue } from 'node
     * import { watch } from 'node
     * import { watchFile } from 'node
     * import { writeFile } from 'node
     * import { writeHeapSnapshot } from 'node
     * import {KnownDevices} from 'puppeteer';
     * import {KnownDevices} from 'puppeteer';
     * import {PredefinedNetworkConditions} from 'puppeteer';
     * import {PredefinedNetworkConditions} from 'puppeteer';
     * import {Puppeteer}, puppeteer from 'puppeteer';
     * import {Puppeteer}, puppeteer from 'puppeteer';
     * import {} from "mod";
     * import {} from 'mod';
     * import('mod', \{ assert
     * import() expressions into require() calls.
     * import)
     * import. Such imports will not be emitted at all to avoid side effects.
     * important consequences on the behavior of any Node.js program. Please take some
     * imported from a database.
     * imported from a database.
     * imported.
     * imports are crawled on cold start. This avoids the need for full-page reloads
     * imports1[0].n;
     * imports2[0].n;
     * imports3[0].n;
     * input syntax of the reference. In other `module` modes, when overriding import attributes are not provided, this function returns
     * is important because there is significant overhead to managing the so called Watch Programs
     * of ES6 import or export statements.
     * open(new URL(import.meta.url), 'r', (err, fd) => {
     * or `import(specifier, opts)`
     * preloaded with `--require` or `--import`.
     * rather than injecting an import.
     * return true if this import is should be elided due to being a type-only
     * settings allow differing resolution between ESM imports and CJS requires, or when a mode is explicitly provided via import attributes,
     * source.substring(imports[0].s, imports[0].e);
     * source.substring(imports[0].ss, imports[0].se);
     * specified). This flag changes the behavior of TS require imports
     * static imports section of the module graph has been processed will resolve immediately.
     * subtle but important consequences on the behavior of any Node.js program. Please
     * the JavaScript object wrapper, etc. It is important that client receives DOM events only for the
     * the code has already been "claimed" by a previous import.
     * the order of items is not important (when `false` or not present).
     * the value should be auto-imported for the automatic runtime.
     * to import createRequire, create a require function, and use that function.
     * to the context must either import `node
     * transpile targeting browsers that natively support dynamic es module imports.
     * which cause an `import` or `require` condition to be used during resolution regardless of module resolution settings. In absence of
     * } = await import('node
    "You'll need
    'adjacent-overload-signatures'
    'array-type'
    'arrow-parens'
    'await-thenable'
    'ban-ts-comment'
    'ban-tslint-comment'
    'class-literal-property-style'
    'class-methods-use-this'
    'consistent-generic-constructors'
    'consistent-indexed-object-style'
    'consistent-return'
    'consistent-type-assertions'
    'consistent-type-definitions'
    'consistent-type-exports'
    'consistent-type-imports'
    'default-param-last'
    'dot-notation'
    'explicit-function-return-type'
    'explicit-member-accessibility'
    'explicit-module-boundary-types'
    'init-declarations'
    'max-params'
    'member-ordering'
    'method-signature-style'
    'naming-convention'
    'no-array-constructor'
    'no-array-delete'
    'no-base-to-string'
    'no-confusing-non-null-assertion'
    'no-confusing-void-expression'
    'no-deprecated'
    'no-dupe-args'
    'no-dupe-class-members'
    'no-duplicate-enum-values'
    'no-duplicate-type-constituents'
    'no-dynamic-delete'
    'no-empty-function'
    'no-empty-interface'
    'no-empty-object-type'
    'no-explicit-any'
    'no-extra-non-null-assertion'
    'no-extraneous-class'
    'no-floating-promises'
    'no-for-in-array'
    'no-implicit-globals'
    'no-implied-eval'
    'no-import-type-side-effects'
    'no-inferrable-types'
    'no-invalid-this'
    'no-invalid-void-type'
    'no-loop-func'
    'no-loss-of-precision'
    'no-magic-numbers'
    'no-meaningless-void-operator'
    'no-misused-new'
    'no-misused-promises'
    'no-misused-spread'
    'no-mixed-enums'
    'no-namespace'
    'no-non-null-asserted-nullish-coalescing'
    'no-non-null-asserted-optional-chain'
    'no-non-null-assertion'
    'no-redeclare'
    'no-redundant-type-constituents'
    'no-require-imports'
    'no-restricted-globals'
    'no-restricted-imports'
    'no-restricted-types'
    'no-shadow'
    'no-this-alias'
    'no-type-alias'
    'no-undef'
    'no-unnecessary-boolean-literal-compare'
    'no-unnecessary-condition'
    'no-unnecessary-parameter-property-assignment'
    'no-unnecessary-qualifier'
    'no-unnecessary-template-expression'
    'no-unnecessary-type-arguments'
    'no-unnecessary-type-assertion'
    'no-unnecessary-type-constraint'
    'no-unnecessary-type-conversion'
    'no-unnecessary-type-parameters'
    'no-unsafe-argument'
    'no-unsafe-assignment'
    'no-unsafe-call'
    'no-unsafe-declaration-merging'
    'no-unsafe-enum-comparison'
    'no-unsafe-function-type'
    'no-unsafe-member-access'
    'no-unsafe-return'
    'no-unsafe-type-assertion'
    'no-unsafe-unary-minus'
    'no-unused-expressions'
    'no-unused-vars'
    'no-use-before-define'
    'no-useless-constructor'
    'no-useless-empty-export'
    'no-var-requires'
    'no-wrapper-object-types'
    'non-nullable-type-assertion-style'
    'only-throw-error'
    'parameter-properties'
    'prefer-as-const'
    'prefer-const'
    'prefer-destructuring'
    'prefer-enum-initializers'
    'prefer-find'
    'prefer-for-of'
    'prefer-function-type'
    'prefer-includes'
    'prefer-literal-enum-member'
    'prefer-namespace-keyword'
    'prefer-nullish-coalescing'
    'prefer-optional-chain'
    'prefer-promise-reject-errors'
    'prefer-readonly'
    'prefer-readonly-parameter-types'
    'prefer-reduce-type-parameter'
    'prefer-regexp-exec'
    'prefer-return-this-type'
    'prefer-string-starts-ends-with'
    'prefer-ts-expect-error'
    'promise-function-async'
    'related-getter-setter-pairs'
    'require-array-sort-compare'
    'require-await'
    'restrict-plus-operands'
    'restrict-template-expressions'
    'return-await'
    'sort-type-constituents'
    'strict-boolean-expressions'
    'switch-exhaustiveness-check'
    'triple-slash-reference'
    'unbound-method'
    'unified-signatures'
    'use-unknown-in-catch-callback-variable'
    (imported
    (specifiers
    /** @experimental Behavior of `jiti.import` might change in the future. */
    /** Check if the currently assigned path references the `importName` of `moduleSource`. */
    /** Whether the declaration has an `!important` annotation. */
    /** [MDN Reference](https
    // Will be expanded to include all of https
    // after the node that had focus when the scope mounted. This is important when
    // import { EventListener, EventListenerObject } from '__dom-events';
    // in a browser router.  This is particularly important when there exists a
    // where imported files return invalid results
    126
    32
    33
    35
    38
    42
    43
    45
    48
    49
    50
    51
    52
    53
    54
    55
    56
    57
    60
    61
    62
    91
    92
    93
    95
    96
    ? (await import('../node/NodeWebSocketTransport.js')).NodeWebSocketTransport
    AssignmentExpression?
    NodePath
    Path
    PathVisitor
    Predicate<Condition_2, import('unist').Node>) &
    SearchInputRef
    UNSAFE_componentWillReceiveProps?(nextProps
    UNSAFE_componentWillUpdate?(nextProps
    VariableDeclarator?
    [-1]
    [-2]
    [-3]
    [-4]
    [-5]
    [SyntaxKind.ImportKeyword]
    _getActiveElements(e
    _import = 90640,
    _import?
    _importCookies(serialized
    _importCookiesSync(serialized
    _lastEvent
    _padding
    _segments
    accessibilityManager
    applySyncEvent
    builders
    chart
    children?
    claimAutoImportedFuncInvocation(funcName
    claimAutoImportedName(funcName
    claimImportCode(importPath
    componentDidCatch?(error
    componentDidUpdate(prevProps
    componentWillReceiveProps?(nextProps
    componentWillUpdate?(nextProps
    const BiDi = await import(/* webpackIgnore
    const CloseEvent
    const MessageEvent
    const WebSocket
    const extractZip = await import('extract-zip');
    const { supabase } = await import("@/integrations/supabase/client");
    const {default
    const {hideBin} = await import('yargs/helpers');
    constructor(logger
    constructor(rootTransformer
    createTextContent
    cssCalc
    cssVar
    data
    data<Key extends keyof import("unified").Data>()
    data<Key extends keyof import("unified").Data>(dataset
    data<Key extends keyof import("unified").Data>(key
    debugModule = (await import('debug')).default;
    def(typeName
    element
    escape
    export import atob = globalThis.atob;
    export import btoa = globalThis.btoa;
    file
    ftp
    function addBox(chart
    function configure(chart
    function instantiate(bytes
    function instantiate(moduleObject
    function instantiateStreaming(source
    function removeBox(chart
    function update(chart
    geq
    get cdpClient()
    get ctx()
    get importedModules()
    get registry()
    get segments()
    getBoundingBox(ctx
    getBounds()
    getLabelItems(chartArea?
    getMouseInfo(event
    getSnapshotBeforeUpdate(prevProps
    getTickValueCoord({ coordinate }
    getTooltipEventType()
    getXScaleByAxisId(axisId
    getYScaleByAxisId(axisId
    handleClick
    handleContextMenu
    handleDoubleClick
    handleMouseDown
    handleMouseEnter
    handleMouseMove
    handleMouseUp
    handleOuterEvent
    handleReceiveSyncEvent
    handleTouchEnd
    handleTouchMove
    handleTouchStart
    http
    https
    idGenerator
    import
    import * as child from "node
    import * as dgram from "node
    import * as dns from "node
    import * as dnsPromises from "node
    import * as fs from "node
    import * as http from "node
    import * as net from "node
    import * as promises from "node
    import * as stream from "node
    import * as stream from "stream";
    import * as streamPromises from "node
    import * as streamWeb from "node
    import * as tls from "node
    import * as tty from "node
    import * as types from "node
    import * as url from "node
    import = "import",
    import = 262144
    import EventEmitter = require("node
    import EventEmitter = require('node
    import assert = require("assert");
    import clearImmediate = globalThis.clearImmediate;
    import clearInterval = globalThis.clearInterval;
    import clearTimeout = globalThis.clearTimeout;
    import console = require("node
    import constants = require("constants");
    import events = require("events");
    import internal = require("node
    import module = require("module");
    import path = require("path");
    import path = require("path/posix");
    import path = require("path/win32");
    import process = require("process");
    import setImmediate = globalThis.setImmediate;
    import setInterval = globalThis.setInterval;
    import setTimeout = globalThis.setTimeout;
    import stream = require("stream");
    import {
    import { Abortable } from "node
    import { Abortable, EventEmitter } from "node
    import { AddressInfo, BlockList } from "node
    import { AsyncCompleter, Completer, Interface } from "node
    import { AsyncLocalStorage } from "node
    import { AsyncResource } from "node
    import { AsyncResource, AsyncResourceOptions } from "node
    import { BinaryLike } from "node
    import { Blob as NodeBlob } from "node
    import { Blob } from "node
    import { ClientRequestArgs } from "node
    import { Context } from "node
    import { Duplex } from "node
    import { EventEmitter } from "node
    import { EventLoopUtilityFunction } from "node
    import { FileHandle } from "node
    import { ImportAttributes } from "node
    import { InspectOptions } from "node
    import { Interface as ReadlineInterface } from "node
    import { KeyObject, webcrypto } from "node
    import { LookupFunction, Server as NetServer, Socket, TcpSocketConnectOpts } from "node
    import { LookupOptions } from "node
    import { ObjectEncodingOptions } from "node
    import { ParsedUrlQuery, ParsedUrlQueryInput } from "node
    import { PeerCertificate } from "node
    import { Pipe, Readable, Stream, Writable } from "node
    import { Readable } from "node
    import { Readable, Writable } from "node
    import { ReadableStream as WebReadableStream } from "node
    import { ReadableStream } from "node
    import { Stream } from "node
    import { TextDecoder as _TextDecoder, TextEncoder as _TextEncoder } from "util";
    import { TimerOptions } from "node
    import { Transform, TransformOptions } from "node
    import { URL as _URL, URLSearchParams as _URLSearchParams } from "url";
    import { URL } from "node
    import { Worker } from "node
    import { X509Certificate } from "node
    import { strict } from "node
    import('ws').then(({ default
    import(node
    importAssertions?
    importAttributes?
    importAttributesKeyword?
    importDeclaration
    importDefaultSpecifier
    importExpression
    importFFI
    importGlobRestoreExtension?
    importInterop?
    importKey(format
    importKind
    importKind?
    importMeta?
    importModuleLoader
    importNamespaceSpecifier
    importNode<T extends Node>(node
    importProcessor
    importScripts(...urls
    importSource?
    importSpecifier
    importStylesheet(style
    important?
    imported
    imported?
    importedBindings
    importedNames?
    importers
    importers?
    imports
    imports?
    importsNotUsedAsValues?
    isColor
    isCorrect
    isGradient
    isImported({ importedId, importedBy, }
    isPrimitive
    kind
    let _null
    namedTypes
    notifyPlugins(hook
    pQuerySelectorAll
    parser
    path
    path(ctx
    private importInfoByPath;
    private importUpdatedModule;
    private importsToReplace;
    property
    readonly '.cjs'
    readonly '.js'
    readonly '.json'
    readonly '.mjs'
    readonly '.ts'
    readonly '.yaml'
    readonly '.yml'
    readonly af_ZA
    readonly ar
    readonly az
    readonly base
    readonly cs_CZ
    readonly da
    readonly de
    readonly de_AT
    readonly de_CH
    readonly dv
    readonly el
    readonly en
    readonly en_AU
    readonly en_AU_ocker
    readonly en_BORK
    readonly en_CA
    readonly en_GB
    readonly en_GH
    readonly en_HK
    readonly en_IE
    readonly en_IN
    readonly en_NG
    readonly en_US
    readonly en_ZA
    readonly eo
    readonly es
    readonly es_MX
    readonly fa
    readonly fi
    readonly fr
    readonly fr_BE
    readonly fr_CA
    readonly fr_CH
    readonly fr_LU
    readonly fr_SN
    readonly he
    readonly hr
    readonly hu
    readonly hy
    readonly id_ID
    readonly importProcessor
    readonly importer
    readonly it
    readonly ja
    readonly ka_GE
    readonly ko
    readonly lv
    readonly mk
    readonly nb_NO
    readonly ne
    readonly nl
    readonly nl_BE
    readonly noExt
    readonly pl
    readonly props
    readonly pt_BR
    readonly pt_PT
    readonly ro
    readonly ro_MD
    readonly ru
    readonly selection
    readonly sk
    readonly sr_RS_latin
    readonly sv
    readonly th
    readonly tr
    readonly uk
    readonly ur
    readonly vi
    readonly yo_NG
    readonly zh_CN
    readonly zh_TW
    readonly zu_ZA
    referencesImport(moduleSource
    remove<Parent_1 extends import("estree").Node>(parent
    render()
    renderActivePoints
    renderBrush
    renderClipPath()
    renderCursor
    renderCustomized
    renderGraphicChild
    renderLegend
    renderPolarAxis
    renderPolarGrid
    renderReferenceElement
    renderTooltip
    replace<Parent extends import("estree").Node>(parent
    resolveId(rawId
    resolveId?
    return (await import('@supabase/node-fetch' as any)).Response
    setState<K extends keyof import("./types").CategoricalChartState>(state
    shouldComponentUpdate?(nextProps
    shouldExternalize?
    space
    splitValue
    ssrFetchModule(id
    state
    static customQueryHandlers
    static defaults
    static registry
    strict
    stringify
    throttleTriggeredAfterMouseMove
    triggerSyncEvent
    triggeredAfterMouseMove
    type
    type MatcherState = import("expect").MatcherState;
    type MatcherUtils = import("expect").MatcherUtils & { [other
    type SnapshotSerializerPlugin = import("pretty-format").Plugin;
    typedef
    unescape
    updateConfig(config
    updateModuleInfo(mod
    use<Parameters_1 extends unknown[] = [], Input extends string | import("unist").Node | undefined = undefined, Output = Input>(list
    use<Parameters_1 extends unknown[] = [], Input extends string | import("unist").Node | undefined = undefined, Output = Input>(plugin
    use<Parameters_1 extends unknown[] = [], Input extends string | import("unist").Node | undefined = undefined, Output = Input>(preset?
    value
    visit
    visit<M = {}>(node
    visit<Parent extends import("estree").Node>(node
    } & import("../types").RegisterOptions>;
    } | undefined)?], import("../../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    })[], import("../../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    }], import("../../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
   *       file
   *       plugin
   *     const importedFile = parseImport(atRule)
   *   if it is not just `!important`.
   *   import
   *   result.warn('Avoid !important', { node
   * - `important`
   * @deprecated Use `query` instead, e.g. `as
   * A list of predefined network conditions can be used by importing
   * A shortcut for {@link Locator.race} that does not require static imports.
   * By default, this plugin will try to hoist `require` statements as imports
   * Controls how to render imports from external dependencies. By default,
   * Due to the conversion of `require` to a static `import` - the call is
   * For extensionless imports, search for extensions other than .js in the
   * Import only the specific named export. Set to `default` to import the default export.
   * Import type for the import url.
   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.
   * NodeJS where ES modules can only import a default export from a CommonJS
   * Path to a single `tsconfig` applicable to all imported files. By default, `tsconfig` for each imported file is
   * Resizes the chart canvas when its container does (important note...).
   * Useful for fields whose values are computed, imported from a database, or
   * When enabled, import/export statements are not constrained to
   * Will create a new instance of the resource store and import the existing translation resources.
   * [important](https
   * appearing at the top of the program, and an import.meta expression
   * calls should be transformed to imports in mixed modules, or `false` if the
   * const root = postcss.parse('a { color
   * handling dynamic imports. It gets replaced with a dynamic import on build time.
   * if (decl.important) {
   * import * as foo from 'foo';
   * import React from 'react'
   * import crypto from 'crypto';
   * import fontkit from '@pdf-lib/fontkit'
   * import fs from 'fs'
   * import fs from 'fs';
   * import fs from 'node
   * import puppeteer from 'puppeteer';
   * import type { Options } from './my-test';
   * import {
   * import { Busboy } from '@fastify/busboy'
   * import { PDFDocument } from 'pdf-lib'
   * import { PDFDocument, Duplex } from 'pdf-lib'
   * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'
   * import { PDFDocument, PrintScaling } from 'pdf-lib'
   * import { PDFDocument, ReadingDirection } from 'pdf-lib'
   * import { PageSizes } from 'pdf-lib'
   * import { Readable } from 'node
   * import { StandardFonts } from 'pdf-lib'
   * import { StandardFonts, rgb } from 'pdf-lib'
   * import { TodoPage } from './todo-page';
   * import { defineConfig } from '@playwright/test';
   * import { defineConfig, devices } from '@playwright/test';
   * import { degrees } from 'pdf-lib'
   * import { degrees, grayscale, rgb } from 'pdf-lib'
   * import { download } from './my-custom-helpers';
   * import { fetchTodos, type Todo } from './api'
   * import { grayscale, rgb } from 'pdf-lib'
   * import { rgb } from 'pdf-lib'
   * import { rgb, cmyk, grayscale } from 'pdf-lib'
   * import { test as base } from '@playwright/test';
   * import { test } from './my-test';
   * import { test } from '@playwright/test';
   * import { test, expect } from '@playwright/test';
   * import { useQuery } from '@tanstack/react-query'
   * import {KnownDevices} from 'puppeteer';
   * import {PredefinedNetworkConditions} from 'puppeteer';
   * import {Puppeteer}, puppeteer from 'puppeteer';
   * important if the code contains environment detection, or you are coding
   * imported from a database.
   * imports i.e.
   * imports.
   * imports. Including those modules as `dynamicRequireTargets` will simulate a
   * is useful in scenarios with modules that contain a mix of ES `import`
   * means they are rendered as default imports to be compatible with e.g.
   * modules. By default, this plugin will render those imports as namespace
   * rendered as namespace imports.
   * root.first.first.important //=> true
   * root.first.last.important  //=> undefined
   * so the handler is called before every actionability check. It is important to specify
   * strict mode and parsing of `import` and `export` declarations.
   * throws, then this method will throw the value.  This is important so we
   * warning.node.toString() //=> 'color
   * warning.plugin //=> 'postcss-important'
   * warning.text //=> 'Try to avoid !important'
   * warning.toString() //=> 'postcss-lint
  "Bulk import functionality",
  ) => node is import('unist').Node &
  ) => node is import('unist').Node & Condition_1) &
  ) => node is import('unist').Node) &
  /** Documentation
  // Select 1-3 of the most important issues to highlight
  // eslint-disable-next-line @typescript-eslint/no-require-imports
  Ancestor extends import('unist').Parent
  Ancestor extends import('unist').Parent = import('unist').Parent
  Child extends import('unist').Node
  Child extends import('unist').Node,
  Date | import("../fp.js").GenericDateConstructor<Date>,
  Descendant extends import('unist').Node,
  Node extends import('unist').Node,
  Tree extends import('unist').Node = import('unist').Node,
  Tree extends import('unist').Node,
  Visited extends import('unist').Node = import('unist').Node,
  Visited extends import('unist').Node,
  VisitedParents extends import('unist').Parent = import('unist').Parent
  __importDefault,
  __importStar,
  _import
  const BiDi = await import(/* webpackIgnore
  const actual = await vi.importActual("react-router-dom");
  const afterAll
  const afterEach
  const assert
  const assertType
  const beforeAll
  const beforeEach
  const chai
  const describe
  const expect
  const expectTypeOf
  const importVehicleData = async () => {
  const it
  const module
  const onTestFailed
  const onTestFinished
  const suite
  const tarFs = await import('tar-fs');
  const test
  const vi
  const vitest
  date
  dateTime
  get important()
  glob
  import * as AST from "@eslint-community/regexpp/ast";
  import * as React from 'react';
  import type {
  import type { EcmaVersion } from "@eslint-community/regexpp/ecma-versions";
  import type { RegExpValidatorSourceContext } from "@eslint-community/regexpp/validator";
  import { RegExpParser } from "@eslint-community/regexpp/parser";
  import { RegExpValidator } from "@eslint-community/regexpp/validator";
  import { RegExpVisitor } from "@eslint-community/regexpp/visitor";
  import("../differenceInHours.js").DifferenceInHoursOptions | undefined,
  import("../differenceInMinutes.js").DifferenceInMinutesOptions | undefined,
  import("../differenceInQuarters.js").DifferenceInQuartersOptions | undefined,
  import("../differenceInSeconds.js").DifferenceInSecondsOptions | undefined,
  import("../differenceInWeeks.js").DifferenceInWeeksOptions | undefined,
  import("../eachDayOfInterval.js").EachDayOfIntervalOptions | undefined,
  import("../eachHourOfInterval.js").EachHourOfIntervalOptions | undefined,
  import("../eachMinuteOfInterval.js").EachMinuteOfIntervalOptions | undefined,
  import("../eachMonthOfInterval.js").EachMonthOfIntervalOptions | undefined,
  import("../eachWeekOfInterval.js").EachWeekOfIntervalOptions | undefined,
  import("../eachYearOfInterval.js").EachYearOfIntervalOptions | undefined,
  import("../endOfWeek.js").EndOfWeekOptions | undefined,
  import("../format.js").FormatDateOptions | undefined,
  import("../formatDistance.js").FormatDistanceOptions | undefined,
  import("../formatDistanceStrict.js").FormatDistanceStrictOptions | undefined,
  import("../formatDuration.js").FormatDurationOptions | undefined,
  import("../formatISO.js").FormatISOOptions | undefined,
  import("../formatISO9075.js").FormatISO9075Options | undefined,
  import("../formatRFC3339.js").FormatRFC3339Options | undefined,
  import("../formatRelative.js").FormatRelativeOptions | undefined,
  import("../fp.js").DateValues,
  import("../fp.js").Day,
  import("../fp.js").Duration
  import("../fp.js").Duration,
  import("../fp.js").Interval<Date>
  import("../fp.js").Interval<Date>,
  import("../fp.js").NormalizedInterval<Date>,
  import("../getWeek.js").GetWeekOptions | undefined,
  import("../getWeekOfMonth.js").GetWeekOfMonthOptions | undefined,
  import("../getWeekYear.js").GetWeekYearOptions | undefined,
  import("../getWeeksInMonth.js").GetWeeksInMonthOptions | undefined,
  import("../interval.js").IntervalOptions | undefined,
  import("../intlFormat.js").IntlFormatLocaleOptions,
  import("../intlFormatDistance.js").IntlFormatDistanceOptions | undefined,
  import("../isMatch.js").IsMatchOptions | undefined,
  import("../isSameWeek.js").IsSameWeekOptions | undefined,
  import("../lastDayOfWeek.js").LastDayOfWeekOptions | undefined,
  import("../parse.js").ParseOptions | undefined,
  import("../parseISO.js").ParseISOOptions | undefined,
  import("../roundToNearestHours.js").RoundToNearestHoursOptions | undefined,
  import("../setDay.js").SetDayOptions | undefined,
  import("../setWeek.js").SetWeekOptions | undefined,
  import("../setWeekYear.js").SetWeekYearOptions | undefined,
  import("../startOfWeek.js").StartOfWeekOptions | undefined,
  import("../startOfWeekYear.js").StartOfWeekYearOptions | undefined,
  import("@/components/dealer/DealerDashboardContent")
  import?
  importKind
  importance
  important
  imported
  importedAssets
  importedCss
  importer
  importer?
  playwright
  readonly hot?
  readonly vitest?
  set important(value
  time
  var Agent
  var BalancedPool
  var Client
  var DecoratorHandler
  var Dispatcher
  var File
  var FileReader
  var FormData
  var Headers
  var MockAgent
  var MockClient
  var MockPool
  var Pool
  var RedirectHandler
  var Request
  var Response
  var RetryHandler
  var buildConnector
  var caches
  var connect
  var createRedirectInterceptor
  var errors
  var fetch
  var getGlobalDispatcher
  var interceptors
  var mockErrors
  var pipeline
  var request
  var setGlobalDispatcher
  var stream
  var upgrade
  | "@import"
  | "importMeta"
  | 'dynamic-import'
  | 'import-rule'
  | 'import-statement'
  | IF_BABEL_7<"importAssertions">
  | IF_BABEL_7<"importReflection">
  | IF_BABEL_7<["importAttributes", { deprecatedAssertSyntax
  | import("../areIntervalsOverlapping.js").AreIntervalsOverlappingOptions
  | import("../differenceInCalendarWeeks.js").DifferenceInCalendarWeeksOptions
  | import("../eachQuarterOfInterval.js").EachQuarterOfIntervalOptions
  | import("../roundToNearestMinutes.js").RoundToNearestMinutesOptions
  | { loader
 * 		content
 *     (import "wasi_snapshot_preview1" "fd_write" (func $fd_write (param i32 i32 i32 i32) (result i32)))
 *     <LazyMotion features={() => import('./path/to/domAnimation')}>
 *   await readFile(new URL('./demo.wasm', import.meta.url)),
 *   decl.warn(result, 'Avoid !important', { word
 *   import MyInterfaceTi from './my-interface-ti';
 *   import concatStream from 'concat-stream'
 *   import process from 'node
 *   import { MyInterface } from './my-interface';
 *   import {remark} from 'remark'
 *  - `import { DEBUG } from '@ember/env-flags';`
 *  - `import { FEATURE_A, FEATURE_B } from '@ember/features';`
 * // javascript import
 * // js import
 * // ts/es6 import
 * // typescript/es6 module import
 * @deprecated Use `import { create } from 'zustand'`
 * @deprecated Use `import { create } from 'zustand'`
 * @deprecated Use `import { createStore } from 'zustand/vanilla'`
 * @deprecated Use `import { createStore } from 'zustand/vanilla'`
 * @deprecated Use `import { shallow } from 'zustand/shallow'`
 * @deprecated Use `import { shallow } from 'zustand/shallow'`
 * @import {Blockquote, Parents} from 'mdast'
 * @import {Code} from 'mdast'
 * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'
 * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'
 * @import {FlowChildren, FlowParents, TrackFields} from '../types.js'
 * @import {Info as InfoType} from 'property-information'
 * @import {Info, Map, State} from 'mdast-util-to-markdown'
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Options, State} from 'mdast-util-to-markdown'
 * @import {Paragraph, Parents} from 'mdast'
 * @import {Parents, Text} from 'mdast'
 * @import {Schema as SchemaType, Space} from 'property-information'
 * @import {State} from 'mdast-util-to-markdown'
 * @param path The import specifier.
 * @param {import('./core.scale.js').default} scale
 * @preview ![img](data
 * @returns Tuple contaning imports list and exports list.
 * @typedef { import('../../core/core.controller.js').default } Chart
 * @typedef { import('../../core/core.scale.js').default } Scale
 * @typedef { import('../../elements/element.line.js').default } LineElement
 * @typedef { import('../../elements/element.point.js').default } PointElement
 * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget
 * @typedef { import('../../types/index.js').FillTarget } FillTarget
 * @typedef { import('../core/core.controller.js').default } Chart
 * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip
 * @typedef { import('../types/index.js').ChartEvent } ChartEvent
 * @typedef { import('./core.animation.js').default } Animation
 * @typedef { import('./core.controller.js').default } Chart
 * @typedef { import('./walker.js').WalkerContext} WalkerContext
 * @typedef { import('estree').Node} Node
 * @typedef {import('./async.js').AsyncHandler} AsyncHandler
 * @typedef {import('./sync.js').SyncHandler} SyncHandler
 * @typedef {import('estree').Node} Node
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 * A `<Router>` that accepts a pre-instantiated history object. It's important
 * A node that represents the import keyword.
 * Alternatively, a specific import syntax can to be used from a typescript file.
 * Check if the input `specifier` is a `default` import or export.
 * Checks if a possible token is the `import` keyword.
 * Class for editing import statements when we are keeping the code as ESM. We still need to remove
 * Class for editing import statements when we are transforming to commonjs.
 * Class responsible for preprocessing and bookkeeping import and export declarations within the
 * Describes specific types or values imported from packages.
 * Determine information about this named import or named export specifier.
 * Determine whether a variable definition is a type import. e.g.
 * Either the import or the reference only needs to appear once, anywhere in the project.
 * Forked from https
 * If you are using CSS modules, pass the imported styles object the
 * If you need to declare that a given property exists on `import.meta`,
 * In the future, imports should be updated to use the new structure
 * It is important to note, when iterating through the code points of a string
 * It is important to note, when iterating through the code points of a string
 * Just like named import specifiers, export specifiers can have from 1 to 4
 * MDX ESM (import/export) node (for hast).
 * MDX ESM (import/export) node.
 * Outputs the list of exports and locations of import specifiers,
 * Parse a TS import specifier, which may be prefixed with "type" and may be of
 * Special case code to scan for imported names in ESM TypeScript. We need to do this so we can
 * Starting at a potential `with` or (legacy) `assert` token, remove the import
 * The constants could be imported from `date-fns/constants`
 * The type for the `assert` property of the optional second argument to `import()`.
 * The type for the `with` property of the optional second argument to `import()`.
 * The type for the optional second argument to `import()`.
 * The type of `import.meta`.
 * This module does not exist in reality, which is why the {} is important
 * To localize DayPicker, import the locale from `date-fns` package and use the
 * To use the HTTP server and client one must import the `node
 * Transforms a relative import specifier ending in a non-declaration TypeScript file extension to its JavaScript file extension counterpart.
 * Turn an MDX program (export/import statements) into a value.
 * Unlike getBindingIdentifiers, this function does not handle declarations and imports.
 * Used to shim default and named imports in ECMAScript Modules transpiled to CommonJS.
 * Used to shim default imports in ECMAScript Modules transpiled to CommonJS.
 * When running from CommmonJS, use `__filename` instead of `import.meta.url`
 * With either format, the order of the entries is important,
 * XXX
 * You may also import from each sub-directory directly. For example, the
 * [MDN Reference](https
 * [`process.stderr`](https
 * `const x
 * `discrete` is an  important distinction as updates within these events are applied immediately.
 * calls above the imports to allow them to override other imports.
 * const pj = findPackageJson(import.meta.url)
 * const pj = findPackageJson(import.meta.url, '../../package.json')
 * const pj = loadPackageJson(import.meta.url)
 * const pj = loadPackageJson(import.meta.url, '../../package.json')
 * const { createHmac } = await import('node
 * e.g. - `import { foo } from 'mod.js'`
 * e.g. `import * as foo from 'mod.js'`.
 * e.g. `import foo from 'mod.js'`
 * e.g. `import { foo as bar } from 'mod.js'`
 * eslint dependency warnings unless you rename the import to `useLayoutEffect`.
 * following two import statements are equivalent
 * globals, there is no need to import `node
 * have a name, but most importantly describe their fields.
 * if (decl.important) {
 * import 'i18next';
 * import * as React from "react"
 * import * as React from 'react'
 * import * as cheerio from 'cheerio';
 * import * as fs from 'fs';
 * import * as fs from 'node
 * import * as readline from 'node
 * import Default from "mod";
 * import Default, { Named, Other } from "mod";
 * import React from 'react';
 * import async_hooks from 'node
 * import cluster from 'node
 * import dgram from 'node
 * import diagnostics_channel from 'node
 * import dns from 'node
 * import eo from 'date-fns/locale/eo'
 * import eslint from '@eslint/js';
 * import http from 'node
 * import http2 from 'node
 * import net from 'node
 * import os from 'node
 * import parse from 'style-to-object';
 * import path from 'node
 * import process from 'node
 * import punycode from 'node
 * import puppeteer from 'puppeteer';
 * import puppeteer from 'puppeteer';
 * import puppeteer from 'puppeteer-extra'
 * import querystring from 'node
 * import repl from 'node
 * import sqlite from 'node
 * import sqlite from 'sqlite';
 * import stream from 'node
 * import test from 'node
 * import tls from 'node
 * import trace_events from 'node
 * import tseslint from 'typescript-eslint';
 * import tty from 'node
 * import type {
 * import type { ErrorArgs } from 'react-i18next';
 * import type { Foo } from 'foo';
 * import type {ReactNode} from 'somewhere'
 * import url from 'node
 * import util from 'node
 * import v8 from 'node
 * import vm from 'node
 * import worker from 'node
 * import zlib from 'node
 * import {
 * import { Buffer } from 'node
 * import { Composer, Parser } from 'yaml'
 * import { DatabaseSync } from 'node
 * import { EventEmitter } from 'node
 * import { Faker, Randomizer, SimpleFaker } from '@faker-js/faker';
 * import { Faker, es } from '@faker-js/faker';
 * import { Frame, transform } from "framer"
 * import { LazyMotion, m } from "framer-motion"
 * import { LazyMotion, m, domAnimation } from "framer-motion"
 * import { PerformanceObserver, performance } from 'node
 * import { RandomGenerator, xoroshiro128plus } from 'pure-rand';
 * import { StringDecoder } from 'node
 * import { WASI } from 'node
 * import { addExtra } from 'puppeteer-extra'
 * import { argv, env } from 'node
 * import { availableParallelism } from 'node
 * import { bypass } from 'msw'
 * import { config } from '@swc/core/spack';
 * import { constructFrom } from 'date-fns'
 * import { constructNow, isSameDay } from 'date-fns'
 * import { createGzip } from 'node
 * import { customAlphabet } from 'nanoid/async'
 * import { customAlphabet } from 'nanoid/non-secure'
 * import { customRandom } from 'nanoid/format'
 * import { customRandom, random } from 'nanoid'
 * import { default as Default, Named, Other } from "mod";
 * import { defineConfig } from '@playwright/test';
 * import { defineConfig, devices } from '@playwright/test';
 * import { deflate, unzip } from 'node
 * import { eoLocale } from 'date-fns/locale/eo'
 * import { es } from 'date-fns/locale'
 * import { es } from 'date-fns/locale';
 * import { expectTypeOf } from 'expect-type'
 * import { faker } from '@faker-js/faker';
 * import { findPackageJson } from 'package-json-from-dist'
 * import { foo, bar } from '../foo'
 * import { getFeatureAdjustments, standardizeFeatureNames, getFeatureInfo } from './features';
 * import { isCommonAssetRequest } from 'msw'
 * import { loadPackageJson } from 'package-json-from-dist'
 * import { maxTime } from "./constants/date-fns/constants";
 * import { maxTime, minTime } from "./constants/date-fns/constants";
 * import { minTime } from "./constants/date-fns/constants";
 * import { motion, AnimatePresence } from 'framer-motion'
 * import { motion, MotionConfig } from "framer-motion"
 * import { motion, useAnimation } from 'framer-motion'
 * import { motion, useCycle } from "framer-motion"
 * import { nanoid } from 'nanoid'
 * import { nanoid } from 'nanoid/async'
 * import { nanoid } from 'nanoid/non-secure'
 * import { parse } from 'graphql';
 * import { parse } from 'graphql/language';
 * import { parse } from 'some-js-parsing-library';
 * import { parseCommaSeparatedListOfComponentValues } from '@csstools/css-parser-algorithms';
 * import { parseComponentValue } from '@csstools/css-parser-algorithms';
 * import { parseComponentValue, isSimpleBlockNode } from '@csstools/css-parser-algorithms';
 * import { parseListOfComponentValues } from '@csstools/css-parser-algorithms';
 * import { parseListOfComponentValues, isSimpleBlockNode } from '@csstools/css-parser-algorithms';
 * import { pipeline } from 'node
 * import { promisify } from 'node
 * import { random } from 'nanoid/async'
 * import { readFile } from 'node
 * import { simpleFaker } from '@faker-js/faker';
 * import { spawn } from 'node
 * import { stdin as input, stdout as output } from 'node
 * import { test, expect } from '@playwright/test';
 * import { tokenize } from '@csstools/css-tokenizer';
 * import { transform } from "framer-motion"
 * import { type Bar } from 'bar';
 * import { urlAlphabet } from 'nanoid'
 * import { useInView } from 'react-intersection-observer';
 * import { useIsPresent } from "framer-motion"
 * import { usePresence } from "framer-motion"
 * import {A} from "./foo";
 * import {KnownDevices} from 'puppeteer';
 * import {KnownDevices} from 'puppeteer';
 * import {PredefinedNetworkConditions} from 'puppeteer';
 * import {PredefinedNetworkConditions} from 'puppeteer';
 * import {} from 'react-dom/canary'
 * import {} from 'react-dom/experimental'
 * import {} from 'react/canary'
 * import {} from 'react/experimental'
 * including dynamic import and import meta handling.
 * instance of {@link PuppeteerNode} when you import or require `puppeteer`.
 * instance of {@link PuppeteerNode} when you import or require `puppeteer`.
 * is important because there is significant overhead to managing the so called Watch Programs
 * local = bar, imported = Some(foo) for
 * local = foo, imported = None
 * matching the words `type` or `as`. This is particularly important because
 * recommended to explicitly reference it via an import or require statement.
 * replacement and flow type imports.
 * so be minding about the things you import!
 * type-only imports in TypeScript and Flow.
 * via `import { promises as dnsPromises } from 'node
 * when you run `require('puppeteer')` (or the equivalent ES `import`).
 * when you run `require('puppeteer')` (or the equivalent ES `import`).
 * which defines aliases used to replace values in `import` or `require` statements.
 *~   import x = require('someLibrary');
 *~ This file should be imported using the CommonJS-style
 import { InView } from 'react-intersection-observer';
) => node is import('unist').Node & {
/* Excluded from this release type
/* eslint-disable @typescript-eslint/consistent-type-imports, @typescript-eslint/no-redundant-type-constituents */
/** @deprecated import `TypeCheckCollectLineNumbers` from `vitest/node` instead */
/** @deprecated import `TypeCheckCollectLines` from `vitest/node` instead */
/** @deprecated import `TypeCheckContext` from `vitest/node` instead */
/** @deprecated import `TypeCheckErrorInfo` from `vitest/node` instead */
/** @deprecated import `TypeCheckRawErrorsMap` from `vitest/node` instead */
/** @deprecated import `TypeCheckRootAndTarget` from `vitest/node` instead */
/** @deprecated import from `vitest/environments` instead */
/** @deprecated import from `vitest/node` instead */
/** @deprecated import from `vitest/reporter` instead */
/** @typedef{import("@humanfs/types").HfsDirectoryEntry} HfsDirectoryEntry */
/** @typedef{import("@humanfs/types").HfsImpl} HfsImpl */
/** Typescript thinks import('...js/.d.ts') needs mod.default.default */
/** Typescript thinks import('...ts') doesn't need mod.default.default, but does */
//   //import Decimal from "decimal.js"
//   import {Decimal} from "decimal.js"
// Add a test function that can be imported in tests
// Add the calculateFinalValuation function that is being imported in useManualValuation.ts
// Add the missing animation variants that PremiumHero.tsx is trying to import
// Added these missing exports for compatibility with existing code that imports them
// Adds oneOf and not constraints, ensuring group or regex are present and mutually exclusive sets for importNames, allowImportNames, etc., as per the schema.
// Base type for import name specifiers, ensuring mutual exclusivity
// Fix the import for useTheme
// Fix the import to use default export
// Fixed import for formatCurrency from the correct module path
// If LiteralToPrimitiveDeep is not used, you need to cast the imported data like this
// Instead of importing non-existent rule files, create a placeholder array
// Please read that link to understand important implementation differences.
// Thus cannot contain any top-level imports
// TypeScript has a bug that makes <reference types="vite/types/importMeta" />
// Types) can import the types directly from 'trusted-types/lib'.
// Update this file to use the correct imports from msw
// duplicated from transform-file so we do not have to import anything here
// import { Resend } from 'npm
//# sourceMappingURL=consistent-type-imports.d.ts.map
//# sourceMappingURL=no-import-type-side-effects.d.ts.map
//# sourceMappingURL=no-require-imports.d.ts.map
//# sourceMappingURL=no-restricted-imports.d.ts.map
//# sourceMappingURL=webworker.importscripts.d.ts.map
/// <reference lib="webworker.importscripts" />
/// <reference path="./importMeta.d.ts" />
/// <reference path="./types/importMeta.d.ts" />
1) there's no real reason that anyone should do a typed import of our rules,
> = Node extends import('unist').Parent
Because we don't import `TSESLint` in most files, it means that TS would have to
However TS wants to avoid adding new imports to the file because a new module
This is useful when a deeply nested structure needs to be exposed as completely immutable, for example, an imported JSON module or when receiving an API response that is passed around.
This property used to return the imported document for the HTMLImport links.
Use-case
connect
const API_BASE_URL = import.meta.env.VITE_VEHICLE_API_URL ||
const LazyDealerInsightsPage = lazy(() => import("@/pages/DealerInsightsPage"));
const __filename = fileURLToPath(import.meta.url);
const foo = importFresh<typeof import('./foo')>('./foo');
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
declare const Controller
declare const StealthPlugin_base
declare const _default
declare const baseRule
declare const ssrDynamicImportKey = "__vite_ssr_dynamic_import__";
declare const ssrImportKey = "__vite_ssr_import__";
declare const ssrImportMetaKey = "__vite_ssr_import_meta__";
declare function ButtonFn<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props
declare function DataInteractiveFn<TTag extends ElementType = typeof DEFAULT_DATA_INTERACTIVE_TAG>(props
declare function InputFn<TTag extends ElementType = typeof DEFAULT_INPUT_TAG>(props
declare function SelectFn<TTag extends ElementType = typeof DEFAULT_SELECT_TAG>(props
declare function TextareaFn<TTag extends ElementType = typeof DEFAULT_TEXTAREA_TAG>(props
declare function VisuallyHidden<TTag extends ElementType = typeof DEFAULT_VISUALLY_HIDDEN_TAG>(props
declare function _import()
declare function fetchModule(server
declare function importAttribute(key
declare function importDeclaration(specifiers
declare function importDefaultSpecifier(local
declare function importExpression(source
declare function importFresh<T>(moduleId
declare function importNamespaceSpecifier(local
declare function importScripts(...urls
declare function importSpecifier(local
declare let DEFAULT_DATA_INTERACTIVE_TAG
declare let DEFAULT_LEGEND_TAG
declare let DEFAULT_PANEL_TAG
declare namespace __icons_import {
export = importFresh;
export async function importDebug()
export class Legend extends Element<import("../types/basic.js").AnyObject, import("../types/basic.js").AnyObject> {
export class Processor<ParseTree extends import("unist").Node | undefined = undefined, HeadTree extends import("unist").Node | undefined = undefined, TailTree extends import("unist").Node | undefined = undefined, CompileTree extends import("unist").Node | undefined = undefined, CompileResult extends CompileResults | undefined = undefined> extends CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>> {
export class Title extends Element<import("../types/basic.js").AnyObject, import("../types/basic.js").AnyObject> {
export class Tooltip extends Element<import("../types/basic.js").AnyObject, import("../types/basic.js").AnyObject> {
export const aria
export const html
export const stringify
export const svg
export const xlink
export const xml
export const xmlns
export declare const AreaChart
export declare const BarChart
export declare const ComboboxContext
export declare const ComposedChart
export declare const DataRouterStateContext
export declare const Delete
export declare const Edit
export declare const FunnelChart
export declare const Insert
export declare const LineChart
export declare const ListboxContext
export declare const MenuContext
export declare const Panel
export declare const PanelGroup
export declare const PieChart
export declare const PopoverContext
export declare const RadarChart
export declare const RadialBarChart
export declare const ScatterChart
export declare const UnicodeTrie
export declare const Update
export declare const _compileToken
export declare const _compileUnsafe
export declare const add
export declare const addBusinessDays
export declare const addDays
export declare const addHours
export declare const addISOWeekYears
export declare const addMilliseconds
export declare const addMinutes
export declare const addMonths
export declare const addQuarters
export declare const addSeconds
export declare const addWeeks
export declare const addYears
export declare const areIntervalsOverlapping
export declare const areIntervalsOverlappingWithOptions
export declare const clamp
export declare const closestIndexTo
export declare const closestTo
export declare const compareAsc
export declare const compareDesc
export declare const compile
export declare const constructFrom
export declare const create
export declare const cssCalc
export declare const dataUriToBuffer
export declare const daysToWeeks
export declare const differenceInBusinessDays
export declare const differenceInCalendarDays
export declare const differenceInCalendarISOWeekYears
export declare const differenceInCalendarISOWeeks
export declare const differenceInCalendarMonths
export declare const differenceInCalendarQuarters
export declare const differenceInCalendarWeeks
export declare const differenceInCalendarWeeksWithOptions
export declare const differenceInCalendarYears
export declare const differenceInDays
export declare const differenceInHours
export declare const differenceInHoursWithOptions
export declare const differenceInISOWeekYears
export declare const differenceInMilliseconds
export declare const differenceInMinutes
export declare const differenceInMinutesWithOptions
export declare const differenceInMonths
export declare const differenceInQuarters
export declare const differenceInQuartersWithOptions
export declare const differenceInSeconds
export declare const differenceInSecondsWithOptions
export declare const differenceInWeeks
export declare const differenceInWeeksWithOptions
export declare const differenceInYears
export declare const eachDayOfInterval
export declare const eachDayOfIntervalWithOptions
export declare const eachHourOfInterval
export declare const eachHourOfIntervalWithOptions
export declare const eachMinuteOfInterval
export declare const eachMinuteOfIntervalWithOptions
export declare const eachMonthOfInterval
export declare const eachMonthOfIntervalWithOptions
export declare const eachQuarterOfInterval
export declare const eachQuarterOfIntervalWithOptions
export declare const eachWeekOfInterval
export declare const eachWeekOfIntervalWithOptions
export declare const eachWeekendOfInterval
export declare const eachWeekendOfMonth
export declare const eachWeekendOfYear
export declare const eachYearOfInterval
export declare const eachYearOfIntervalWithOptions
export declare const effectCar
export declare const endOfDay
export declare const endOfDecade
export declare const endOfHour
export declare const endOfISOWeek
export declare const endOfISOWeekYear
export declare const endOfMinute
export declare const endOfMonth
export declare const endOfQuarter
export declare const endOfSecond
export declare const endOfWeek
export declare const endOfWeekWithOptions
export declare const endOfYear
export declare const extract
export declare const faker
export declare const format
export declare const formatDistance
export declare const formatDistanceStrict
export declare const formatDistanceStrictWithOptions
export declare const formatDistanceWithOptions
export declare const formatDuration
export declare const formatDurationWithOptions
export declare const formatISO
export declare const formatISO9075
export declare const formatISO9075WithOptions
export declare const formatISODuration
export declare const formatISOWithOptions
export declare const formatRFC3339
export declare const formatRFC3339WithOptions
export declare const formatRFC7231
export declare const formatRelative
export declare const formatRelativeWithOptions
export declare const formatWithOptions
export declare const fromUnixTime
export declare const getDate
export declare const getDay
export declare const getDayOfYear
export declare const getDaysInMonth
export declare const getDaysInYear
export declare const getDecade
export declare const getHours
export declare const getISODay
export declare const getISOWeek
export declare const getISOWeekYear
export declare const getISOWeeksInYear
export declare const getMilliseconds
export declare const getMinutes
export declare const getMonth
export declare const getOverlappingDaysInIntervals
export declare const getQuarter
export declare const getSeconds
export declare const getTickClassName
export declare const getTime
export declare const getUnixTime
export declare const getWeek
export declare const getWeekOfMonth
export declare const getWeekOfMonthWithOptions
export declare const getWeekWithOptions
export declare const getWeekYear
export declare const getWeekYearWithOptions
export declare const getWeeksInMonth
export declare const getWeeksInMonthWithOptions
export declare const getYear
export declare const help = "yaml
export declare const hoursToMilliseconds
export declare const hoursToMinutes
export declare const hoursToSeconds
export declare const interval
export declare const intervalToDuration
export declare const intervalWithOptions
export declare const intlFormat
export declare const intlFormatDistance
export declare const intlFormatDistanceWithOptions
export declare const isAfter
export declare const isBefore
export declare const isColor
export declare const isDate
export declare const isEqual
export declare const isExists
export declare const isFirstDayOfMonth
export declare const isFriday
export declare const isLastDayOfMonth
export declare const isLeapYear
export declare const isMatch
export declare const isMatchWithOptions
export declare const isMonday
export declare const isSameDay
export declare const isSameHour
export declare const isSameISOWeek
export declare const isSameISOWeekYear
export declare const isSameMinute
export declare const isSameMonth
export declare const isSameQuarter
export declare const isSameSecond
export declare const isSameWeek
export declare const isSameWeekWithOptions
export declare const isSameYear
export declare const isSaturday
export declare const isSunday
export declare const isThursday
export declare const isTuesday
export declare const isValid
export declare const isWednesday
export declare const isWeekend
export declare const isWithinInterval
export declare const lastDayOfDecade
export declare const lastDayOfISOWeek
export declare const lastDayOfISOWeekYear
export declare const lastDayOfMonth
export declare const lastDayOfQuarter
export declare const lastDayOfWeek
export declare const lastDayOfWeekWithOptions
export declare const lastDayOfYear
export declare const lightFormat
export declare const list
export declare const max
export declare const milliseconds
export declare const millisecondsToHours
export declare const millisecondsToMinutes
export declare const millisecondsToSeconds
export declare const min
export declare const minutesToHours
export declare const minutesToMilliseconds
export declare const minutesToSeconds
export declare const monthsToQuarters
export declare const monthsToYears
export declare const nextDay
export declare const nextFriday
export declare const nextMonday
export declare const nextSaturday
export declare const nextSunday
export declare const nextThursday
export declare const nextTuesday
export declare const nextWednesday
export declare const parse
export declare const parseISO
export declare const parseISOWithOptions
export declare const parseJSON
export declare const parseWithOptions
export declare const previousDay
export declare const previousFriday
export declare const previousMonday
export declare const previousSaturday
export declare const previousSunday
export declare const previousThursday
export declare const previousTuesday
export declare const previousWednesday
export declare const quartersToMonths
export declare const quartersToYears
export declare const replace
export declare const roundToNearestHours
export declare const roundToNearestHoursWithOptions
export declare const roundToNearestMinutes
export declare const roundToNearestMinutesWithOptions
export declare const schema
export declare const secondsToHours
export declare const secondsToMilliseconds
export declare const secondsToMinutes
export declare const set
export declare const setDate
export declare const setDay
export declare const setDayOfYear
export declare const setDayWithOptions
export declare const setFillingColor
export declare const setHours
export declare const setISODay
export declare const setISOWeek
export declare const setISOWeekYear
export declare const setMilliseconds
export declare const setMinutes
export declare const setMonth
export declare const setQuarter
export declare const setSeconds
export declare const setStrokingColor
export declare const setWeek
export declare const setWeekWithOptions
export declare const setWeekYear
export declare const setWeekYearWithOptions
export declare const setYear
export declare const startOfDay
export declare const startOfDecade
export declare const startOfHour
export declare const startOfISOWeek
export declare const startOfISOWeekYear
export declare const startOfMinute
export declare const startOfMonth
export declare const startOfQuarter
export declare const startOfSecond
export declare const startOfWeek
export declare const startOfWeekWithOptions
export declare const startOfWeekYear
export declare const startOfWeekYearWithOptions
export declare const startOfYear
export declare const sub
export declare const subBusinessDays
export declare const subDays
export declare const subHours
export declare const subISOWeekYears
export declare const subMilliseconds
export declare const subMinutes
export declare const subMonths
export declare const subQuarters
export declare const subSeconds
export declare const subWeeks
export declare const subYears
export declare const toDate
export declare const transpose
export declare const update
export declare const webworker_importscripts
export declare const weeksToDays
export declare const yearsToDays
export declare const yearsToMonths
export declare const yearsToQuarters
export declare function __importDefault<T>(mod
export declare function __importStar<T>(mod
export declare function collectionFromPath(schema
export declare function composeEmptyNode(ctx
export declare function createStaticHandler(routes
export declare function getDatasetAtEvent(chart
export declare function getElementAtEvent(chart
export declare function getElementsAtEvent(chart
export declare function importDebug()
export declare function importMetaEnvPlugin({ template, types }
export declare function resolveFlowCollection({ composeNode, composeEmptyNode }
export declare function sidecar<T>(importer
export declare function useFloatingReference()
export declare function useIsMounted()
export declare function useLatestValue<T>(value
export declare function useNavigation()
export declare function useSidecar<T>(importer
export declare function useTabDirection()
export declare let overflows
export default class BarElement extends Element<import("../types/basic.js").AnyObject, import("../types/basic.js").AnyObject> {
export default class LineElement extends Element<import("../types/basic.js").AnyObject, import("../types/basic.js").AnyObject> {
export default class Scale extends Element<import("../types/basic.js").AnyObject, import("../types/basic.js").AnyObject> {
export function association(node
export function autoSkip(scale
export function compilePattern(info
export function importAttribute(key
export function importDeclaration(specifiers
export function importDefaultSpecifier(local
export function importExpression(source
export function importNamespaceSpecifier(local
export function importSpecifier(local
export function indentLines(value
export function phrasing(node?
export function stringifyEntitiesLight(value
export function track(info
export function visit<Tree extends import('unist').Node, Check extends Test>(
export import Node = t.Node;
export import RemovePropertiesOptions = t.RemovePropertiesOptions;
export type ActiveElement = import('../types/index.js').ActiveElement;
export type AllowElement = import("./lib/index.js").AllowElement;
export type Animation = import('./core.animation.js').default;
export type AsyncHandler = import('./async.js').AsyncHandler;
export type Blockquote = import("mdast").Blockquote;
export type BooleanConfig = import("./types.ts").BooleanConfig;
export type Break = import("mdast").Break;
export type CallTraversalStep = import("@eslint/core").CallTraversalStep;
export type Callback = import('./lib/index.js').Callback;
export type Chart = import('../../core/core.controller.js').default;
export type Chart = import('../core/core.controller.js').default;
export type Chart = import('../platform/platform.base.js').Chart;
export type Chart = import('../types/index.js').Chart;
export type Chart = import('./core.controller.js').default;
export type ChartEvent = import('../types/index.js').ChartEvent;
export type Check = import('./lib/index.js').Check
export type Code = import("mdast").Code;
export type Compatible = import('vfile').Compatible;
export type CompileContext = import('mdast-util-from-markdown').CompileContext;
export type CompileResultMap = import('../index.js').CompileResultMap;
export type Compiler<Tree extends import("unist").Node = import("unist").Node, Result extends CompileResults = CompileResults> = (tree
export type ComplexFillTarget = import('../../types/index.js').ComplexFillTarget;
export type Components = import("./lib/index.js").Components;
export type Config = import("eslint").Linter.Config;
export type ConfigObject = import("./types.ts").ConfigObject;
export type ConfigWithExtends = import("./types.ts").ConfigWithExtends;
export type ConfigWithExtendsArray = import("./types.ts").ConfigWithExtendsArray;
export type CoreWithFormatOptions = CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions;
export type Data = import('../index.js').Data;
export type DateAdapter = import('../core/core.adapters.js').DateAdapter;
export type Delete = import("mdast").Delete;
export type DirectiveType = import("@eslint/core").DirectiveType;
export type Dirent = import("fs").Dirent;
export type Element = import("hast").Element;
export type ElementContent = import("hast").ElementContent;
export type Emphasis = import("mdast").Emphasis;
export type ExtendsElement = import("./types.ts").ExtendsElement;
export type ExtraProps = import("./lib/index.js").ExtraProps;
export type FillTarget = import('../../types/index.js').FillTarget;
export type FootnoteBackContentTemplate = import("./footer.js").FootnoteBackContentTemplate;
export type FootnoteBackLabelTemplate = import("./footer.js").FootnoteBackLabelTemplate;
export type FootnoteReference = import("mdast").FootnoteReference;
export type FromMarkdownExtension = import('mdast-util-from-markdown').Extension;
export type FromMarkdownHandle = import('mdast-util-from-markdown').Handle;
export type FromMarkdownOptions = import('mdast-util-from-markdown').Options;
export type HastElement = import("hast").Element;
export type HastElementContent = import("hast").ElementContent;
export type HastNodes = import("hast").Nodes;
export type HastParents = import("hast").Parents;
export type HastProperties = import("hast").Properties;
export type HastRoot = import("hast").Root;
export type HastRootContent = import("hast").RootContent;
export type HastText = import("hast").Text;
export type Heading = import("mdast").Heading;
export type HfsDirectoryEntry = import("@humanfs/types").HfsDirectoryEntry;
export type HfsImpl = import("@humanfs/types").HfsImpl;
export type HfsWalkEntry = import("@humanfs/types").HfsWalkEntry;
export type Html = import("mdast").Html;
export type Html = import('mdast').Html;
export type IDirective = import("@eslint/core").Directive;
export type IMinimatch = import("minimatch").IMinimatch;
export type IMinimatchStatic = import("minimatch").IMinimatchStatic;
export type Image = import("mdast").Image;
export type ImageReference = import("mdast").ImageReference;
export type InfiniteConfigArray = import("./types.ts").InfiniteArray<Config>;
export type InlineCode = import("mdast").InlineCode;
export type InteractionItem = import('../core/core.interaction.js').InteractionItem;
export type LegacyConfig = import("eslint").Linter.LegacyConfig;
export type Lib = 'decorators' | 'decorators.legacy' | 'dom' | 'dom.asynciterable' | 'dom.iterable' | 'es5' | 'es6' | 'es7' | 'es2015' | 'es2015.collection' | 'es2015.core' | 'es2015.generator' | 'es2015.iterable' | 'es2015.promise' | 'es2015.proxy' | 'es2015.reflect' | 'es2015.symbol' | 'es2015.symbol.wellknown' | 'es2016' | 'es2016.array.include' | 'es2016.full' | 'es2016.intl' | 'es2017' | 'es2017.arraybuffer' | 'es2017.date' | 'es2017.full' | 'es2017.intl' | 'es2017.object' | 'es2017.sharedmemory' | 'es2017.string' | 'es2017.typedarrays' | 'es2018' | 'es2018.asyncgenerator' | 'es2018.asynciterable' | 'es2018.full' | 'es2018.intl' | 'es2018.promise' | 'es2018.regexp' | 'es2019' | 'es2019.array' | 'es2019.full' | 'es2019.intl' | 'es2019.object' | 'es2019.string' | 'es2019.symbol' | 'es2020' | 'es2020.bigint' | 'es2020.date' | 'es2020.full' | 'es2020.intl' | 'es2020.number' | 'es2020.promise' | 'es2020.sharedmemory' | 'es2020.string' | 'es2020.symbol.wellknown' | 'es2021' | 'es2021.full' | 'es2021.intl' | 'es2021.promise' | 'es2021.string' | 'es2021.weakref' | 'es2022' | 'es2022.array' | 'es2022.error' | 'es2022.full' | 'es2022.intl' | 'es2022.object' | 'es2022.regexp' | 'es2022.string' | 'es2023' | 'es2023.array' | 'es2023.collection' | 'es2023.full' | 'es2023.intl' | 'es2024' | 'es2024.arraybuffer' | 'es2024.collection' | 'es2024.full' | 'es2024.object' | 'es2024.promise' | 'es2024.regexp' | 'es2024.sharedmemory' | 'es2024.string' | 'esnext' | 'esnext.array' | 'esnext.asynciterable' | 'esnext.bigint' | 'esnext.collection' | 'esnext.decorators' | 'esnext.disposable' | 'esnext.float16' | 'esnext.full' | 'esnext.intl' | 'esnext.iterator' | 'esnext.object' | 'esnext.promise' | 'esnext.regexp' | 'esnext.string' | 'esnext.symbol' | 'esnext.weakref' | 'lib' | 'scripthost' | 'webworker' | 'webworker.asynciterable' | 'webworker.importscripts' | 'webworker.iterable';
export type LightOptions = import('./core.js').CoreOptions;
export type LightOptions = import('./lib/index.js').LightOptions;
export type LineElement = import('../../elements/element.line.js').default;
export type LineElement = import('../elements/element.line.js').default;
export type Link = import("mdast").Link;
export type LinkReference = import("mdast").LinkReference;
export type List = import("mdast").List;
export type ListItem = import("mdast").ListItem;
export type MdastDefinition = import("mdast").Definition;
export type MdastFootnoteDefinition = import("mdast").FootnoteDefinition;
export type MdastNodes = import("mdast").Nodes;
export type MdastParents = import("mdast").Parents;
export type MdastRoot = import("mdast").Root;
export type MdastText = import("mdast").Text;
export type MdxjsEsm = import('../index.js').MdxjsEsm;
export type Middleware = import('./lib/index.js').Middleware;
export type Node = import('estree').Node;
export type Node = import('unist').Node
export type Node = import('unist').Node;
export type Nodes = import("mdast").Nodes;
export type Nodes = import('hast').Nodes;
export type Nodes = import('mdast').Nodes
export type ObjectDefinition = import("./types.ts").ObjectDefinition;
export type ObjectDefinition = import("@eslint/object-schema").ObjectDefinition;
export type ObjectSchemaInstance = import("@eslint/object-schema").ObjectSchema;
export type Options = import("./lib/index.js").Options;
export type Options = import("./state.js").Options;
export type Options = import("micromark-util-types").Options;
export type Options = import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions;
export type Options = import('./lib/index.js').Options
export type Options = import('./lib/index.js').Options;
export type Paragraph = import("mdast").Paragraph;
export type Parent = import('unist').Parent
export type Parents = import("mdast").Parents;
export type ParseResult = ReturnType<typeof import("@babel/parser").parse>;
export type Parser = import('unified').Parser<Root>;
export type Parser<Tree extends import("unist").Node = import("unist").Node> = (document
export type PathImpl = typeof import("@jsr/std__path");
export type PhrasingContent = import('mdast').PhrasingContent;
export type Pipeline = import('./lib/index.js').Pipeline;
export type Pipeline = import('trough').Pipeline;
export type Plugin = import("eslint").ESLint.Plugin;
export type Plugin<PluginParameters extends unknown[] = [], Input extends string | import("unist").Node | undefined = import("unist").Node, Output = Input> = ((this
export type PluginTuple<TupleParameters extends unknown[] = [], Input extends string | import("unist").Node | undefined = undefined, Output = undefined> = ([
export type Point = import('../types/index.js').Point;
export type Point = import('unist').Point
export type PointElement = import('../../elements/element.point.js').default;
export type PointElement = import('../elements/element.point.js').default;
export type PointElement = import('./element.point.js').default;
export type Position = import('unist').Position
export type Processor = import('unified').Processor<Root>;
export type Properties = import("hast").Properties;
export type PropertyDefinition = import("./types.ts").PropertyDefinition;
export type PropertyDefinition = import("@eslint/object-schema").PropertyDefinition;
export type Raw = import("../../index.js").Raw;
export type Reference = import("mdast").Reference;
export type Root = import('mdast').Root;
export type RuleConfig = import("@eslint/core").RuleConfig;
export type RuleEntry = import("eslint").Linter.RuleEntry;
export type RulesConfig = import("@eslint/core").RulesConfig;
export type Run = import('./lib/index.js').Run;
export type RunCallback<Tree extends import("unist").Node = import("unist").Node> = (error?
export type Scale = import('../../core/core.scale.js').default;
export type Scale = import('./core.scale.js').default;
export type Settings = import('../index.js').Settings;
export type SimpleExtendsElement = import("./types.ts").SimpleExtendsElement;
export type SourceCodeBaseTypeOptions = import("@eslint/core").SourceCodeBaseTypeOptions;
export type SourceLocation = import("@eslint/core").SourceLocation;
export type SourceLocationWithOffset = import("@eslint/core").SourceLocationWithOffset;
export type SourceRange = import("@eslint/core").SourceRange;
export type State = import("../state.js").State;
export type State = import("./state.js").State;
export type StringConfig = import("./types.ts").StringConfig;
export type Strong = import("mdast").Strong;
export type SyncHandler = import('./sync.js').SyncHandler;
export type Table = import("mdast").Table;
export type TableCell = import("mdast").TableCell;
export type TableRow = import("mdast").TableRow;
export type Test = Exclude<import('unist-util-is').Test, undefined> | undefined
export type Test = import('./lib/index.js').Test
export type TestFunction = import('./lib/index.js').TestFunction
export type Text = import("hast").Text;
export type TextSourceCode<Options extends SourceCodeBaseTypeOptions = import("@eslint/core").SourceCodeBaseTypeOptions> = import("@eslint/core").TextSourceCode<Options>;
export type ThematicBreak = import("mdast").ThematicBreak;
export type ToMarkdownExtension = import('mdast-util-to-markdown').Options;
export type ToMarkdownHandle = import('mdast-util-to-markdown').Handle;
export type Transform = "jsx" | "typescript" | "flow" | "imports" | "react-hot-loader" | "jest";
export type TransformCallback<Output extends import("unist").Node = import("unist").Node> = (error?
export type Transformer<Input extends import("unist").Node = import("unist").Node, Output extends import("unist").Node = Input> = (tree
export type TraversalStep = import("@eslint/core").TraversalStep;
export type UnistNode = import('unist').Node
export type UnistParent = import('unist').Parent
export type Unit = import('../core/core.adapters.js').TimeUnit;
export type UrlTransform = import("./lib/index.js").UrlTransform;
export type Use = import('./lib/index.js').Use;
export type UsePlugin<ParseTree extends import("unist").Node | undefined, HeadTree extends import("unist").Node | undefined, TailTree extends import("unist").Node | undefined, CompileTree extends import("unist").Node | undefined, CompileResult extends CompileResults | undefined, Input extends string | import("unist").Node | undefined, Output> = (Input extends string ? Output extends Node | undefined ? Processor<Output extends undefined ? ParseTree 
export type VFile = import("vfile").VFile;
export type Value = import('vfile').Value;
export type VisitTraversalStep = import("@eslint/core").VisitTraversalStep;
export type VisitorKeys = import("./visitor-keys.js").VisitorKeys;
export type VisitorKeys = import('./visitor-keys.js').VisitorKeys;
export type VisitorResult = import('unist-util-visit-parents').VisitorResult
export type WalkerContext = import('./walker.js').WalkerContext;
export { ACCESSOR_TYPES, ALIAS_KEYS, ASSIGNMENT_OPERATORS, Accessor, Aliases, AnyTypeAnnotation, ArgumentPlaceholder, ArrayExpression, ArrayPattern, ArrayTypeAnnotation, ArrowFunctionExpression, AssignmentExpression, AssignmentPattern, AwaitExpression, BINARY_OPERATORS, BINARY_TYPES, BLOCKPARENT_TYPES, BLOCK_TYPES, BOOLEAN_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, BUILDER_KEYS, BigIntLiteral, Binary, BinaryExpression, BindExpression, Block, BlockParent, BlockStatement, BooleanLiteral, BooleanLiteralTypeAnnotation, BooleanTypeAnnotation, BreakStatement, CLASS_TYPES, COMMENT_KEYS, COMPARISON_BINARY_OPERATORS, COMPLETIONSTATEMENT_TYPES, CONDITIONAL_TYPES, CallExpression, CatchClause, Class, ClassAccessorProperty, ClassBody, ClassDeclaration, ClassExpression, ClassImplements, ClassMethod, ClassPrivateMethod, ClassPrivateProperty, ClassProperty, Comment, CommentBlock, CommentLine, CommentTypeShorthand, CompletionStatement, Conditional, ConditionalExpression, ContinueStatement, DECLARATION_TYPES, DEPRECATED_ALIASES, DEPRECATED_KEYS, DebuggerStatement, DecimalLiteral, Declaration, DeclareClass, DeclareExportAllDeclaration, DeclareExportDeclaration, DeclareFunction, DeclareInterface, DeclareModule, DeclareModuleExports, DeclareOpaqueType, DeclareTypeAlias, DeclareVariable, DeclaredPredicate, Decorator, DeprecatedAliases, Directive, DirectiveLiteral, DoExpression, DoWhileStatement, ENUMBODY_TYPES, ENUMMEMBER_TYPES, EQUALITY_BINARY_OPERATORS, EXPORTDECLARATION_TYPES, EXPRESSIONWRAPPER_TYPES, EXPRESSION_TYPES, EmptyStatement, EmptyTypeAnnotation, EnumBody, EnumBooleanBody, EnumBooleanMember, EnumDeclaration, EnumDefaultedMember, EnumMember, EnumNumberBody, EnumNumberMember, EnumStringBody, EnumStringMember, EnumSymbolBody, ExistsTypeAnnotation, ExportAllDeclaration, ExportDeclaration, ExportDefaultDeclaration, ExportDefaultSpecifier, ExportNamedDeclaration, ExportNamespaceSpecifier, ExportSpecifier, Expression, ExpressionStatement, ExpressionWrapper, FLATTENABLE_KEYS, FLIPPED_ALIAS_KEYS, FLOWBASEANNOTATION_TYPES, FLOWDECLARATION_TYPES, FLOWPREDICATE_TYPES, FLOWTYPE_TYPES, FLOW_TYPES, FORXSTATEMENT_TYPES, FOR_INIT_KEYS, FOR_TYPES, FUNCTIONPARENT_TYPES, FUNCTION_TYPES, FieldOptions, File, Flow, FlowBaseAnnotation, FlowDeclaration, FlowPredicate, FlowType, For, ForInStatement, ForOfStatement, ForStatement, ForXStatement, Function, FunctionDeclaration, FunctionExpression, FunctionParent, FunctionTypeAnnotation, FunctionTypeParam, GenericTypeAnnotation, IMMUTABLE_TYPES, IMPORTOREXPORTDECLARATION_TYPES, INHERIT_KEYS, Identifier, IfStatement, Immutable, Import, ImportAttribute, ImportDeclaration, ImportDefaultSpecifier, ImportExpression, ImportNamespaceSpecifier, ImportOrExportDeclaration, ImportSpecifier, IndexedAccessType, InferredPredicate, InterfaceDeclaration, InterfaceExtends, InterfaceTypeAnnotation, InterpreterDirective, IntersectionTypeAnnotation, JSX, JSXAttribute, JSXClosingElement, JSXClosingFragment, JSXElement, JSXEmptyExpression, JSXExpressionContainer, JSXFragment, JSXIdentifier, JSXMemberExpression, JSXNamespacedName, JSXOpeningElement, JSXOpeningFragment, JSXSpreadAttribute, JSXSpreadChild, JSXText, JSX_TYPES, LITERAL_TYPES, LOGICAL_OPERATORS, LOOP_TYPES, LVAL_TYPES, LVal, LabeledStatement, Literal, LogicalExpression, Loop, METHOD_TYPES, MISCELLANEOUS_TYPES, MODULEDECLARATION_TYPES, MODULESPECIFIER_TYPES, MemberExpression, MetaProperty, Method, Miscellaneous, MixedTypeAnnotation, ModuleDeclaration, ModuleExpression, ModuleSpecifier, NODE_FIELDS, NODE_PARENT_VALIDATIONS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, NewExpression, Node, Noop, NullLiteral, NullLiteralTypeAnnotation, NullableTypeAnnotation, NumberLiteral$1 as NumberLiteral, NumberLiteralTypeAnnotation, NumberTypeAnnotation, NumericLiteral, OBJECTMEMBER_TYPES, ObjectExpression, ObjectMember, ObjectMethod, ObjectPattern, ObjectProperty, ObjectTypeAnnotation, ObjectTypeCallProperty, ObjectTypeIndexer, ObjectTypeInternalSlot, ObjectTypeProperty, ObjectTypeSpreadProperty, OpaqueType, OptionalCallExpression, OptionalIndexedAccessType, OptionalMemberExpression, PATTERNLIKE_TYPES, PATTERN_TYPES, PLACEHOLDERS, PLACEHOLDERS_ALIAS, PLACEHOLDERS_FLIPPED_ALIAS, PRIVATE_TYPES, PROPERTY_TYPES, PUREISH_TYPES, ParentMaps, ParenthesizedExpression, Pattern, PatternLike, PipelineBareFunction, PipelinePrimaryTopicReference, PipelineTopicExpression, Placeholder, Private, PrivateName, Program, Property, Pureish, QualifiedTypeIdentifier, RecordExpression, RegExpLiteral, RegexLiteral$1 as RegexLiteral, Options as RemovePropertiesOptions, RestElement, RestProperty$1 as RestProperty, ReturnStatement, SCOPABLE_TYPES, STANDARDIZED_TYPES, STATEMENT_OR_BLOCK_KEYS, STATEMENT_TYPES, STRING_UNARY_OPERATORS, Scopable, SequenceExpression, SourceLocation, SpreadElement, SpreadProperty$1 as SpreadProperty, Standardized, Statement, StaticBlock, StringLiteral, StringLiteralTypeAnnotation, StringTypeAnnotation, Super, SwitchCase, SwitchStatement, SymbolTypeAnnotation, TERMINATORLESS_TYPES, TSAnyKeyword, TSArrayType, TSAsExpression, TSBASETYPE_TYPES, TSBaseType, TSBigIntKeyword, TSBooleanKeyword, TSCallSignatureDeclaration, TSConditionalType, TSConstructSignatureDeclaration, TSConstructorType, TSDeclareFunction, TSDeclareMethod, TSENTITYNAME_TYPES, TSEntityName, TSEnumBody, TSEnumDeclaration, TSEnumMember, TSExportAssignment, TSExpressionWithTypeArguments, TSExternalModuleReference, TSFunctionType, TSImportEqualsDeclaration, TSImportType, TSIndexSignature, TSIndexedAccessType, TSInferType, TSInstantiationExpression, TSInterfaceBody, TSInterfaceDeclaration, TSIntersectionType, TSIntrinsicKeyword, TSLiteralType, TSMappedType, TSMethodSignature, TSModuleBlock, TSModuleDeclaration, TSNamedTupleMember, TSNamespaceExportDeclaration, TSNeverKeyword, TSNonNullExpression, TSNullKeyword, TSNumberKeyword, TSObjectKeyword, TSOptionalType, TSParameterProperty, TSParenthesizedType, TSPropertySignature, TSQualifiedName, TSRestType, TSSatisfiesExpression, TSStringKeyword, TSSymbolKeyword, TSTYPEELEMENT_TYPES, TSTYPE_TYPES, TSTemplateLiteralType, TSThisType, TSTupleType, TSType, TSTypeAliasDeclaration, TSTypeAnnotation, TSTypeAssertion, TSTypeElement, TSTypeLiteral, TSTypeOperator, TSTypeParameter, TSTypeParameterDeclaration, TSTypeParameterInstantiation, TSTypePredicate, TSTypeQuery, TSTypeReference, TSUndefinedKeyword, TSUnionType, TSUnknownKeyword, TSVoidKeyword, TYPES, TYPESCRIPT_TYPES, TaggedTemplateExpression, TemplateElement, TemplateLiteral, Terminatorless, ThisExpression, ThisTypeAnnotation, ThrowStatement, TopicReference, TraversalAncestors, TraversalHandler, TraversalHandlers, TryStatement, TupleExpression, TupleTypeAnnotation, TypeAlias, TypeAnnotation, TypeCastExpression, TypeParameter, TypeParameterDeclaration, TypeParameterInstantiation, TypeScript, TypeofTypeAnnotation, UNARYLIKE_TYPES, UNARY_OPERATORS, UPDATE_OPERATORS, USERWHITESPACABLE_TYPES, UnaryExpression, UnaryLike, UnionTypeAnnotation, UpdateExpression, UserWhitespacable, V8IntrinsicIdentifier, VISITOR_KEYS, VariableDeclaration, VariableDeclarator, Variance, VoidTypeAnnotation, WHILE_TYPES, While, WhileStatement, WithStatement, YieldExpression, deprecationWarning as __internal__deprecationWarning, addComment, addComments, anyTypeAnnotation, appendToMemberExpression, argumentPlaceholder, arrayExpression, arrayPattern, arrayTypeAnnotation, arrowFunctionExpression, assertAccessor, assertAnyTypeAnnotation, assertArgumentPlaceholder, assertArrayExpression, assertArrayPattern, assertArrayTypeAnnotation, assertArrowFunctionExpression, assertAssignmentExpression, assertAssignmentPattern, assertAwaitExpression, assertBigIntLiteral, assertBinary, assertBinaryExpression, assertBindExpression, assertBlock, assertBlockParent, assertBlockStatement, assertBooleanLiteral, assertBooleanLiteralTypeAnnotation, assertBooleanTypeAnnotation, assertBreakStatement, assertCallExpression, assertCatchClause, assertClass, assertClassAccessorProperty, assertClassBody, assertClassDeclaration, assertClassExpression, assertClassImplements, assertClassMethod, assertClassPrivateMethod, assertClassPrivateProperty, assertClassProperty, assertCompletionStatement, assertConditional, assertConditionalExpression, assertContinueStatement, assertDebuggerStatement, assertDecimalLiteral, assertDeclaration, assertDeclareClass, assertDeclareExportAllDeclaration, assertDeclareExportDeclaration, assertDeclareFunction, assertDeclareInterface, assertDeclareModule, assertDeclareModuleExports, assertDeclareOpaqueType, assertDeclareTypeAlias, assertDeclareVariable, assertDeclaredPredicate, assertDecorator, assertDirective, assertDirectiveLiteral, assertDoExpression, assertDoWhileStatement, assertEmptyStatement, assertEmptyTypeAnnotation, assertEnumBody, assertEnumBooleanBody, assertEnumBooleanMember, assertEnumDeclaration, assertEnumDefaultedMember, assertEnumMember, assertEnumNumberBody, assertEnumNumberMember, assertEnumStringBody, assertEnumStringMember, assertEnumSymbolBody, assertExistsTypeAnnotation, assertExportAllDeclaration, assertExportDeclaration, assertExportDefaultDeclaration, assertExportDefaultSpecifier, assertExportNamedDeclaration, assertExportNamespaceSpecifier, assertExportSpecifier, assertExpression, assertExpressionStatement, assertExpressionWrapper, assertFile, assertFlow, assertFlowBaseAnnotation, assertFlowDeclaration, assertFlowPredicate, assertFlowType, assertFor, assertForInStatement, assertForOfStatement, assertForStatement, assertForXStatement, assertFunction, assertFunctionDeclaration, assertFunctionExpression, assertFunctionParent, assertFunctionTypeAnnotation, assertFunctionTypeParam, assertGenericTypeAnnotation, assertIdentifier, assertIfStatement, assertImmutable, assertImport, assertImportAttribute, assertImportDeclaration, assertImportDefaultSpecifier, assertImportExpression, assertImportNamespaceSpecifier, assertImportOrExportDeclaration, assertImportSpecifier, assertIndexedAccessType, assertInferredPredicate, assertInterfaceDeclaration, assertInterfaceExtends, assertInterfaceTypeAnnotation, assertInterpreterDirective, assertIntersectionTypeAnnotation, assertJSX, assertJSXAttribute, assertJSXClosingElement, assertJSXClosingFragment, assertJSXElement, assertJSXEmptyExpression, assertJSXExpressionContainer, assertJSXFragment, assertJSXIdentifier, assertJSXMemberExpression, assertJSXNamespacedName, assertJSXOpeningElement, assertJSXOpeningFragment, assertJSXSpreadAttribute, assertJSXSpreadChild, assertJSXText, assertLVal, assertLabeledStatement, assertLiteral, assertLogicalExpression, assertLoop, assertMemberExpression, assertMetaProperty, assertMethod, assertMiscellaneous, assertMixedTypeAnnotation, assertModuleDeclaration, assertModuleExpression, assertModuleSpecifier, assertNewExpression, assertNode, assertNoop, assertNullLiteral, assertNullLiteralTypeAnnotation, assertNullableTypeAnnotation, assertNumberLiteral, assertNumberLiteralTypeAnnotation, assertNumberTypeAnnotation, assertNumericLiteral, assertObjectExpression, assertObjectMember, assertObjectMethod, assertObjectPattern, assertObjectProperty, assertObjectTypeAnnotation, assertObjectTypeCallProperty, assertObjectTypeIndexer, assertObjectTypeInternalSlot, assertObjectTypeProperty, assertObjectTypeSpreadProperty, assertOpaqueType, assertOptionalCallExpression, assertOptionalIndexedAccessType, assertOptionalMemberExpression, assertParenthesizedExpression, assertPattern, assertPatternLike, assertPipelineBareFunction, assertPipelinePrimaryTopicReference, assertPipelineTopicExpression, assertPlaceholder, assertPrivate, assertPrivateName, assertProgram, assertProperty, assertPureish, assertQualifiedTypeIdentifier, assertRecordExpression, assertRegExpLiteral, assertRegexLiteral, assertRestElement, assertRestProperty, assertReturnStatement, assertScopable, assertSequenceExpression, assertSpreadElement, assertSpreadProperty, assertStandardized, assertStatement, assertStaticBlock, assertStringLiteral, assertStringLiteralTypeAnnotation, assertStringTypeAnnotation, assertSuper, assertSwitchCase, assertSwitchStatement, assertSymbolTypeAnnotation, assertTSAnyKeyword, assertTSArrayType, assertTSAsExpression, assertTSBaseType, assertTSBigIntKeyword, assertTSBooleanKeyword, assertTSCallSignatureDeclaration, assertTSConditionalType, assertTSConstructSignatureDeclaration, assertTSConstructorType, assertTSDeclareFunction, assertTSDeclareMethod, assertTSEntityName, assertTSEnumBody, assertTSEnumDeclaration, assertTSEnumMember, assertTSExportAssignment, assertTSExpressionWithTypeArguments, assertTSExternalModuleReference, assertTSFunctionType, assertTSImportEqualsDeclaration, assertTSImportType, assertTSIndexSignature, assertTSIndexedAccessType, assertTSInferType, assertTSInstantiationExpression, assertTSInterfaceBody, assertTSInterfaceDeclaration, assertTSIntersectionType, assertTSIntrinsicKeyword, assertTSLiteralType, assertTSMappedType, assertTSMethodSignature, assertTSModuleBlock, assertTSModuleDeclaration, assertTSNamedTupleMember, assertTSNamespaceExportDeclaration, assertTSNeverKeyword, assertTSNonNullExpression, assertTSNullKeyword, assertTSNumberKeyword, assertTSObjectKeyword, assertTSOptionalType, assertTSParameterProperty, assertTSParenthesizedType, assertTSPropertySignature, assertTSQualifiedName, assertTSRestType, assertTSSatisfiesExpression, assertTSStringKeyword, assertTSSymbolKeyword, assertTSTemplateLiteralType, assertTSThisType, assertTSTupleType, assertTSType, assertTSTypeAliasDeclaration, assertTSTypeAnnotation, assertTSTypeAssertion, assertTSTypeElement, assertTSTypeLiteral, assertTSTypeOperator, assertTSTypeParameter, assertTSTypeParameterDeclaration, assertTSTypeParameterInstantiation, assertTSTypePredicate, assertTSTypeQuery, assertTSTypeReference, assertTSUndefinedKeyword, assertTSUnionType, assertTSUnknownKeyword, assertTSVoidKeyword, assertTaggedTemplateExpression, assertTemplateElement, assertTemplateLiteral, assertTerminatorless, assertThisExpression, assertThisTypeAnnotation, assertThrowStatement, assertTopicReference, assertTryStatement, assertTupleExpression, assertTupleTypeAnnotation, assertTypeAlias, assertTypeAnnotation, assertTypeCastExpression, assertTypeParameter, assertTypeParameterDeclaration, assertTypeParameterInstantiation, assertTypeScript, assertTypeofTypeAnnotation, assertUnaryExpression, assertUnaryLike, assertUnionTypeAnnotation, assertUpdateExpression, assertUserWhitespacable, assertV8IntrinsicIdentifier, assertVariableDeclaration, assertVariableDeclarator, assertVariance, assertVoidTypeAnnotation, assertWhile, assertWhileStatement, assertWithStatement, assertYieldExpression, assignmentExpression, assignmentPattern, awaitExpression, bigIntLiteral, binaryExpression, bindExpression, blockStatement, booleanLiteral, booleanLiteralTypeAnnotation, booleanTypeAnnotation, breakStatement, buildMatchMemberExpression, buildUndefinedNode, callExpression, catchClause, classAccessorProperty, classBody, classDeclaration, classExpression, classImplements, classMethod, classPrivateMethod, classPrivateProperty, classProperty, clone, cloneDeep, cloneDeepWithoutLoc, cloneNode, cloneWithoutLoc, conditionalExpression, continueStatement, createFlowUnionType, createTSUnionType, _default$4 as createTypeAnnotationBasedOnTypeof, createFlowUnionType as createUnionTypeAnnotation, debuggerStatement, decimalLiteral, declareClass, declareExportAllDeclaration, declareExportDeclaration, declareFunction, declareInterface, declareModule, declareModuleExports, declareOpaqueType, declareTypeAlias, declareVariable, declaredPredicate, decorator, directive, directiveLiteral, doExpression, doWhileStatement, emptyStatement, emptyTypeAnnotation, ensureBlock, enumBooleanBody, enumBooleanMember, enumDeclaration, enumDefaultedMember, enumNumberBody, enumNumberMember, enumStringBody, enumStringMember, enumSymbolBody, existsTypeAnnotation, exportAllDeclaration, exportDefaultDeclaration, exportDefaultSpecifier, exportNamedDeclaration, exportNamespaceSpecifier, exportSpecifier, expressionStatement, file, forInStatement, forOfStatement, forStatement, functionDeclaration, functionExpression, functionTypeAnnotation, functionTypeParam, genericTypeAnnotation, getAssignmentIdentifiers, getBindingIdentifiers, getFunctionName, _default as getOuterBindingIdentifiers, identifier, ifStatement, _import as import, importAttribute, importDeclaration, importDefaultSpecifier, importExpression, importNamespaceSpecifier, importSpecifier, indexedAccessType, inferredPredicate, inheritInnerComments, inheritLeadingComments, inheritTrailingComments, inherits, inheritsComments, interfaceDeclaration, interfaceExtends, interfaceTypeAnnotation, interpreterDirective, intersectionTypeAnnotation, is, isAccessor, isAnyTypeAnnotation, isArgumentPlaceholder, isArrayExpression, isArrayPattern, isArrayTypeAnnotation, isArrowFunctionExpression, isAssignmentExpression, isAssignmentPattern, isAwaitExpression, isBigIntLiteral, isBinary, isBinaryExpression, isBindExpression, isBinding, isBlock, isBlockParent, isBlockScoped, isBlockStatement, isBooleanLiteral, isBooleanLiteralTypeAnnotation, isBooleanTypeAnnotation, isBreakStatement, isCallExpression, isCatchClause, isClass, isClassAccessorProperty, isClassBody, isClassDeclaration, isClassExpression, isClassImplements, isClassMethod, isClassPrivateMethod, isClassPrivateProperty, isClassProperty, isCompletionStatement, isConditional, isConditionalExpression, isContinueStatement, isDebuggerStatement, isDecimalLiteral, isDeclaration, isDeclareClass, isDeclareExportAllDeclaration, isDeclareExportDeclaration, isDeclareFunction, isDeclareInterface, isDeclareModule, isDeclareModuleExports, isDeclareOpaqueType, isDeclareTypeAlias, isDeclareVariable, isDeclaredPredicate, isDecorator, isDirective, isDirectiveLiteral, isDoExpression, isDoWhileStatement, isEmptyStatement, isEmptyTypeAnnotation, isEnumBody, isEnumBooleanBody, isEnumBooleanMember, isEnumDeclaration, isEnumDefaultedMember, isEnumMember, isEnumNumberBody, isEnumNumberMember, isEnumStringBody, isEnumStringMember, isEnumSymbolBody, isExistsTypeAnnotation, isExportAllDeclaration, isExportDeclaration, isExportDefaultDeclaration, isExportDefaultSpecifier, isExportNamedDeclaration, isExportNamespaceSpecifier, isExportSpecifier, isExpression, isExpressionStatement, isExpressionWrapper, isFile, isFlow, isFlowBaseAnnotation, isFlowDeclaration, isFlowPredicate, isFlowType, isFor, isForInStatement, isForOfStatement, isForStatement, isForXStatement, isFunction, isFunctionDeclaration, isFunctionExpression, isFunctionParent, isFunctionTypeAnnotation, isFunctionTypeParam, isGenericTypeAnnotation, isIdentifier, isIfStatement, isImmutable, isImport, isImportAttribute, isImportDeclaration, isImportDefaultSpecifier, isImportExpression, isImportNamespaceSpecifier, isImportOrExportDeclaration, isImportSpecifier, isIndexedAccessType, isInferredPredicate, isInterfaceDeclaration, isInterfaceExtends, isInterfaceTypeAnnotation, isInterpreterDirective, isIntersectionTypeAnnotation, isJSX, isJSXAttribute, isJSXClosingElement, isJSXClosingFragment, isJSXElement, isJSXEmptyExpression, isJSXExpressionContainer, isJSXFragment, isJSXIdentifier, isJSXMemberExpression, isJSXNamespacedName, isJSXOpeningElement, isJSXOpeningFragment, isJSXSpreadAttribute, isJSXSpreadChild, isJSXText, isLVal, isLabeledStatement, isLet, isLiteral, isLogicalExpression, isLoop, isMemberExpression, isMetaProperty, isMethod, isMiscellaneous, isMixedTypeAnnotation, isModuleDeclaration, isModuleExpression, isModuleSpecifier, isNewExpression, isNode, isNodesEquivalent, isNoop, isNullLiteral, isNullLiteralTypeAnnotation, isNullableTypeAnnotation, isNumberLiteral, isNumberLiteralTypeAnnotation, isNumberTypeAnnotation, isNumericLiteral, isObjectExpression, isObjectMember, isObjectMethod, isObjectPattern, isObjectProperty, isObjectTypeAnnotation, isObjectTypeCallProperty, isObjectTypeIndexer, isObjectTypeInternalSlot, isObjectTypeProperty, isObjectTypeSpreadProperty, isOpaqueType, isOptionalCallExpression, isOptionalIndexedAccessType, isOptionalMemberExpression, isParenthesizedExpression, isPattern, isPatternLike, isPipelineBareFunction, isPipelinePrimaryTopicReference, isPipelineTopicExpression, isPlaceholder, isPlaceholderType, isPrivate, isPrivateName, isProgram, isProperty, isPureish, isQualifiedTypeIdentifier, isRecordExpression, isReferenced, isRegExpLiteral, isRegexLiteral, isRestElement, isRestProperty, isReturnStatement, isScopable, isScope, isSequenceExpression, isSpecifierDefault, isSpreadElement, isSpreadProperty, isStandardized, isStatement, isStaticBlock, isStringLiteral, isStringLiteralTypeAnnotation, isStringTypeAnnotation, isSuper, isSwitchCase, isSwitchStatement, isSymbolTypeAnnotation, isTSAnyKeyword, isTSArrayType, isTSAsExpression, isTSBaseType, isTSBigIntKeyword, isTSBooleanKeyword, isTSCallSignatureDeclaration, isTSConditionalType, isTSConstructSignatureDeclaration, isTSConstructorType, isTSDeclareFunction, isTSDeclareMethod, isTSEntityName, isTSEnumBody, isTSEnumDeclaration, isTSEnumMember, isTSExportAssignment, isTSExpressionWithTypeArguments, isTSExternalModuleReference, isTSFunctionType, isTSImportEqualsDeclaration, isTSImportType, isTSIndexSignature, isTSIndexedAccessType, isTSInferType, isTSInstantiationExpression, isTSInterfaceBody, isTSInterfaceDeclaration, isTSIntersectionType, isTSIntrinsicKeyword, isTSLiteralType, isTSMappedType, isTSMethodSignature, isTSModuleBlock, isTSModuleDeclaration, isTSNamedTupleMember, isTSNamespaceExportDeclaration, isTSNeverKeyword, isTSNonNullExpression, isTSNullKeyword, isTSNumberKeyword, isTSObjectKeyword, isTSOptionalType, isTSParameterProperty, isTSParenthesizedType, isTSPropertySignature, isTSQualifiedName, isTSRestType, isTSSatisfiesExpression, isTSStringKeyword, isTSSymbolKeyword, isTSTemplateLiteralType, isTSThisType, isTSTupleType, isTSType, isTSTypeAliasDeclaration, isTSTypeAnnotation, isTSTypeAssertion, isTSTypeElement, isTSTypeLiteral, isTSTypeOperator, isTSTypeParameter, isTSTypeParameterDeclaration, isTSTypeParameterInstantiation, isTSTypePredicate, isTSTypeQuery, isTSTypeReference, isTSUndefinedKeyword, isTSUnionType, isTSUnknownKeyword, isTSVoidKeyword, isTaggedTemplateExpression, isTemplateElement, isTemplateLiteral, isTerminatorless, isThisExpression, isThisTypeAnnotation, isThrowStatement, isTopicReference, isTryStatement, isTupleExpression, isTupleTypeAnnotation, isType, isTypeAlias, isTypeAnnotation, isTypeCastExpression, isTypeParameter, isTypeParameterDeclaration, isTypeParameterInstantiation, isTypeScript, isTypeofTypeAnnotation, isUnaryExpression, isUnaryLike, isUnionTypeAnnotation, isUpdateExpression, isUserWhitespacable, isV8IntrinsicIdentifier, isValidES3Identifier, isValidIdentifier, isVar, isVariableDeclaration, isVariableDeclarator, isVariance, isVoidTypeAnnotation, isWhile, isWhileStatement, isWithStatement, isYieldExpression, jsxAttribute as jSXAttribute, jsxClosingElement as jSXClosingElement, jsxClosingFragment as jSXClosingFragment, jsxElement as jSXElement, jsxEmptyExpression as jSXEmptyExpression, jsxExpressionContainer as jSXExpressionContainer, jsxFragment as jSXFragment, jsxIdentifier as jSXIdentifier, jsxMemberExpression as jSXMemberExpression, jsxNamespacedName as jSXNamespacedName, jsxOpeningElement as jSXOpeningElement, jsxOpeningFragment as jSXOpeningFragment, jsxSpreadAttribute as jSXSpreadAttribute, jsxSpreadChild as jSXSpreadChild, jsxText as jSXText, jsxAttribute, jsxClosingElement, jsxClosingFragment, jsxElement, jsxEmptyExpression, jsxExpressionContainer, jsxFragment, jsxIdentifier, jsxMemberExpression, jsxNamespacedName, jsxOpeningElement, jsxOpeningFragment, jsxSpreadAttribute, jsxSpreadChild, jsxText, labeledStatement, logicalExpression, matchesPattern, memberExpression, metaProperty, mixedTypeAnnotation, moduleExpression, newExpression, noop, nullLiteral, nullLiteralTypeAnnotation, nullableTypeAnnotation, NumberLiteral as numberLiteral, numberLiteralTypeAnnotation, numberTypeAnnotation, numericLiteral, objectExpression, objectMethod, objectPattern, objectProperty, objectTypeAnnotation, objectTypeCallProperty, objectTypeIndexer, objectTypeInternalSlot, objectTypeProperty, objectTypeSpreadProperty, opaqueType, optionalCallExpression, optionalIndexedAccessType, optionalMemberExpression, parenthesizedExpression, pipelineBareFunction, pipelinePrimaryTopicReference, pipelineTopicExpression, placeholder, prependToMemberExpression, privateName, program, qualifiedTypeIdentifier, react, recordExpression, regExpLiteral, RegexLiteral as regexLiteral, removeComments, removeProperties, removePropertiesDeep, removeTypeDuplicates, restElement, RestProperty as restProperty, returnStatement, sequenceExpression, shallowEqual, spreadElement, SpreadProperty as spreadProperty, staticBlock, stringLiteral, stringLiteralTypeAnnotation, stringTypeAnnotation, _super as super, switchCase, switchStatement, symbolTypeAnnotation, tsAnyKeyword as tSAnyKeyword, tsArrayType as tSArrayType, tsAsExpression as tSAsExpression, tsBigIntKeyword as tSBigIntKeyword, tsBooleanKeyword as tSBooleanKeyword, tsCallSignatureDeclaration as tSCallSignatureDeclaration, tsConditionalType as tSConditionalType, tsConstructSignatureDeclaration as tSConstructSignatureDeclaration, tsConstructorType as tSConstructorType, tsDeclareFunction as tSDeclareFunction, tsDeclareMethod as tSDeclareMethod, tsEnumBody as tSEnumBody, tsEnumDeclaration as tSEnumDeclaration, tsEnumMember as tSEnumMember, tsExportAssignment as tSExportAssignment, tsExpressionWithTypeArguments as tSExpressionWithTypeArguments, tsExternalModuleReference as tSExternalModuleReference, tsFunctionType as tSFunctionType, tsImportEqualsDeclaration as tSImportEqualsDeclaration, tsImportType as tSImportType, tsIndexSignature as tSIndexSignature, tsIndexedAccessType as tSIndexedAccessType, tsInferType as tSInferType, tsInstantiationExpression as tSInstantiationExpression, tsInterfaceBody as tSInterfaceBody, tsInterfaceDeclaration as tSInterfaceDeclaration, tsIntersectionType as tSIntersectionType, tsIntrinsicKeyword as tSIntrinsicKeyword, tsLiteralType as tSLiteralType, tsMappedType as tSMappedType, tsMethodSignature as tSMethodSignature, tsModuleBlock as tSModuleBlock, tsModuleDeclaration as tSModuleDeclaration, tsNamedTupleMember as tSNamedTupleMember, tsNamespaceExportDeclaration as tSNamespaceExportDeclaration, tsNeverKeyword as tSNeverKeyword, tsNonNullExpression as tSNonNullExpression, tsNullKeyword as tSNullKeyword, tsNumberKeyword as tSNumberKeyword, tsObjectKeyword as tSObjectKeyword, tsOptionalType as tSOptionalType, tsParameterProperty as tSParameterProperty, tsParenthesizedType as tSParenthesizedType, tsPropertySignature as tSPropertySignature, tsQualifiedName as tSQualifiedName, tsRestType as tSRestType, tsSatisfiesExpression as tSSatisfiesExpression, tsStringKeyword as tSStringKeyword, tsSymbolKeyword as tSSymbolKeyword, tsTemplateLiteralType as tSTemplateLiteralType, tsThisType as tSThisType, tsTupleType as tSTupleType, tsTypeAliasDeclaration as tSTypeAliasDeclaration, tsTypeAnnotation as tSTypeAnnotation, tsTypeAssertion as tSTypeAssertion, tsTypeLiteral as tSTypeLiteral, tsTypeOperator as tSTypeOperator, tsTypeParameter as tSTypeParameter, tsTypeParameterDeclaration as tSTypeParameterDeclaration, tsTypeParameterInstantiation as tSTypeParameterInstantiation, tsTypePredicate as tSTypePredicate, tsTypeQuery as tSTypeQuery, tsTypeReference as tSTypeReference, tsUndefinedKeyword as tSUndefinedKeyword, tsUnionType as tSUnionType, tsUnknownKeyword as tSUnknownKeyword, tsVoidKeyword as tSVoidKeyword, taggedTemplateExpression, templateElement, templateLiteral, thisExpression, thisTypeAnnotation, throwStatement, toBindingIdentifierName, toBlock, toComputedKey, _default$3 as toExpression, toIdentifier, toKeyAlias, _default$2 as toStatement, topicReference, traverse, traverseFast, tryStatement, tsAnyKeyword, tsArrayType, tsAsExpression, tsBigIntKeyword, tsBooleanKeyword, tsCallSignatureDeclaration, tsConditionalType, tsConstructSignatureDeclaration, tsConstructorType, tsDeclareFunction, tsDeclareMethod, tsEnumBody, tsEnumDeclaration, tsEnumMember, tsExportAssignment, tsExpressionWithTypeArguments, tsExternalModuleReference, tsFunctionType, tsImportEqualsDeclaration, tsImportType, tsIndexSignature, tsIndexedAccessType, tsInferType, tsInstantiationExpression, tsInterfaceBody, tsInterfaceDeclaration, tsIntersectionType, tsIntrinsicKeyword, tsLiteralType, tsMappedType, tsMethodSignature, tsModuleBlock, tsModuleDeclaration, tsNamedTupleMember, tsNamespaceExportDeclaration, tsNeverKeyword, tsNonNullExpression, tsNullKeyword, tsNumberKeyword, tsObjectKeyword, tsOptionalType, tsParameterProperty, tsParenthesizedType, tsPropertySignature, tsQualifiedName, tsRestType, tsSatisfiesExpression, tsStringKeyword, tsSymbolKeyword, tsTemplateLiteralType, tsThisType, tsTupleType, tsTypeAliasDeclaration, tsTypeAnnotation, tsTypeAssertion, tsTypeLiteral, tsTypeOperator, tsTypeParameter, tsTypeParameterDeclaration, tsTypeParameterInstantiation, tsTypePredicate, tsTypeQuery, tsTypeReference, tsUndefinedKeyword, tsUnionType, tsUnknownKeyword, tsVoidKeyword, tupleExpression, tupleTypeAnnotation, typeAlias, typeAnnotation, typeCastExpression, typeParameter, typeParameterDeclaration, typeParameterInstantiation, typeofTypeAnnotation, unaryExpression, unionTypeAnnotation, updateExpression, v8IntrinsicIdentifier, validate, _default$1 as valueToNode, variableDeclaration, variableDeclarator, variance, voidTypeAnnotation, whileStatement, withStatement, yieldExpression };
export { GeneralImportGlobOptions, ImportGlobFunction, ImportGlobOptions, KnownAsTypeMap } from '../../types/importGlob.js';
export { _import as import}
import "./index.css"; // ✅ Make sure this is the correct path
import "@testing-library/jest-dom";
import "@testing-library/jest-dom"; // Import Jest DOM extensions correctly
import '../../HttpResponse-DQOloMJy.js';
import '../../bun'
import '../../jest'
import '../../jest-globals'
import '../../typeUtils.js';
import '../../types/customEvent.js';
import '../../types/hmrPayload.js';
import '../../types/hot.js';
import '../../vitest'
import '../HttpResponse-DQOloMJy.js';
import '../Interceptor-436630be.js';
import '../Interceptor-af98b768.js';
import '../glossary-6564c252.js';
import '../internal/isIterable.js';
import '../matching/matchRequestUrl.js';
import '../typeUtils.js';
import '../utils/internal/isIterable.js';
import '../utils/matching/matchRequestUrl.js';
import './chunks/benchmark.d.BwvBVTda.js';
import './chunks/config.d.UqE-KR0o.js';
import './chunks/coverage.d.S9RMNXIe.js';
import './chunks/environment.d.Dmw5ulng.js';
import './chunks/mocker.d.BE_2ls6u.js';
import './chunks/vite.d.D3ndlJcw.js';
import './chunks/worker.d.CHGSOG0s.js';
import './click';
import './cut';
import './dist/chai.cjs'
import './environment.d-DHdQ1Csl.js';
import './internal/isIterable.js';
import './isIterable.js';
import './keydown';
import './keypress';
import './keyup';
import './paste';
import './registry.d-D765pazg.js';
import './removable.js';
import './request/onUnhandledRequest.js';
import './style.css';
import './subscribable.js';
import './trace-mapping.d-DLVdEqOp.js';
import './typeUtils.js';
import './types.d-D_aRZRdy.js';
import './utils/internal/Disposable.js';
import './utils/internal/isIterable.js';
import './utils/matching/matchRequestUrl.js';
import './utils/request/onUnhandledRequest.js';
import '@mswjs/interceptors';
import '@mswjs/interceptors/WebSocket';
import '@open-draft/deferred-promise';
import '@open-draft/logger';
import '@vitest/expect';
import '@vitest/mocker';
import '@vitest/pretty-format';
import '@vitest/runner';
import '@vitest/runner/utils';
import '@vitest/snapshot';
import '@vitest/snapshot/environment';
import '@vitest/snapshot/manager';
import '@vitest/spy';
import '@vitest/utils';
import '@vitest/utils/diff';
import '@vitest/utils/source-map';
import 'chai';
import 'graphql';
import 'motion-dom';
import 'motion-utils';
import 'node
import 'react';
import 'react/jsx-runtime';
import 'reflect-metadata';
import 'strict-event-emitter';
import 'tinybench';
import 'vite';
import 'vite-node';
import 'vite-node/client';
import 'vitest'
import 'vitest/optional-types.js';
import * as ARIAQuerySelector from './ARIAQuerySelector.js';
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import * as Ajv from 'ajv';
import * as AlertDialog from './alert-dialog';
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";
import * as ArrowPrimitive from '@radix-ui/react-arrow';
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";
import * as Attributes from './api/attributes.js';
import * as AvatarPrimitive from "@radix-ui/react-avatar";
import * as Bidi from 'chromium-bidi/lib/cjs/protocol/protocol.js';
import * as BidiMapper from 'chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js';
import * as CSS from "csstype";
import * as CSS from 'csstype'
import * as CSS from 'csstype';
import * as CSSSelector from './CSSSelector.js';
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";
import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import * as Css from './api/css.js';
import * as CustomQuerySelectors from './CustomQuerySelector.js';
import * as DialogPrimitive from "@radix-ui/react-dialog";
import * as DialogPrimitive from '@radix-ui/react-dialog';
import * as DismissableLayer from '@radix-ui/react-dismissable-layer';
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import * as ESTree from "estree";
import * as Either from 'fp-ts/Either';
import * as Extract from './api/extract.js';
import * as Forms from './api/forms.js';
import * as H from 'history';
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";
import * as Joi from 'joi';
import * as K from "./kinds";
import * as LabelPrimitive from "@radix-ui/react-label";
import * as Manipulation from './api/manipulation.js';
import * as MenuPrimitive from '@radix-ui/react-menu';
import * as MenubarPrimitive from "@radix-ui/react-menubar";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import * as Option from 'fp-ts/Option';
import * as PQuerySelector from './PQuerySelector.js';
import * as Parser from "yargs-parser";
import * as PierceQuerySelector from './PierceQuerySelector.js';
import * as PopoverPrimitive from "@radix-ui/react-popover";
import * as PopperPrimitive from '@radix-ui/react-popper';
import * as PostCSS from 'postcss';
import * as ProgressPrimitive from "@radix-ui/react-progress";
import * as PropTypes from "prop-types";
import * as Puppeteer from './index.js';
import * as Puppeteer from './puppeteer';
import * as PuppeteerCore from 'puppeteer-core/internal/puppeteer-core.js';
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import * as RadixDialog from '@radix-ui/react-dialog';
import * as React from "./";
import * as React from "react";
import * as React from 'react'
import * as React from 'react';
import * as React from 'react';
import * as React$1 from 'react';
import * as ReactDOMClient from 'react-dom/client'
import * as ReactTestUtils from ".";
import * as ReadonlyArray from 'fp-ts/ReadonlyArray';
import * as ReadonlyRecord from 'fp-ts/ReadonlyRecord';
import * as RechartsPrimitive from "recharts";
import * as ResizablePrimitive from "react-resizable-panels";
import * as RovingFocusGroup from '@radix-ui/react-roving-focus';
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import * as SelectPrimitive from "@radix-ui/react-select";
import * as SemiGroup from 'fp-ts/Semigroup';
import * as SeparatorPrimitive from "@radix-ui/react-separator";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import * as SliderPrimitive from "@radix-ui/react-slider";
import * as SwitchPrimitives from "@radix-ui/react-switch";
import * as TabsPrimitive from "@radix-ui/react-tabs";
import * as TextQuerySelector from './TextQuerySelector.js';
import * as ToastPrimitives from "@radix-ui/react-toast";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import * as Transformers from './lib/transformers'
import * as Traversing from './api/traversing.js';
import * as Types from '../typebox';
import * as Vest from 'vest';
import * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';
import * as XPathQuerySelector from './XPathQuerySelector.js';
import * as Yup from 'yup';
import * as _radix_ui_react_context from '@radix-ui/react-context';
import * as array from './array';
import * as async from './providers/async';
import * as chai from 'chai';
import * as cheerio from "cheerio";
import * as cheerio from './index.js';
import * as chrome from './chrome.js';
import * as chromeHeadlessShell from './chrome-headless-shell.js';
import * as chromedriver from './chromedriver.js';
import * as chromium from './chromium.js';
import * as classValidator from 'class-validator';
import * as common from './common';
import * as constants from './v4/constants';
import * as constants4 from './v4/constants';
import * as constants6 from './v6/constants';
import * as controllers from './controllers/index.js';
import * as directApi from './directApi';
import * as ed5 from "./xml/1.0/ed5";
import * as elements from './elements/index.js';
import * as entities from "./decode.js";
import * as entities from "./index.js";
import * as errno from './errno';
import * as eslint from 'eslint';
import * as estree from 'estree';
import * as events from 'node
import * as fastq from '../'
import * as fileSaver from "file-saver";
import * as firefox from './firefox.js';
import * as fixtures from '../__fixtures__/fixtures.js';
import * as formatters from './formatters';
import * as fs from "./gensync-utils/fs.ts";
import * as fs from "fs";
import * as fs from './adapters/fs';
import * as fs from './fs';
import * as fs from 'fs';
import * as fs from 'node
import * as fsScandir from '@nodelib/fs.scandir';
import * as fsStat from '@nodelib/fs.stat';
import * as fsWalk from '@nodelib/fs.walk';
import * as helpers from './v6/helpers';
import * as htmlparser2 from 'htmlparser2';
import * as http from 'http';
import * as http from 'node
import * as https from 'https';
import * as https from 'node
import * as i18next from 'i18next';
import * as labels from './labels';
import * as lib from "./lib";
import * as lodash from 'lodash';
import * as matchers from '../../matchers'
import * as matchers from './types/matchers'
import * as matchersStandalone from '../../matchers-standalone'
import * as motion_dom from 'motion-dom';
import * as net from 'net';
import * as net from 'node
import * as nsed3 from "./xmlns/1.0/ed3";
import * as originalMatchers from '../../matchers'
import * as path from "path";
import * as path from './path';
import * as path from 'node
import * as path from 'path';
import * as pattern from './pattern';
import * as pdfModule from "@/utils/pdf/generateValuationPdf";
import * as plugins from './plugins/index.js';
import * as presets from './presets';
import * as prettyFormat from 'pretty-format'
import * as psl from 'psl';
import * as queries from './queries'
import * as queryHelpers from './query-helpers'
import * as react from 'react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as readline from 'node
import * as realZlib from 'zlib';
import * as rollup from 'rollup';
import * as scales from './scales/index.js';
import * as scopeManager from '@typescript-eslint/scope-manager';
import * as select from 'cheerio-select';
import * as spy from '@vitest/spy';
import * as staticMethods from './static.js';
import * as stream from './stream';
import * as stream from 'node
import * as stream from 'stream';
import * as string from './string';
import * as t from "@babel/types";
import * as t from "ts-interface-checker";
import * as t from 'io-ts';
import * as t from 'typanion';
import * as taskManager from './managers/tasks';
import * as tinybench from 'tinybench';
import * as tls from 'tls';
import * as toughCookie from 'tough-cookie'
import * as ts from 'typescript';
import * as tt from 'io-ts-types';
import * as typeschema from '@typeschema/main';
import * as undici from 'undici';
import * as url from 'node
import * as util from './util.js';
import * as util from 'util';
import * as utils from './utils.js';
import * as v from 'valibot';
import * as v6 from './constants';
import * as v8 from 'v8';
import * as valibot from 'valibot';
import * as vest from 'vest';
import * as vite from 'vite';
import * as yup from 'yup';
import * as z from "./external";
import * as z from "zod";
import * as zlib from 'minizlib';
import * as zlib from 'zlib'
import AElement from './AElement';
import AboutPage from "./pages/AboutPage";
import Absolute from '../../Layout/Absolute';
import AccessDeniedPage from "@/pages/AccessDeniedPage";
import AccountPage from "./pages/AccountPage";
import AddEditVehicleForm from "../AddEditVehicleForm";
import AddEditVehicleForm from "./AddEditVehicleForm";
import Agent from './agent'
import Agent from'./agent'
import Ajv, { DefinedError } from 'ajv';
import AnimateColorElement from './AnimateColorElement';
import AnimateElement from './AnimateElement';
import AnimateTransformElement from './AnimateTransformElement';
import Animations from "../core/core.animations.js";
import App from "./App";
import AppLayout from "@/components/layout/AppLayout";
import AppearanceCharacteristics from "./AppearanceCharacteristics";
import AppearanceCharacteristics from "./AppearanceCharacteristics";
import AppearanceCharacteristics from 'src/core/annotation/AppearanceCharacteristics';
import Ascii85Stream from 'src/core/streams/Ascii85Stream';
import AsciiHexStream from 'src/core/streams/AsciiHexStream';
import AsyncProvider from './async';
import AsyncReader from '../readers/async';
import AtRule = require('./at-rule.js')
import AtRule from './at-rule.js'
import AtRule, { AtRuleProps } from './at-rule.js'
import AuthAdminApi from './AuthAdminApi'
import AuthAdminApi from './AuthAdminApi';
import AuthClient from './AuthClient'
import AuthClient from './AuthClient';
import AuthGuard from "@/guards/AuthGuard";
import AuthLandingPage from "@/pages/auth/AuthLandingPage";
import AuthLayout from "@/layouts/AuthLayout";
import BalancedPool from './balanced-pool'
import BaseParser from "./BaseParser";
import BaseParser from "./BaseParser";
import BaseParser from 'src/core/parser/BaseParser';
import BasePlatform from "./platform.base.js";
import BasicPlatform from "./platform.basic.js";
import Benchmark from "benchmark";
import Blob from "./index.js";
import BodyReadable from './readable'
import BorderStyle from "./BorderStyle";
import BorderStyle from "./BorderStyle";
import BorderStyle from 'src/core/annotation/BorderStyle';
import BoundingBox from '../BoundingBox';
import BoundingBox from './BoundingBox';
import Buffer, { BufferEncoding } from 'bare-buffer'
import ByteStream from "./ByteStream";
import ByteStream from "./ByteStream";
import ByteStream from 'src/core/parser/ByteStream';
import CAC from "./CAC.ts";
import CDButton from "../button/CDButton";
import CDButton from "./CDButton";
import CDButton from "./button/CDButton";
import CJSImportProcessor from "./CJSImportProcessor";
import CTAFooterSection from "./sections/CTAFooterSection";
import Canvg from '../Canvg';
import CharCodes from "./CharCodes";
import CharCodes from "./CharCodes";
import CharCodes from 'src/core/syntax/CharCodes';
import Chart from './core/core.controller.js';
import CircleElement from './CircleElement';
import Client from './client'
import Client from'./client'
import ClipPathElement from './ClipPathElement';
import Command from "./Command.ts";
import Command, { GlobalCommand, CommandConfig, HelpCallback, CommandExample } from "./Command.ts";
import Comment from './comment.js'
import Comment, { CommentProps } from './comment.js'
import CommonMakeModelSelect from "@/components/common/MakeModelSelect";
import Config from "./core.config.js";
import Connector from "./connector";
import Container from './container.js'
import Container, {
import Container, { ContainerProps } from './container.js'
import Container, { ContainerProps, NewChild } from './container.js'
import Container, { NewChild } from './container.js'
import CssSyntaxError from './css-syntax-error.js'
import CustomFontEmbedder from "./CustomFontEmbedder";
import CustomFontEmbedder from "./CustomFontEmbedder";
import CustomFontEmbedder from 'src/core/embedders/CustomFontEmbedder';
import DashboardLayout from "@/layouts/DashboardLayout";
import DashboardRouter from "@/components/dashboard/DashboardRouter";
import DatasetController from "../core/core.datasetController.js";
import DatasetController from "./core.datasetController.js";
import DealerDashboard from "../DealerDashboard";
import DealerDashboard from "./DealerDashboard";
import DealerDashboard from "@/pages/DealerDashboard";
import DealerDashboardPage from "../pages/dealer/DealerDashboardPage";
import DealerDashboardPage from "./DealerDashboardPage";
import DealerDashboardPage from "./pages/dealer/DealerDashboardPage";
import DealerGuard from "@/guards/DealerGuard";
import DealerInsightsPage from "@/pages/DealerInsightsPage";
import DealerInventoryPage from "./DealerInventoryPage";
import DealerInventoryStats from "@/components/dealer/DealerInventoryStats";
import DealerLayout from "@/layouts/DealerLayout";
import DealerLayoutPage from "./pages/dealer/DealerLayoutPage";
import DealerManagement from "@/pages/admin/DealerManagement";
import DealerSidebar from "@/components/dealer/DealerSidebar";
import DealerSignupPage from "@/pages/auth/DealerSignupPage";
import DealerVehicleDetailsPage from "./pages/dealer/DealerVehicleDetailsPage";
import Declaration from './declaration.js'
import Declaration, { DeclarationProps } from './declaration.js'
import DecodeStream from "./DecodeStream";
import DecodeStream from "./DecodeStream";
import DecodeStream from 'src/core/streams/DecodeStream';
import DeepFilter from './filters/deep';
import DefsElement from './DefsElement';
import DescElement from './DescElement';
import Dispatcher from "./dispatcher";
import Dispatcher from './dispatcher'
import Dispatcher from './dispatcher';
import Dispatcher from'./dispatcher'
import Document from '../Document';
import Document from './Document';
import Document from './document.js'
import Document, { DocumentProps } from './document.js'
import Document, { Element } from '../Document';
import Document, { Element } from './Document';
import Document, { Element, AnimateElement } from './Document';
import Document, { IDocumentOptions } from './Document';
import DomPlatform from "./platform.dom.js";
import DoughnutController from "./controller.doughnut.js";
import Dropzone from "../../";
import Dropzone, { DropzoneRef } from "../../";
import EE from 'events';
import Element from "../core/core.element.js";
import Element from "./core.element.js";
import Element from '../core/core.element.js';
import Element from './Element';
import EllipseElement from './EllipseElement';
import Embeddable from "./Embeddable";
import Embeddable from "./Embeddable";
import Embeddable from 'src/api//Embeddable';
import Embeddable from 'src/api/Embeddable';
import EmojiPicker from "emoji-picker-react";
import EmojiPickerReact from './EmojiPickerReact';
import EnhancedErrorBoundary from "@/components/common/EnhancedErrorBoundary";
import EntryFilter from './filters/entry';
import EntryTransformer from './transformers/entry';
import EnvHttpProxyAgent from './env-http-proxy-agent'
import ErrorBoundary from './components/ErrorBoundary';
import ErrorFilter from './filters/error';
import ErrorMessage from "@/components/ui/ErrorMessage";
import ErrorState from "./components/ErrorState";
import Errors from './errors'
import EventEmitter from 'eventemitter3';
import EventEmitter, { EventMap } from 'bare-events'
import FeColorMatrixElement from './FeColorMatrixElement';
import FeCompositeElement from './FeCompositeElement';
import FeDropShadowElement from './FeDropShadowElement';
import FeGaussianBlurElement from './FeGaussianBlurElement';
import FeMorphologyElement from './FeMorphologyElement';
import File from "./file.js";
import FileEmbedder from "../core/embedders/FileEmbedder";
import FileEmbedder from "../core/embedders/FileEmbedder";
import FileEmbedder from 'src/core/embedders/FileEmbedder';
import FileEmbedder, { AFRelationship } from 'src/core/embedders/FileEmbedder';
import FilterElement from './FilterElement';
import FlateStream from 'src/core/streams/FlateStream';
import Flex from '../../Layout/Flex';
import Flex from '../Layout/Flex';
import FollowUpForm from "@/components/followup/FollowUpForm";
import FollowUpForm from "@/components/lookup/followup/FollowUpForm";
import FontElement from './FontElement';
import FontFaceElement from './FontFaceElement';
import ForgotPasswordPage from "./ForgotPasswordPage";
import FoundCarCard from "@/components/lookup/found/FoundCarCard"; // <-- new import
import GElement from './GElement';
import GlyphElement from './GlyphElement';
import GoTrueAdminApi from './GoTrueAdminApi'
import GoTrueAdminApi from './GoTrueAdminApi';
import GoTrueClient from './GoTrueClient'
import GoTrueClient from './GoTrueClient';
import GradientElement from './GradientElement';
import Graphemer from './Graphemer';
import GraphemerIterator from './GraphemerIterator';
import GuestGuard from "@/guards/GuestGuard";
import HeroSection from "./sections/HeroSection";
import Home from "@/pages/Home";
import HomePage from "./pages/HomePage";
import HowItWorksSection from "./sections/HowItWorksSection";
import ImageElement from './ImageElement';
import Input from './input.js'
import Input, { FilePosition } from './input.js'
import JavaScriptEmbedder from "../core/embedders/JavaScriptEmbedder";
import JavaScriptEmbedder from "../core/embedders/JavaScriptEmbedder";
import JavaScriptEmbedder from 'src/core/embedders/JavaScriptEmbedder';
import KEYS from "./visitor-keys.js";
import LRUCache from 'lru-cache';
import LZWStream from 'src/core/streams/LZWStream';
import LanguageDetector from "i18next-browser-languagedetector";
import Layout from "./components/layout/Layout";
import Layout from "@/components/layout/Layout";
import LazyResult from './lazy-result.js'
import LineElement from './LineElement';
import LinearGradientElement from './LinearGradientElement';
import LinearScaleBase from "./scale.linearbase.js";
import LoadingState from "./components/LoadingState";
import LoginDealerPage from "@/pages/auth/LoginDealerPage";
import LoginForm from "./LoginForm";
import LoginPage from "./LoginPage";
import LoginPage from "./pages/LoginPage";
import LoginUserPage from "@/pages/auth/LoginUserPage";
import Logo from "./Logo";
import LookupPage from "@/pages/LookupPage";
import MIMEType from 'whatwg-mimetype';
import MagicString, { SourceMap } from 'magic-string';
import MainLayout from "@/components/layout/MainLayout";
import MakeModelSelect from "./MakeModelSelect";
import ManualEntryForm from "./ManualEntryForm";
import ManualEntryForm from "@/components/lookup/manual/ManualEntryForm";
import ManualEntryForm from "@/components/lookup/manual/ManualEntryForm";
import MarkerElement from './MarkerElement';
import MaskElement from './MaskElement';
import Matcher from './matcher';
import Matrix from './Matrix';
import MissingGlyphElement from './MissingGlyphElement';
import MobileLayout from "./MobileLayout";
import MobileMenu from "./MobileMenu";
import MockAgent from './mock-agent'
import MockAgent from'./mock-agent'
import MockClient from'./mock-client'
import MockDispatch = MockInterceptor.MockDispatch;
import MockPool from'./mock-pool'
import Mouse from './Mouse';
import NameManager from "./NameManager";
import NoWorkResult from './no-work-result.js'
import Node from './node.js'
import Node, {
import Node, { ChildNode, ChildProps, NodeProps } from './node.js'
import Node, { NodeProps } from './node.js'
import NodeWebSocket from 'ws';
import Nope from 'nope-validator';
import NotFoundPage from "./pages/NotFoundPage";
import NotFoundPage from "@/pages/NotFoundPage";
import Ops from 'src/core/operators/PDFOperatorNames';
import Option from "./Option.ts";
import Option, { OptionConfig } from "./Option.ts";
import PDFAcroButton from "./PDFAcroButton";
import PDFAcroButton from "./PDFAcroButton";
import PDFAcroButton from 'src/core/acroform/PDFAcroButton';
import PDFAcroCheckBox from 'src/core/acroform/PDFAcroCheckBox';
import PDFAcroChoice from "./PDFAcroChoice";
import PDFAcroChoice from "./PDFAcroChoice";
import PDFAcroChoice from 'src/core/acroform/PDFAcroChoice';
import PDFAcroComboBox from 'src/core/acroform/PDFAcroComboBox';
import PDFAcroField from "./PDFAcroField";
import PDFAcroField from "./PDFAcroField";
import PDFAcroField from 'src/core/acroform/PDFAcroField';
import PDFAcroListBox from 'src/core/acroform/PDFAcroListBox';
import PDFAcroNonTerminal from 'src/core/acroform/PDFAcroNonTerminal';
import PDFAcroPushButton from 'src/core/acroform/PDFAcroPushButton';
import PDFAcroRadioButton from 'src/core/acroform/PDFAcroRadioButton';
import PDFAcroSignature from 'src/core/acroform/PDFAcroSignature';
import PDFAcroTerminal from "./PDFAcroTerminal";
import PDFAcroTerminal from "./PDFAcroTerminal";
import PDFAcroTerminal from 'src/core/acroform/PDFAcroTerminal';
import PDFAcroText from 'src/core/acroform/PDFAcroText';
import PDFAnnotation from "./PDFAnnotation";
import PDFAnnotation from "./PDFAnnotation";
import PDFAnnotation from 'src/core/annotation/PDFAnnotation';
import PDFArray from "../objects/PDFArray";
import PDFArray from "../objects/PDFArray";
import PDFArray from "./PDFArray";
import PDFArray from "./PDFArray";
import PDFArray from "./objects/PDFArray";
import PDFArray from "./objects/PDFArray";
import PDFArray from 'src/core/objects/PDFArray';
import PDFBool from "../objects/PDFBool";
import PDFBool from "../objects/PDFBool";
import PDFBool from "./PDFBool";
import PDFBool from "./PDFBool";
import PDFBool from "./objects/PDFBool";
import PDFBool from "./objects/PDFBool";
import PDFBool from 'src/core/objects/PDFBool';
import PDFButton from "./PDFButton";
import PDFButton from "./PDFButton";
import PDFButton from 'src/api/form/PDFButton';
import PDFCatalog from 'src/core/structures/PDFCatalog';
import PDFCheckBox from "./PDFCheckBox";
import PDFCheckBox from "./PDFCheckBox";
import PDFCheckBox from 'src/api/form/PDFCheckBox';
import PDFContentStream from "./structures/PDFContentStream";
import PDFContentStream from "./structures/PDFContentStream";
import PDFContentStream from 'src/core/structures/PDFContentStream';
import PDFContext from "../PDFContext";
import PDFContext from "../PDFContext";
import PDFContext from "./PDFContext";
import PDFContext from "./PDFContext";
import PDFContext from 'src/core/PDFContext';
import PDFCrossRefSection from "../document/PDFCrossRefSection";
import PDFCrossRefSection from "../document/PDFCrossRefSection";
import PDFCrossRefSection from 'src/core/document/PDFCrossRefSection';
import PDFCrossRefStream from 'src/core/structures/PDFCrossRefStream';
import PDFDict from "../objects/PDFDict";
import PDFDict from "../objects/PDFDict";
import PDFDict from "./PDFDict";
import PDFDict from "./PDFDict";
import PDFDict from "./objects/PDFDict";
import PDFDict from "./objects/PDFDict";
import PDFDict from 'src/core/objects/PDFDict';
import PDFDict, { DictMap } from "../objects/PDFDict";
import PDFDict, { DictMap } from "../objects/PDFDict";
import PDFDict, { DictMap } from 'src/core/objects/PDFDict';
import PDFDocument from "../PDFDocument";
import PDFDocument from "../PDFDocument";
import PDFDocument from "./PDFDocument";
import PDFDocument from "./PDFDocument";
import PDFDocument from 'src/api/PDFDocument';
import PDFDropdown from "./PDFDropdown";
import PDFDropdown from "./PDFDropdown";
import PDFDropdown from 'src/api/form/PDFDropdown';
import PDFEmbeddedFile from 'src/api/PDFEmbeddedFile';
import PDFEmbeddedPage from "./PDFEmbeddedPage";
import PDFEmbeddedPage from "./PDFEmbeddedPage";
import PDFEmbeddedPage from 'src/api/PDFEmbeddedPage';
import PDFField from "./PDFField";
import PDFField from "./PDFField";
import PDFField from 'src/api/form/PDFField';
import PDFField, {
import PDFField, { FieldAppearanceOptions } from "./PDFField";
import PDFField, { FieldAppearanceOptions } from "./PDFField";
import PDFFlateStream from "./PDFFlateStream";
import PDFFlateStream from "./PDFFlateStream";
import PDFFlateStream from 'src/core/structures/PDFFlateStream';
import PDFFont from "../PDFFont";
import PDFFont from "../PDFFont";
import PDFFont from "./PDFFont";
import PDFFont from "./PDFFont";
import PDFFont from 'src/api/PDFFont';
import PDFForm from "./form/PDFForm";
import PDFForm from "./form/PDFForm";
import PDFForm from 'src/api/form/PDFForm';
import PDFHeader from "../document/PDFHeader";
import PDFHeader from "../document/PDFHeader";
import PDFHeader from "./document/PDFHeader";
import PDFHeader from "./document/PDFHeader";
import PDFHeader from 'src/core/document/PDFHeader';
import PDFHexString from "../objects/PDFHexString";
import PDFHexString from "../objects/PDFHexString";
import PDFHexString from "./PDFHexString";
import PDFHexString from "./PDFHexString";
import PDFHexString from "./objects/PDFHexString";
import PDFHexString from "./objects/PDFHexString";
import PDFHexString from 'src/core/objects/PDFHexString';
import PDFImage from "../PDFImage";
import PDFImage from "../PDFImage";
import PDFImage from "./PDFImage";
import PDFImage from "./PDFImage";
import PDFImage from '../PDFImage';
import PDFImage from '../PDFImage';
import PDFImage from 'src/api/PDFImage';
import PDFInvalidObject from 'src/core/objects/PDFInvalidObject';
import PDFJavaScript from 'src/api/PDFJavaScript';
import PDFName from "../objects/PDFName";
import PDFName from "../objects/PDFName";
import PDFName from "./PDFName";
import PDFName from "./PDFName";
import PDFName from "./objects/PDFName";
import PDFName from "./objects/PDFName";
import PDFName from 'src/core/objects/PDFName';
import PDFNull from "./PDFNull";
import PDFNull from "./PDFNull";
import PDFNull from "./objects/PDFNull";
import PDFNull from "./objects/PDFNull";
import PDFNull from 'src/core/objects/PDFNull';
import PDFNumber from "../objects/PDFNumber";
import PDFNumber from "../objects/PDFNumber";
import PDFNumber from "./PDFNumber";
import PDFNumber from "./PDFNumber";
import PDFNumber from "./objects/PDFNumber";
import PDFNumber from "./objects/PDFNumber";
import PDFNumber from 'src/core/objects/PDFNumber';
import PDFObject from "../objects/PDFObject";
import PDFObject from "../objects/PDFObject";
import PDFObject from "./PDFObject";
import PDFObject from "./PDFObject";
import PDFObject from "./objects/PDFObject";
import PDFObject from "./objects/PDFObject";
import PDFObject from 'src/core/objects/PDFObject';
import PDFObjectParser from "./PDFObjectParser";
import PDFObjectParser from "./PDFObjectParser";
import PDFObjectParser from 'src/core/parser/PDFObjectParser';
import PDFObjectStream from 'src/core/structures/PDFObjectStream';
import PDFObjectStreamParser from 'src/core/parser/PDFObjectStreamParser';
import PDFOperator from "../operators/PDFOperator";
import PDFOperator from "../operators/PDFOperator";
import PDFOperator from "./operators/PDFOperator";
import PDFOperator from "./operators/PDFOperator";
import PDFOperator from 'src/core/operators/PDFOperator';
import PDFOperatorNames from "./PDFOperatorNames";
import PDFOperatorNames from "./PDFOperatorNames";
import PDFOperatorNames from 'src/core/operators/PDFOperatorNames';
import PDFOptionList from "./PDFOptionList";
import PDFOptionList from "./PDFOptionList";
import PDFOptionList from 'src/api/form/PDFOptionList';
import PDFPage from "../PDFPage";
import PDFPage from "../PDFPage";
import PDFPage from "./PDFPage";
import PDFPage from "./PDFPage";
import PDFPage from 'src/api/PDFPage';
import PDFPageLeaf from "../structures/PDFPageLeaf";
import PDFPageLeaf from "../structures/PDFPageLeaf";
import PDFPageLeaf from "./PDFPageLeaf";
import PDFPageLeaf from "./PDFPageLeaf";
import PDFPageLeaf from 'src/core/structures/PDFPageLeaf';
import PDFPageTree from "./PDFPageTree";
import PDFPageTree from "./PDFPageTree";
import PDFPageTree from 'src/core/structures/PDFPageTree';
import PDFRadioGroup from "./PDFRadioGroup";
import PDFRadioGroup from "./PDFRadioGroup";
import PDFRadioGroup from 'src/api/form/PDFRadioGroup';
import PDFRawStream from "../objects/PDFRawStream";
import PDFRawStream from "../objects/PDFRawStream";
import PDFRawStream from "./PDFRawStream";
import PDFRawStream from "./PDFRawStream";
import PDFRawStream from "./objects/PDFRawStream";
import PDFRawStream from "./objects/PDFRawStream";
import PDFRawStream from 'src/core/objects/PDFRawStream';
import PDFRef from "../core/objects/PDFRef";
import PDFRef from "../core/objects/PDFRef";
import PDFRef from "../objects/PDFRef";
import PDFRef from "../objects/PDFRef";
import PDFRef from "./PDFRef";
import PDFRef from "./PDFRef";
import PDFRef from "./objects/PDFRef";
import PDFRef from "./objects/PDFRef";
import PDFRef from 'src/core/objects/PDFRef';
import PDFSignature from "./PDFSignature";
import PDFSignature from "./PDFSignature";
import PDFSignature from 'src/api/form/PDFSignature';
import PDFStream from "../objects/PDFStream";
import PDFStream from "../objects/PDFStream";
import PDFStream from "./PDFStream";
import PDFStream from "./PDFStream";
import PDFStream from "./objects/PDFStream";
import PDFStream from "./objects/PDFStream";
import PDFStream from 'src/core/objects/PDFStream';
import PDFString from "../objects/PDFString";
import PDFString from "../objects/PDFString";
import PDFString from "./PDFString";
import PDFString from "./PDFString";
import PDFString from "./objects/PDFString";
import PDFString from "./objects/PDFString";
import PDFString from 'src/core/objects/PDFString';
import PDFTextField from "./PDFTextField";
import PDFTextField from "./PDFTextField";
import PDFTextField from 'src/api/form/PDFTextField';
import PDFTrailer from "../document/PDFTrailer";
import PDFTrailer from "../document/PDFTrailer";
import PDFTrailer from 'src/core/document/PDFTrailer';
import PDFTrailerDict from "../document/PDFTrailerDict";
import PDFTrailerDict from "../document/PDFTrailerDict";
import PDFTrailerDict from 'src/core/document/PDFTrailerDict';
import PDFWidgetAnnotation from "../annotation/PDFWidgetAnnotation";
import PDFWidgetAnnotation from "../annotation/PDFWidgetAnnotation";
import PDFWidgetAnnotation from 'src/core/annotation/PDFWidgetAnnotation';
import PDFWriter from "./PDFWriter";
import PDFWriter from "./PDFWriter";
import PDFWriter from 'src/core/writers/PDFWriter';
import PDFXRefStreamParser from 'src/core/parser/PDFXRefStreamParser';
import Parser, { IParserOptions } from './Parser';
import PathElement from './PathElement';
import PathElement, { Marker } from './PathElement';
import PathParser from '../PathParser';
import PathParser, { CommandType } from '../PathParser';
import PatternElement from './PatternElement';
import PaymentCancelledPage from "@/pages/PaymentCancelledPage";
import PaymentSuccessPage from "@/pages/PaymentSuccessPage";
import PickerMain from './components/main/PickerMain';
import PlateDecoderForm from "@/components/lookup/PlateDecoderForm";
import PluginService from "./core.plugins.js";
import Plus from './svg/plus.svg';
import Point from '../Point';
import Point from './Point';
import PointElement from '../elements/element.point.js';
import PolygonElement from './PolygonElement';
import PolylineElement from './PolylineElement';
import Pool from "./pool"
import Pool from './pool'
import Pool from'./pool'
import PostgrestBuilder from './PostgrestBuilder'
import PostgrestBuilder from './PostgrestBuilder';
import PostgrestClient from './PostgrestClient'
import PostgrestClient from './PostgrestClient';
import PostgrestError from './PostgrestError'
import PostgrestError from './PostgrestError';
import PostgrestFilterBuilder from './PostgrestFilterBuilder'
import PostgrestFilterBuilder from './PostgrestFilterBuilder';
import PostgrestQueryBuilder from './PostgrestQueryBuilder'
import PostgrestQueryBuilder from './PostgrestQueryBuilder';
import PostgrestTransformBuilder from './PostgrestTransformBuilder'
import PostgrestTransformBuilder from './PostgrestTransformBuilder';
import PremiumDealerManagement from "@/components/admin/PremiumDealerManagement";
import PremiumDealerManagementPage from "@/pages/admin/PremiumDealerManagement";
import PremiumPage from "@/pages/Premium";
import PremiumPage from "@/pages/PremiumPage";
import PremiumReportsList from "@/components/dashboard/PremiumReportsList";
import PremiumSuccessPage from "@/pages/PremiumSuccessPage";
import PremiumValuationPage from "./pages/PremiumValuationPage";
import PremiumValuationSection from "./PremiumValuationSection";
import PreviousMap from './previous-map.js'
import Processor from './processor.js'
import Processor from 'postcss/lib/processor';
import ProfilePage from "./pages/ProfilePage";
import ProgressBarClass from 'progress';
import Promise = require('./index');
import Property from '../Property';
import ProtectedRoute from "@/components/auth/ProtectedRoute";
import Protocol from './protocol'
import Provider from './provider';
import ProxyAgent from'./proxy-agent'
import Push from './lib/push'
import Push from './lib/push';
import QADashboardPage from "../page";
import QRCode from "qrcode";
import QRCode from "qrcode.react";
import ROUTE_SNAPSHOT from "./ROUTE_SNAPSHOT.json";
import RadialGradientElement from './RadialGradientElement';
import React = require(".");
import React = require("./canary");
import React = require("react");
import React from "react";
import React from 'react';
import React from 'react';
import React, { CSSProperties } from 'react';
import React, { CSSProperties, PureComponent, ReactNode } from 'react';
import React, { CSSProperties, ReactNode, SVGProps } from 'react';
import React, { CSSProperties, SVGProps } from 'react';
import React, { Component } from "react";
import React, { Component, ErrorInfo, ReactNode } from "react";
import React, { Component, FunctionComponent, ReactElement } from 'react';
import React, { Component, FunctionComponent, ReactNode } from 'react';
import React, { ForwardedRef, MutableRefObject, DOMAttributes, ReactNode, HTMLAttributes, EffectCallback, Dispatch, RefObject as _RefObject1 } from "react";
import React, { Key, PureComponent, ReactElement } from 'react';
import React, { MutableRefObject, ReactElement, ReactNode, FocusEvent } from "react";
import React, { PureComponent } from 'react';
import React, { PureComponent, CSSProperties } from 'react';
import React, { PureComponent, CSSProperties, ReactNode, ReactElement, SVGProps } from 'react';
import React, { PureComponent, ReactElement } from 'react';
import React, { PureComponent, ReactElement, MouseEvent, SVGProps } from 'react';
import React, { PureComponent, ReactElement, ReactNode, SVGProps } from 'react';
import React, { PureComponent, ReactElement, SVGProps } from 'react';
import React, { PureComponent, ReactElement, TouchEvent, SVGProps } from 'react';
import React, { PureComponent, ReactNode, MouseEvent, ReactElement } from 'react';
import React, { ReactElement } from 'react';
import React, { ReactElement, CSSProperties } from 'react';
import React, { ReactElement, ReactNode, Component, SVGProps } from 'react';
import React, { ReactElement, SVGProps } from 'react';
import React, { ReactNode } from "react";
import React, { ReactNode } from 'react';
import React, { ReactNode, CSSProperties, SVGProps } from 'react';
import React, { ReactNode, ReactElement, SVGProps } from 'react';
import React, { ReactNode, SVGAttributes } from 'react';
import React, { ReactNode, useEffect } from "react";
import React, { SVGProps } from 'react';
import React, { createContext, ReactNode, useContext } from "react";
import React, { createContext, ReactNode, useContext, useState } from "react";
import React, { createContext, useContext, useEffect, useState } from "react";
import React, { createContext, useContext, useState } from "react";
import React, { createRef } from "react";
import React, { forwardRef } from "react";
import React, { lazy, Suspense } from "react";
import React, { type ElementType } from 'react';
import React, { type ElementType, type MouseEventHandler, type MutableRefObject, type Ref } from 'react';
import React, { type ElementType, type MutableRefObject, type Ref } from 'react';
import React, { type ElementType, type ReactNode, type Ref } from 'react';
import React, { type ElementType, type Ref } from 'react';
import React, { type MutableRefObject } from 'react';
import React, { type ReactElement, type ReactNode } from 'react';
import React, { type ReactNode } from 'react';
import React, { useCallback } from "react";
import React, { useCallback, useEffect, useState } from "react";
import React, { useCallback, useState } from "react";
import React, { useEffect } from "react";
import React, { useEffect, useRef } from "react";
import React, { useEffect, useRef, useState } from "react";
import React, { useEffect, useState } from "react";
import React, { useMemo } from "react";
import React, { useRef, useState } from "react";
import React, { useState } from "react";
import React, {ForwardedRef, ReactElement, useEffect} from 'react';
import React, {ForwardedRef, ReactNode, useContext, useEffect, useMemo, useRef} from 'react';
import React, {ForwardedRef, forwardRef, MutableRefObject, ReactElement, ReactNode, useContext, useEffect, useRef} from 'react';
import React, {HTMLAttributes, MutableRefObject, useRef} from 'react';
import React, {JSX, ReactNode, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';
import React, {MutableRefObject} from 'react';
import React, {ReactElement, ReactNode} from 'react';
import React, {ReactNode, useContext, useEffect, useMemo, useRef} from 'react';
import React, {createContext, DOMAttributes, ReactNode, useContext, useMemo} from 'react';
import React, {useMemo, useRef} from 'react';
import ReactDOM = require(".");
import ReactDOM = require("./canary");
import ReactDOM from "react-dom/client";
import ReactExports from 'react';
import ReactExports from 'react';
import ReactMarkdown from "react-markdown";
import Reader from './reader';
import ReaderAsync from '../readers/async';
import ReaderStream from '../readers/stream';
import ReaderStream from './stream';
import ReaderSync from '../readers/sync';
import RealtimeChannel from './RealtimeChannel'
import RealtimeChannel from './RealtimeChannel';
import RealtimeChannel, {
import RealtimeChannel, { RealtimeChannelOptions, RealtimeChannelSendResponse, RealtimePostgresChangesFilter, RealtimePostgresChangesPayload, RealtimePostgresInsertPayload, RealtimePostgresUpdatePayload, RealtimePostgresDeletePayload, REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_SUBSCRIBE_STATES, REALTIME_CHANNEL_STATES } from './RealtimeChannel';
import RealtimeClient, {
import RealtimeClient, { RealtimeClientOptions, RealtimeMessage, RealtimeRemoveChannelResponse } from './RealtimeClient';
import RealtimePresence, {
import RealtimePresence, { REALTIME_PRESENCE_LISTEN_EVENTS } from './RealtimePresence';
import RealtimePresence, { RealtimePresenceState, RealtimePresenceJoinPayload, RealtimePresenceLeavePayload, REALTIME_PRESENCE_LISTEN_EVENTS } from './RealtimePresence';
import RectElement from './RectElement';
import RegisterPage from "./RegisterPage";
import RegisterPage from "./pages/RegisterPage";
import RegisterPage from "@/pages/auth/RegisterPage";
import Relative from '../../Layout/Relative';
import Relative from '../Layout/Relative';
import RemoveScroll from './Combination';
import RenderedElement from './RenderedElement';
import Result from './result.js'
import Result, { Message } from './result.js'
import Result, { Message, ResultOptions } from './result.js'
import ResultPage from "./pages/ResultPage";
import RetryAgent from'./retry-agent'
import RetryHandler from "./retry-handler";
import RetryHandler from './retry-handler'
import RetryHandler from'./retry-handler'
import RoleGuard from "@/guards/RoleGuard";
import Root from './root.js'
import Root, { RootProps } from './root.js'
import Rotate from './Rotate';
import Rule from './rule.js'
import Rule, { RuleProps } from './rule.js'
import RunLengthStream from 'src/core/streams/RunLengthStream';
import SVGElement from './SVGElement';
import SVGFontLoader from '../SVGFontLoader';
import SVGMagnifier from './svg/magnifier.svg';
import SVGNavigation from './svg/CategoryNav.svg';
import SVGTimes from './svg/times.svg';
import SVGTriangle from './svg/triangle.svg';
import Scale from "../core/core.scale.js";
import Scale from "./core.scale.js";
import Scale from './Scale';
import Schema, { Type, string } from 'computed-types';
import Schema, { Type, string, number, array, boolean } from 'computed-types';
import Screen from './Screen';
import Screen, { IScreenOptions, IScreenStartOptions } from './Screen';
import Screen, { IScreenViewBoxConfig } from '../Screen';
import Serializer from './lib/serializer'
import Serializer from './lib/serializer';
import ServiceHistoryPage from "./pages/ServiceHistoryPage";
import ServiceRecordsEmpty from "./ServiceRecordsEmpty";
import Settings from '../../settings';
import Settings from '../settings';
import Settings, { DeepFilterFunction, EntryFilterFunction, ErrorFilterFunction, Options } from './settings';
import Settings, { Options } from './settings';
import SettingsPage from "@/pages/SettingsPage";
import SharedValuationPage from "@/pages/share/[token]";
import Skew from './Skew';
import SkewX from './SkewX';
import SkewY from './SkewY';
import SourceMap from './source-map';
import Space from '../Layout/Space';
import State from "../tokenizer/state";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import StopElement from './StopElement';
import StorageBucketApi from './packages/StorageBucketApi'
import StorageBucketApi from './packages/StorageBucketApi';
import StorageFileApi from './packages/StorageFileApi'
import StorageFileApi from './packages/StorageFileApi';
import Stream, { StreamType } from "./Stream";
import Stream, { StreamType } from "./Stream";
import Stream, { StreamType } from 'src/core/streams/Stream';
import StreamProvider from './stream';
import Stripe from "https
import StyleElement from './StyleElement';
import StyleToObject from 'style-to-object';
import Summary from "./sections/Summary";
import SupabaseClient from './SupabaseClient'
import SupabaseClient from './SupabaseClient';
import SymbolElement from './SymbolElement';
import SyncProvider from './sync';
import SyncReader from '../readers/sync';
import TPoolStats from './pool-stats'
import TRefElement from './TRefElement';
import TSpanElement from './TSpanElement';
import TextElement from './TextElement';
import TextNode from './TextNode';
import TextPathElement from './TextPathElement';
import TimeScale from "./scale.time.js";
import Timer from './lib/timer'
import Timer from './lib/timer';
import TitleElement from './TitleElement';
import TokenProcessor from "./TokenProcessor";
import Tokenizer, { type Callbacks, QuoteType } from "./Tokenizer.js";
import Transform from '../Transform';
import Transformer from "./Transformer";
import Translate from './Translate';
import TrustLogosSection from "./sections/TrustLogosSection";
import TypedRegistry from "./core.typedRegistry.js";
import UPNG from '@pdf-lib/upng';
import Undici from './types/index'
import UnifiedValuationResult from "@/components/valuation/UnifiedValuationResult";
import UnknownElement from './UnknownElement';
import UseElement from './UseElement';
import ValuationDetailPage from "@/pages/ValuationDetailPage";
import ValuationHistoryList from "@/components/dashboard/ValuationHistoryList";
import ValuationHomepageLayout from "./layout";
import ValuationPage from "./pages/ValuationPage";
import ValuationPage from "@/pages/ValuationPage";
import ValuationResult from "@/components/valuation/ValuationResult";
import ValuationResultPage from "./pages/ValuationResultPage";
import ValuationResultPage from "@/pages/ValuationResultPage";
import ValuationSummary from "./result/ValuationSummary";
import ViewOfferPage from "@/pages/view-offer/[token]";
import ViewPort from './ViewPort';
import ViewerPreferences from '../interactive/ViewerPreferences';
import ViewerPreferences from '../interactive/ViewerPreferences';
import VinDecoderResults from "./VinDecoderResults"; // ✅ Fixed default import
import VinDecoderResults from "./vin/VinDecoderResults";
import VinLookup from "../../lookup/VinLookup";
import VinLookup from "./VinLookup";
import VinLookupPage from "./pages/VinLookupPage";
import VinLookupPage from "@/pages/VinLookupPage";
import Warning from './warning.js'
import Warning, { WarningOptions } from './warning.js'
import activeElement from './activeElement';
import actualApply from './actualApply';
import addClass from './addClass';
import addEventListener from './addEventListener';
import ajvErrors from 'ajv-errors';
import animate from './animate';
import ansiRegex = require('ansi-regex');
import ansiRegex from 'ansi-regex';
import appendErrors from './appendErrors';
import arCommon from "./locales/ar/common.json";
import arVehicle from "./locales/ar/vehicle.json";
import arrayToPath from './arrayToPath';
import assert from 'node
import attribute from './attribute';
import axios from "axios";
import binaryExtensions = require('binary-extensions');
import buildConnector from "./connector";
import buildConnector from './connector';
import buildConnector from'./connector'
import chalk = require('chalk');
import chalk from 'chalk';
import childElements from './childElements';
import childNodes from './childNodes';
import childProcess from 'node
import clear from './clear';
import closest from './closest';
import clsx from 'clsx';
import commonjs from '@rollup/plugin-commonjs';
import confetti from "canvas-confetti";
import constants from './lib/constants'
import contains from './contains';
import cookieUtils from '@bundled-es-modules/cookie'
import data = require('./data.json');
import data from './main';
import dataJson = require('./data.json');
import dateRange from './dateRange';
import debug from 'debug';
import decodeCodePoint from "./decode_codepoint.js";
import defaultErrorMap from "./locales/en";
import defaults from "./core.defaults.js";
import dnsDomainIs from './dnsDomainIs';
import dnsDomainLevels from './dnsDomainLevels';
import dnsResolve from './dnsResolve';
import dotenv from "dotenv";
import emojis from '../data/emojis';
import emojis from '../data/emojis';
import enCommon from "./locales/en/common.json";
import errors from'./errors'
import errorsToRecord from '../errorsToRecord';
import errorsToRecord from './errorsToRecord';
import esCommon from "./locales/es/common.json";
import escapeStringRegexp = require('escape-string-regexp');
import extractHostname from './extract-hostname';
import filter from './filterEventHandler';
import fs from "fs";
import fs from 'node
import fs, {
import gensync, { type Handler } from "gensync";
import get from './get';
import getComputedStyle from './getComputedStyle';
import getDomain from './domain';
import getDomainWithoutSuffix from './domain-without-suffix';
import getSubdomain from './subdomain';
import getTargets, {
import hasClass from './hasClass';
import hasFlag = require('has-flag');
import height from './height';
import htmlDecodeTree from "./generated/decode-data-html.js";
import http from 'node
import http_ from 'http';
import https from 'https';
import https from 'node
import i18n from "./config";
import i18n from "i18next";
import importFresh = require('import-fresh');
import indentString = require('indent-string');
import insertAfter from './insertAfter';
import interceptors from './interceptors'
import isBinaryPath = require('is-binary-path');
import isFullwidthCodePoint from 'is-fullwidth-code-point';
import isInNet from './isInNet';
import isInput from './isInput';
import isIp from './is-ip';
import isPlainHostName from './isPlainHostName';
import isPlainObject from 'is-plain-obj';
import isPropValid from '@emotion/is-prop-valid'
import isResolvable from './isResolvable';
import isValidHostname from './is-valid';
import isVisible from './isVisible';
import jitiFactory from 'jiti'
import json from 'rollup-plugin-json';
import legacy from "../maps/legacy.json" assert { type
import list from './list.js'
import listen from './listen';
import loadConfig from "./config/index.ts";
import localHostOrDomainIs from './localHostOrDomainIs';
import matches from './matches';
import memoize from '@emotion/memoize'
import middle_name from './middle_name';
import mitt, {type Emitter} from '../../third_party/mitt/mitt.js';
import mockErrors from'./mock-errors'
import mri from "https
import myIpAddress from './myIpAddress';
import nativeFsp from "node
import net from 'node
import nextUntil from './nextUntil';
import nodeFetch from '@supabase/node-fetch'
import nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch'
import offset from './offset';
import offsetParent from './offsetParent';
import os from 'node
import ownerDocument from './ownerDocument';
import ownerWindow from './ownerWindow';
import pLocate = require('p-locate');
import packageJson from './package.json'
import pako from 'pako';
import parents from './parents';
import parse = require('./parse')
import parse from 'inline-style-parser';
import path from "node
import path from "path";
import path from 'node
import pathExists = require('path-exists');
import path__default from 'node
import position from './position';
import prepend from './prepend';
import process from "node
import promises from './promises'
import promisify from 'vest/promisify';
import puppeteer from "puppeteer-extra";
import puppeteer from '../puppeteer.js';
import querySelectorAll from './querySelectorAll';
import react from "@vitejs/plugin-react";
import react from "@vitejs/plugin-react-swc";
import readline from 'node
import redent = require('redent');
import remove from './remove';
import removeClass from './removeClass';
import removeEventListener from './removeEventListener';
import render from 'dom-serializer';
import renderWithHtmlparser2 from 'dom-serializer';
import resolve from '@rollup/plugin-node-resolve';
import rulesConfig from "../../valuationRules.json";
import rulesEngine from "../rulesEngine";
import scrollLeft from './scrollLeft';
import scrollParent from './scrollParent';
import scrollTo from './scrollTo';
import scrollTop from './scrollTop';
import scrollbarSize from './scrollbarSize';
import semver from 'semver';
import set from './set';
import shExpMatch from './shExpMatch';
import shebangRegex = require('shebang-regex');
import siblings from './siblings';
import skinToneVariations from '../../../data/skinToneVariations';
import skinToneVariations, {
import slash = require('slash');
import sourceMaps from 'rollup-plugin-sourcemaps';
import state from './state';
import statuses from '@bundled-es-modules/statuses'
import stringWidth from 'string-width';
import stringify = require('./stringify')
import stripAnsi = require('strip-ansi');
import stripAnsi from 'strip-ansi';
import stripIndent = require('strip-indent');
import style from './css';
import styleToJS = require('.');
import styles from "../styles";
import styles from "./styles";
import suffixLookup from './src/suffix-trie';
import template from "@babel/template";
import text from './text';
import timeRange from './timeRange';
import toggleClass from './toggleClass';
import toughCookie from '@bundled-es-modules/tough-cookie';
import toughCookie, {
import transitionEnd from './transitionEnd';
import traverse, { Hub, NodePath, Scope, Visitor } from "@babel/traverse";
import triggerEvent from './triggerEvent';
import ts = require("./typescript.js");
import ts from 'typescript';
import tsconfig from 'path/to/tsconfig.json';
import tty = require('tty');
import type * as Bidi from 'chromium-bidi/lib/cjs/protocol/protocol.js';
import type * as CLSX from "clsx";
import type * as CST from '../parse/cst';
import type * as Cdp from './cdp.js';
import type * as DefaultTreeAdapter from './tree-adapters/default.js';
import type * as ParserOptionsTypes from './ParserOptions';
import type * as ProgressBar from 'progress';
import type * as Protocol from '../protocol/protocol.js';
import type * as React from 'react';
import type * as Shared from './ESLintShared';
import type * as TSESLint from '../../ts-eslint';
import type * as TSESLint from '../ts-eslint';
import type * as TSESTree from './generated/ast-spec';
import type * as WebDriverBidi from './generated/webdriver-bidi.js';
import type * as WebDriverBidiBluetooth from './generated/webdriver-bidi-bluetooth.js';
import type * as WebDriverBidiPermissions from './generated/webdriver-bidi-permissions.js';
import type * as Yargs from 'yargs';
import type * as estree from 'estree';
import type * as fs from 'fs';
import type * as fsStat from '@nodelib/fs.stat';
import type * as jestMatcherUtils from 'jest-matcher-utils';
import type * as scandir from '@nodelib/fs.scandir';
import type * as ts from 'typescript';
import type * as ts from 'typescript/lib/tsserverlibrary';
import type CJSImportProcessor from "../CJSImportProcessor";
import type Debug from 'debug';
import type FS from 'node
import type NameManager from "../NameManager";
import type NameManager from "./NameManager";
import type Path from 'node
import type PrivateChart from '../core/core.controller.js';
import type Protocol from 'devtools-protocol';
import type ProtocolMapping from 'devtools-protocol/types/protocol-mapping.js';
import type PuppeteerUtil from '../injected/injected.js';
import type ReactHotLoaderTransformer from "./ReactHotLoaderTransformer";
import type RealtimeChannel from '../RealtimeChannel'
import type RealtimeChannel from '../RealtimeChannel';
import type RealtimeChannel from './RealtimeChannel'
import type RealtimeChannel from './RealtimeChannel';
import type RealtimeClient from './RealtimeClient'
import type RealtimeClient from './RealtimeClient';
import type RootTransformer from "../transformers/RootTransformer";
import type RootTransformer from "./RootTransformer";
import type Settings from '../settings';
import type TokenProcessor from "../TokenProcessor";
import type TokenProcessor from "./TokenProcessor";
import type WebSocket from 'ws';
import type [KebabCasedPropertiesDeep] from 'type-fest';
import type picomatch from "picomatch";
import type plugin from './index';
import type rules from './rules';
import type {
import type { $Dictionary, $NormalizeIntoArray } from './typescript/helpers.js';
import type { $MergeBy, $PreservedValue, $Dictionary } from './helpers.js';
import type { $Subtract, $Tuple } from './helpers.js';
import type { AICondition } from "@/types/photo";
import type { APIRequestContext, Browser, BrowserContext, BrowserContextOptions, Page, LaunchOptions, ViewportSize, Geolocation, HTTPCredentials, Locator, APIResponse, PageScreenshotOptions } from 'playwright-core';
import type { AST } from './AST';
import type { AST, ParserServices } from '@typescript-eslint/typescript-estree';
import type { ASTAndDefiniteProgram } from './shared';
import type { ASTAndDefiniteProgram, ASTAndNoProgram, ASTAndProgram } from './create-program/shared';
import type { ASTAndNoProgram } from './shared';
import type { ASTMaps } from './convert';
import type { ASTNode } from '../language/ast';
import type { ASTNode } from './ast';
import type { ASTNode, FieldNode } from '../language/ast';
import type { ASTValidationContext } from '../ValidationContext';
import type { ASTVisitor } from '../../../language/visitor';
import type { ASTVisitor } from '../../language/visitor';
import type { ASTVisitor } from '../language/visitor';
import type { AST_NODE_TYPES, AST_TOKEN_TYPES } from '../ts-estree';
import type { AST_NODE_TYPES, AST_TOKEN_TYPES, TSESTree } from '../ts-estree';
import type { AST_NODE_TYPES, TSESTree } from '@typescript-eslint/types';
import type { AST_TOKEN_TYPES, TSESTree } from '../ts-estree';
import type { AValue, DeepPickMatchingProps, Extends, IsUnion, MismatchArgs, Not, StrictEqualUsingTSInternalIdenticalToOperator } from './utils';
import type { AcceptedFilters } from '../types.js';
import type { AcceptedPlugin, PluginCreator } from 'postcss'
import type { Accessibility } from '../cdp/Accessibility.js';
import type { Action, Mutation } from './mutation'
import type { Action, MutationState } from './mutation'
import type { Action, QueryState } from './query'
import type { ActionFunction, ActionFunctionArgs, AgnosticPatchRoutesOnNavigationFunction, AgnosticPatchRoutesOnNavigationFunctionArgs, Blocker, BlockerFunction, DataStrategyFunction, DataStrategyFunctionArgs, DataStrategyMatch, DataStrategyResult, ErrorResponse, Fetcher, HydrationState, InitialEntry, JsonFunction, LazyRouteFunction, LoaderFunction, LoaderFunctionArgs, Location, Navigation, ParamParseKey, Params, Path, PathMatch, PathParam, PathPattern, RedirectFunction, RelativeRoutingType, Router as RemixRouter, FutureConfig as RouterFutureConfig, ShouldRevalidateFunction, ShouldRevalidateFunctionArgs, To, UIMatch } from "@remix-run/router";
import type { ActionOption } from './ActionOption.js';
import type { ActiveDataPoint, ChartEvent } from '../types/index.js';
import type { AddPreloadScriptOptions } from './Browser.js';
import type { AgnosticDataRouteMatch, AgnosticDataRouteObject, AgnosticRouteObject, DataStrategyFunction, DeferredData, DetectErrorBoundaryFunction, FormEncType, HTMLFormMethod, MapRoutePropertiesFunction, RouteData, Submission, UIMatch, AgnosticPatchRoutesOnNavigationFunction, DataWithResponseInit } from "./utils";
import type { AgnosticIndexRouteObject, AgnosticNonIndexRouteObject, AgnosticRouteMatch, History, LazyRouteFunction, Location, Action as NavigationType, RelativeRoutingType, Router, StaticHandlerContext, To, TrackedPromise } from "@remix-run/router";
import type { Airline, Airplane, Airport } from '../modules/airline';
import type { AirlineDefinition } from '../../..';
import type { AirlineDefinition } from './airline';
import type { Alias } from '../nodes/Alias';
import type { Alias } from './Alias';
import type { Alias } from './nodes/Alias';
import type { AlphaChar, AlphaNumericChar, Casing, NumericChar } from '../string';
import type { And, Extends, ExtendsExcludingAnyOrNever, IsAny, IsNever, IsUnknown, Not, UsefulKeys } from './utils';
import type { AnimalDefinition } from '../../..';
import type { AnimalDefinition } from './animal';
import type { Animation } from '../types/animation.js';
import type { AnyEqualityComparator, Dictionary, State, TypeEqualityComparator } from './internalTypes.d.ts';
import type { AnyNode } from "domhandler";
import type { AnyNode } from 'domhandler';
import type { AnyNode, Document } from 'domhandler';
import type { AnyNode, Document, Element } from 'domhandler';
import type { AnyNode, Document, Element, ParentNode } from 'domhandler';
import type { AnyNode, Document, ParentNode } from 'domhandler';
import type { AnyNode, Element } from 'domhandler';
import type { AnyObject } from '../types/basic.js';
import type { AnyRuleCreateFunction, AnyRuleModule, RuleCreateFunction, RuleFix, RuleModule } from './Rule';
import type { ArcOptions, Point } from '../types/index.js';
import type { ArrayOfStringOrObject, RuleListener } from 'eslint/lib/rules/no-restricted-imports';
import type { ArrowOptions as ArrowOptions_2 } from '@floating-ui/core';
import type { AsyncValidationOptions, Schema } from 'joi';
import type { Attribute, ElementLocation } from '../common/token.js';
import type { Attribute, Location, ElementLocation } from '../common/token.js';
import type { AttributeSelector, AttributeAction } from "css-what";
import type { AuthChangeEvent, AuthResponse, AuthTokenResponse, AuthTokenResponsePassword, AuthOtpResponse, CallRefreshTokenResult, GoTrueClientOptions, InitializeResult, OAuthResponse, SSOResponse, Session, SignInWithIdTokenCredentials, SignInWithOAuthCredentials, SignInWithPasswordCredentials, SignInWithPasswordlessCredentials, SignUpWithPasswordCredentials, SignInWithSSO, SignOut, Subscription, SupportedStorage, UserAttributes, UserResponse, VerifyOtpParams, GoTrueMFAApi, ResendParams, AuthFlowType, LockFunc, UserIdentity, SignInAnonymouslyCredentials, JWK, JwtPayload, JwtHeader } from './lib/types';
import type { AutoPlacementOptions as AutoPlacementOptions_2 } from '@floating-ui/core';
import type { AwaitProps, FutureConfig, IndexRouteProps, LayoutRouteProps, MemoryRouterProps, NavigateProps, OutletProps, PathRouteProps, RouteProps, RouterProps, RouterProviderProps, RoutesProps } from "./lib/components";
import type { Awaitable } from '../common/types.js';
import type { Awaitable, AwaitableIterable } from '../common/types.js';
import type { Awaitable, AwaitableIterable } from './types.js';
import type { Awaitable, AwaitablePredicate, EvaluateFunc, EvaluateFuncWith, HandleFor, NodeFor } from '../common/types.js';
import type { Awaitable, EvaluateFunc, EvaluateFuncWith, HandleFor, NodeFor } from '../common/types.js';
import type { Awaitable, HandleFor, NodeFor } from '../../common/types.js';
import type { AwaitableIterable } from '../common/types.js';
import type { AwaitableIterable, ElementFor, EvaluateFuncWith, HandleFor, HandleOr, NodeFor } from '../common/types.js';
import type { AwaitableIterable, HandleFor } from './types.js';
import type { BaseChartComponent } from './types.js';
import type { BasicAcceptedElems } from './types.js';
import type { BasicAcceptedElems, AcceptedElems } from '../types.js';
import type { BidiBrowser } from './Browser.js';
import type { BidiBrowserContext } from './BrowserContext.js';
import type { BidiCdpSession } from './CDPSession.js';
import type { BidiCommandParameterParser } from '../bidiMapper/BidiMapper.js';
import type { BidiCommandParameterParser } from './BidiParser.js';
import type { BidiConnection } from './Connection.js';
import type { BidiElementHandle } from './ElementHandle.js';
import type { BidiEvents, Commands as BidiCommands, Connection } from './core/Connection.js';
import type { BidiEvents, Commands, Connection } from './Connection.js';
import type { BidiFrame } from './Frame.js';
import type { BidiFrameRealm } from './Realm.js';
import type { BidiHTTPRequest } from './HTTPRequest.js';
import type { BidiHTTPResponse } from './HTTPResponse.js';
import type { BidiJSHandle } from './JSHandle.js';
import type { BidiPage } from './Page.js';
import type { BidiRealm } from './Realm.js';
import type { BidiTransport } from '../bidiMapper/BidiMapper.js';
import type { BidiTransport } from './BidiTransport.js';
import type { BidiWebWorker } from './WebWorker.js';
import type { Binding } from './Binding.js';
import type { Blob } from 'buffer'
import type { BlockMap } from '../parse/cst';
import type { BlockMap, BlockSequence, CollectionItem, Document, FlowCollection } from './cst';
import type { BlockMap, BlockSequence, FlowCollection, SourceToken } from '../parse/cst';
import type { BlockMap, FlowCollection } from '../parse/cst';
import type { BlockScalar } from '../parse/cst';
import type { BlockScalar, FlowScalar } from '../parse/cst';
import type { BlockScalar, FlowScalar, SourceToken } from '../parse/cst';
import type { BlockScalar, FlowScalar, SourceToken, Token } from './cst';
import type { BlockScope } from './BlockScope';
import type { BlockSequence } from '../parse/cst';
import type { BlockSequence, FlowCollection } from '../parse/cst';
import type { Blocker, BlockerFunction, Location, ParamParseKey, Params, Path, PathMatch, PathPattern, RelativeRoutingType, Router as RemixRouter, RevalidationState, To, UIMatch } from "@remix-run/router";
import type { Blockquote } from 'mdast';
import type { Bluetooth, Browser, BrowsingContext, Cdp, Emulation, Input, Network, Permissions, Script, Session, Storage, WebExtension } from '../protocol/protocol.js';
import type { BluetoothProcessor } from '../bluetooth/BluetoothProcessor.js';
import type { BluetoothProcessor } from './modules/bluetooth/BluetoothProcessor.js';
import type { BoundingBox } from '../api/ElementHandle.js';
import type { BoundingBox, ClickOptions, ElementHandle } from './ElementHandle.js';
import type { Break } from 'mdast';
import type { Browser } from '../../../protocol/protocol.js';
import type { Browser } from '../api/Browser.js';
import type { Browser } from './Browser.js';
import type { Browser, BrowserCloseCallback } from '../api/Browser.js';
import type { Browser, BrowsingContext, Cdp, Emulation, Input, Network, Script, Session, Storage, Permissions, Bluetooth, WebExtension } from '../protocol/protocol.js';
import type { Browser, BrowsingContext, Script } from '../../../protocol/protocol.js';
import type { Browser, Permission, WaitForTargetOptions } from './Browser.js';
import type { Browser, Session } from '../../../protocol/protocol.js';
import type { BrowserContext } from '../api/BrowserContext.js';
import type { BrowserContext } from './BrowserContext.js';
import type { BrowserContextEvents } from '../api/BrowserContext.js';
import type { BrowsingContext } from './BrowsingContext.js';
import type { BrowsingContext } from './core/BrowsingContext.js';
import type { BrowsingContext, Emulation } from '../../../protocol/protocol.js';
import type { BrowsingContext, JsUint, Script } from './generated/webdriver-bidi.js';
import type { BrowsingContextImpl } from '../context/BrowsingContextImpl.js';
import type { BrowsingContextImpl } from './BrowsingContextImpl.js';
import type { BrowsingContextStorage } from '../context/BrowsingContextStorage';
import type { BrowsingContextStorage } from '../context/BrowsingContextStorage.js';
import type { BrowsingContextStorage } from './BrowsingContextStorage.js';
import type { BrowsingContextStorage } from './modules/context/BrowsingContextStorage.js';
import type { CDPSession } from '../api/CDPSession.js';
import type { CDPSession } from '../puppeteer-core.js';
import type { CDPSession } from './CDPSession.js';
import type { CSSToken } from '@csstools/css-tokenizer';
import type { CacheDurationSeconds } from '@typescript-eslint/types';
import type { CacheDurationSeconds, DebugLevel, JSDocParsingMode, ProjectServiceOptions, SourceType } from '@typescript-eslint/types';
import type { CacheLike } from './ExpiringCache';
import type { Callback, ErrorCallback, Nullable } from './utils';
import type { CallerMetadata } from "../validation/options.ts";
import type { CancelOptions, DefaultError, NetworkMode } from './types'
import type { CanonicalPath } from '../create-program/shared';
import type { CanvasHTMLAttributes, MutableRefObject, ReactNode, JSX } from 'react';
import type { CartesianParsedData, ChartArea, Point, PointHoverOptions, PointOptions } from '../types/index.js';
import type { CatchClauseDefinition } from './CatchClauseDefinition';
import type { CatchScope } from './CatchScope';
import type { CategoricalChartState } from '../chart/types';
import type { CdpBrowser } from './Browser.js';
import type { CdpCDPSession } from './CdpSession.js';
import type { CdpClient } from '../../../cdp/CdpClient.js';
import type { CdpClient } from '../../BidiMapper.js';
import type { CdpClient } from '../cdp/CdpClient';
import type { CdpClient, CdpConnection } from '../../BidiMapper.js';
import type { CdpConnection } from '../../../cdp/CdpConnection.js';
import type { CdpConnection } from '../cdp/CdpConnection.js';
import type { CdpElementHandle } from './ElementHandle.js';
import type { CdpFrame } from './Frame.js';
import type { CdpHTTPRequest } from './HTTPRequest.js';
import type { CdpHTTPResponse } from './HTTPResponse.js';
import type { CdpPage } from './Page.js';
import type { CdpPreloadScript } from './CdpPreloadScript.js';
import type { CdpTarget } from '../cdp/CdpTarget.js';
import type { CdpTarget } from './Target.js';
import type { CdpWebWorker } from './WebWorker.js';
import type { ChannelProxy } from '../script/ChannelProxy.js';
import type { Chart } from '../types.js';
import type { Chart, ChartEvent } from '../types.js';
import type { Chart, ChartMeta, TRBL } from '../types/index.js';
import type { Chart, ChartType, ChartData, ChartOptions, DefaultDataPoint, Plugin, UpdateMode } from 'chart.js';
import type { Chart, Point, FontSpec, CanvasFontSpec, PointStyle, RenderTextOpts } from '../types/index.js';
import type { ChartArea } from '../types/index.js';
import type { ChartArea, FontSpec, Point } from '../types/index.js';
import type { ChartMeta } from '../types/index.js';
import type { ChartMeta, PointElement } from '../types/index.js';
import type { ChartOptions } from '../types/index.js';
import type { ChartType, ChartData, DefaultDataPoint, ChartDataset, ChartOptions, Chart } from 'chart.js';
import type { Cheerio } from '../cheerio.js';
import type { Cheerio } from './cheerio.js';
import type { CheerioAPI } from '../load.js';
import type { CheerioAPI } from './load.js';
import type { CheerioOptions } from '../options.js';
import type { CheerioOptions } from './options.js';
import type { ChemicalElement, Unit } from '../modules/science';
import type { ChildNode, ParentNode } from "domhandler";
import type { ChildProcess } from 'node
import type { ChromeReleaseChannel, LaunchOptions } from './LaunchOptions.js';
import type { ChromiumBidi } from '../protocol/protocol.js';
import type { ChromiumBidi, Session } from '../protocol/protocol.js';
import type { Chunk } from 'micromark-util-types';
import type { ClassFieldInitializerScope } from './ClassFieldInitializerScope';
import type { ClassNameDefinition } from './ClassNameDefinition';
import type { ClassProp, ClassValue, OmitUndefined, StringToBoolean } from "./types";
import type { ClassScope } from './ClassScope';
import type { ClassStaticBlockScope } from './ClassStaticBlockScope';
import type { ClassicConfig } from '../Config';
import type { ClassicConfig } from './Config';
import type { ClassicConfig, FlatConfig, SharedConfig } from './Config';
import type { ClickOptions } from '../ElementHandle.js';
import type { ClickOptions, ElementHandle } from '../api/ElementHandle.js';
import type { Code } from 'mdast';
import type { Code } from 'micromark-util-types';
import type { Collection } from '../nodes/Collection';
import type { CollectionItem } from '../parse/cst';
import type { CollectionItem, Token } from './cst';
import type { CollectionTag } from '../schema/types';
import type { CollectionTag } from '../types';
import type { CollectionTag, ScalarTag } from '../schema/types';
import type { CollectionTag, ScalarTag } from '../types';
import type { CollectionTag, ScalarTag } from './schema/types';
import type { CollectionTag, ScalarTag } from './types';
import type { Color } from '@csstools/color-helpers';
import type { ColorDefinition } from '../../..';
import type { ColorDefinition } from './color';
import type { CommandOptions } from '../api/CDPSession.js';
import type { CommerceDefinition } from '../../..';
import type { CommerceDefinition } from './commerce';
import type { CompanyDefinition } from '../../..';
import type { CompanyDefinition } from './company';
import type { ComparatorConfig, CreateState, CustomEqualCreatorOptions, EqualityComparator, InternalEqualityComparator } from './internalTypes.d.ts';
import type { Compatible } from 'vfile';
import type { Compile } from 'micromark-util-types';
import type { CompileOptions } from 'micromark-util-types';
import type { CompiledQuery, InternalOptions } from "../types.js";
import type { CompiledQuery, InternalOptions } from "./types.js";
import type { CompiledQuery, InternalOptions, CompileToken } from "../types.js";
import type { CompiledQuery, InternalOptions, CompileToken, Adapter } from "../types.js";
import type { CompiledQuery, InternalOptions, InternalSelector } from "./types.js";
import type { CompiledQuery, InternalOptions, InternalSelector, CompileToken } from "./types.js";
import type { CompiledQuery, Options, Query, Adapter } from "./types.js";
import type { ComplexPSelectorList } from '../injected/PQuerySelector.js';
import type { ComponentProps } from 'react';
import type { ComponentValue } from '@csstools/css-parser-algorithms';
import type { ComposeContext } from './compose-node';
import type { ComposeContext, ComposeNode } from './compose-node';
import type { ComposeErrorHandler } from './composer';
import type { ComputePositionConfig as ComputePositionConfig_2 } from '@floating-ui/core';
import type { ConditionalTypeScope } from './ConditionalTypeScope';
import type { Config } from "tailwindcss";
import type { Config } from './config.d'
import type { Config } from './types/config'
import type { Config } from 'tailwindcss'
import type { Config, PluginCreator } from './types/config'
import type { Config, Printer, Refs } from '../../types';
import type { Config, Printer, Refs } from './types';
import type { Configuration } from '../common/Configuration.js';
import type { Configuration } from 'puppeteer-core';
import type { ConnectOptions } from '../common/ConnectOptions.js';
import type { ConnectOptions } from './ConnectOptions.js';
import type { Connection as CdpConnection } from '../cdp/Connection.js';
import type { Connection } from '../cdp/Connection.js';
import type { Connection } from './Connection.js';
import type { ConnectionTransport } from '../common/ConnectionTransport.js';
import type { ConnectionTransport } from './ConnectionTransport.js';
import type { ConsoleMessage } from '../common/ConsoleMessage.js';
import type { Construct } from 'micromark-util-types';
import type { ConstructName } from 'mdast-util-to-markdown';
import type { ConstructorOverloadParameters, NumOverloads, OverloadsInfoUnion } from './overloads';
import type { ConstructorOverloadParameters, OverloadParameters, OverloadReturnTypes, OverloadsNarrowedByParameters } from './overloads';
import type { ContainerState } from 'micromark-util-types';
import type { Context } from 'vm';
import type { Context, NormalizedSelector } from './types';
import type { Context, ParsedOptions } from './types';
import type { ContextOptions, RuntimeOptions } from "./types";
import type { ContextualKeyword } from "../tokenizer/keywords";
import type { ContextualKeyword } from "./parser/tokenizer/keywords";
import type { ContinueRequestOverrides, ResponseForRequest } from '../api/HTTPRequest.js';
import type { Cookie } from './cookie';
import type { Cookie } from './cookie/cookie';
import type { Cookie, CookieData } from '../common/Cookie.js';
import type { Cookie, CookieParam, DeleteCookiesRequest } from '../common/Cookie.js';
import type { Cookie, DeleteCookiesRequest, CookieParam, CookiePartitionKey } from '../common/Cookie.js';
import type { CookiePartitionKey, Cookie, CookieParam, CookieSameSite, DeleteCookiesRequest } from '../common/Cookie.js';
import type { CorePluginList } from './generated/corePluginList'
import type { Coverage } from '../cdp/Coverage.js';
import type { CreateNodeContext } from '../../doc/createNode';
import type { CreateNodeContext } from '../../util';
import type { CreateNodeContext } from '../doc/createNode';
import type { CreateNodeContext } from '../util';
import type { CreateNodeOptions, DocumentOptions, ParseOptions, SchemaOptions, ToJSOptions, ToStringOptions } from '../options';
import type { CreateNodeOptions, DocumentOptions, ParseOptions, SchemaOptions, ToJSOptions, ToStringOptions } from './options';
import type { Credentials } from '../api/Page.js';
import type { Credentials, GeolocationOptions, MediaFeature, PageEvents, WaitTimeoutOptions } from '../api/Page.js';
import type { Currency } from '../modules/finance';
import type { CustomEqualCreatorOptions } from './internalTypes';
import type { CustomEqualCreatorOptions } from './internalTypes.d.ts';
import type { CustomQueryHandler } from '../common/CustomQueryHandler.js';
import type { DOCUMENT_MODE, NS } from '../common/html.js';
import type { Data as UnistData, Literal as UnistLiteral, Node as UnistNode, Parent as UnistParent } from "unist";
import type { Data } from 'vfile';
import type { DataRouteMatch, DataRouteObject, IndexRouteObject, NavigateOptions, Navigator, NonIndexRouteObject, RouteMatch, RouteObject } from "./lib/context";
import type { DatabaseDefinition } from '../../..';
import type { DatabaseDefinition } from './database';
import type { DateDefinition } from '../../..';
import type { DateDefinition } from './date';
import type { DateFnsDocs } from "@date-fns/docs";
import type { DateValues } from "./types.js";
import type { Day } from "./types.js";
import type { Day, Era, Month, Quarter } from "../../types.js";
import type { DebouncedFunc } from 'lodash';
import type { DebugInfo } from '../api/Browser.js';
import type { Declaration } from 'inline-style-parser';
import type { DeclarationInfo } from "./getDeclarationInfo";
import type { DecodedSourceMap, EncodedSourceMap, Options } from './types';
import type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';
import type { DecodedVehicleInfo } from "@/types/vehicle";
import type { DedicatedWorkerRealm } from './Realm.js';
import type { DedicatedWorkerRealm, SharedWorkerRealm } from './core/Realm.js';
import type { DefaultBodyType, JsonBodyType } from './handlers/RequestHandler'
import type { DefaultColors } from './generated/colors'
import type { DefaultColors } from './types/generated/colors'
import type { DefaultError, MutationOptions, NotifyEvent } from './types'
import type { DefaultError, QueryClient } from '@tanstack/query-core'
import type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'
import type { DefaultOptions } from "./_lib/defaultOptions.js";
import type { DefaultTreeAdapterMap } from './tree-adapters/default.js';
import type { Definition } from '../definition';
import type { Definition } from 'mdast';
import type { Definition, ImportBindingDefinition } from '@typescript-eslint/scope-manager';
import type { DefinitionType } from './DefinitionType';
import type { DegeneratorNames } from './degenerator';
import type { DehydrateOptions, HydrateOptions } from './hydration'
import type { DetectOverflowOptions as DetectOverflowOptions_2 } from '@floating-ui/core';
import type { Device } from '../common/Device.js';
import type { DeviceRequestPrompt } from '../cdp/DeviceRequestPrompt.js';
import type { DeviceRequestPrompt } from './DeviceRequestPrompt.js';
import type { Diagnostic, Program, SourceFile } from 'typescript';
import type { Dialog } from './Dialog.js';
import type { Dictionary, PrimitiveWrapper, State, TypedArray } from './internalTypes.d.ts';
import type { DirectiveDefinitionNode } from '../language/ast';
import type { DirectiveLocation } from '../language/directiveLocation';
import type { Directives } from '../doc/directives';
import type { Directives } from './doc/directives';
import type { Dirent, Entry } from './types';
import type { Dirent, ErrnoException } from '../types';
import type { Dirent, FileSystemAdapter } from '@nodelib/fs.scandir';
import type { Dirent, Stats } from '../types';
import type { Dirent, Stats } from 'node
import type { Disposable } from "./lifetime";
import type { Disposable, Lifetime } from "./lifetime";
import type { Disposed, Moveable } from '../common/types.js';
import type { DoctypeToken } from './token.js';
import type { Document } from '../doc/Document';
import type { Document } from './Document';
import type { Document } from './doc/Document';
import type { Document, Element } from 'domhandler';
import type { DocumentNode } from '../language/ast';
import type { DocumentNode, ExecutableDefinitionNode } from '../language/ast';
import type { DocumentNode, GraphQLError, OperationTypeNode } from 'graphql'
import type { DocumentNode, OperationDefinitionNode } from '../language/ast';
import type { DocumentNode, OperationTypeNode } from 'graphql'
import type { DocumentOptions, ParseOptions, SchemaOptions } from '../options';
import type { DomHandlerOptions } from 'domhandler';
import type { DownloadBehavior } from '../common/DownloadBehavior.js';
import type { DownloadBehavior } from './DownloadBehavior.js';
import type { Draft } from 'immer';
import type { Duplex } from 'stream';
import type { Duration } from "./types.js";
import type { Duration, DurationUnit, LocalizedOptions } from "./types.js";
import type { Duration, Interval } from "./types.js";
import type { ESLintPluginDocs } from '../../rules';
import type { ESLintScopeVariable } from './ESLintScopeVariable';
import type { Effects } from 'micromark-util-types';
import type { EitherModule } from "./emscripten-types";
import type { Element } from 'domhandler';
import type { Element } from 'hast';
import type { Element, AnyNode, Document } from "domhandler";
import type { ElementHandle } from '../api/ElementHandle.js';
import type { ElementHandle } from './ElementHandle.js';
import type { ElementType } from "domelementtype";
import type { ElementType } from 'react';
import type { ElementType, Ref } from 'react';
import type { Emitter } from 'strict-event-emitter'
import type { EmojiType, HTTPStatusCodeType } from '../modules/internet';
import type { Emphasis } from 'mdast';
import type { EmptyResult, Emulation } from '../../../protocol/generated/webdriver-bidi.js';
import type { EmscriptenModuleLoader, QuickJSEmscriptenModule, QuickJSAsyncEmscriptenModule } from "./emscripten-types";
import type { EncodeSides } from '../types.js';
import type { Encoding } from 'micromark-util-types';
import type { EnsureArray } from '../../types.js';
import type { EnsureArray, Props } from '../../types.js';
import type { EntityStatus } from "@/components/ui/entity-card";
import type { Entry } from '../types';
import type { Entry } from './types';
import type { Entry, Errno } from '../types';
import type { Entry, Errno } from './types';
import type { EntryTypeCode, EntryTypeName } from './types.js';
import type { Environment } from './Environment.js';
import type { Era } from "../../../types.js";
import type { Errno } from '../types';
import type { ErrnoException } from '../types';
import type { ErrnoException, Stats } from '../types';
import type { ErrorCode } from '../errors';
import type { ErrorResponse } from './generated/webdriver-bidi.js';
import type { EvaluateFunc, HandleFor } from '../common/types.js';
import type { EvaluateFunc, HandleFor, InnerLazyParams } from '../common/types.js';
import type { EvaluateFuncWith, HandleFor, HandleOr } from '../common/types.js';
import type { Event } from 'micromark-util-types';
import type { EventEmitter } from '../../common/EventEmitter.js';
import type { EventEmitter } from '../common/EventEmitter.js';
import type { EventEmitter, EventType } from './EventEmitter.js';
import type { EventManager } from '../session/EventManager.js';
import type { EventManager } from './EventManager.js';
import type { EventManager } from './modules/session/EventManager.js';
import type { EventType } from '../../common/EventEmitter.js';
import type { EventType } from '../common/EventEmitter.js';
import type { EventType } from './EventEmitter.js';
import type { EventsWithWildcard } from '../common/EventEmitter.js';
import type { ExecutionArgs } from '../execution/execute';
import type { ExecutionArgs, ExecutionResult } from './execute';
import type { ExecutionContext } from './ExecutionContext.js';
import type { ExecutionResult } from './execution/execute';
import type { Expand, Props } from '../types.js';
import type { ExpectAny, ExpectArray, ExpectBigInt, ExpectBoolean, ExpectFunction, ExpectNever, ExpectNull, ExpectNullable, ExpectNumber, ExpectObject, ExpectString, ExpectSymbol, ExpectUndefined, ExpectUnknown, ExpectVoid, MismatchInfo, Scolder } from './messages';
import type { Extension as FromMarkdownExtension } from 'mdast-util-from-markdown';
import type { Extension } from 'micromark-util-types';
import type { ExtractedMap, ExtractMap } from './api/extract.js';
import type { FPArity, FPFn, FPFnInput } from "../types";
import type { Faker } from '../..';
import type { Faker } from '../../..';
import type { Faker } from '../../faker';
import type { Faker } from '../faker';
import type { Fetch, PostgrestSingleResponse, PostgrestResponseSuccess, CheckMatchingArrayTypes, MergePartialResult, IsValidResultOverride } from './types';
import type { FetchDirection, Query, QueryBehavior } from './query'
import type { FetchOptions, Query } from './query'
import type { FetchOptions, Query, QueryState } from './query'
import type { Fetcher, FormEncType, FormMethod, FutureConfig as RouterFutureConfig, GetScrollRestorationKeyFunction, History, HTMLFormMethod, HydrationState, Router as RemixRouter, V7_FormMethod, BlockerFunction } from "@remix-run/router";
import type { FieldError, FieldErrors } from 'react-hook-form';
import type { FieldErrors } from 'react-hook-form';
import type { FieldValues, ResolverOptions, ResolverResult } from 'react-hook-form';
import type { File } from "../index";
import type { FileChooser } from '../common/FileChooser.js';
import type { FileResult, FileResultCallback } from "./transformation/index.ts";
import type { FileSystemAdapter, ReaddirAsynchronousMethod, ReaddirSynchronousMethod } from './adapters/fs';
import type { FileSystemAdapter, StatAsynchronousMethod, StatSynchronousMethod } from './adapters/fs';
import type { FilterFunction } from '../settings';
import type { FilterFunction, AcceptedFilters } from '../types.js';
import type { FinanceDefinition } from '../../..';
import type { FinanceDefinition } from '../../../..';
import type { FinanceDefinition } from './finance';
import type { FlatConfig } from '../Config';
import type { FlatConfig } from './Config';
import type { FlatConfig } from '@typescript-eslint/utils/ts-eslint';
import type { FlipOptions as FlipOptions_2 } from '@floating-ui/core';
import type { FlowCollection } from '../parse/cst';
import type { FlowParents } from '../types.js';
import type { FlowScalar } from '../parse/cst';
import type { ForScope } from './ForScope';
import type { ForecastResult } from "@/utils/forecasting/valuation-forecast";
import type { FormEncType, HTMLFormMethod, RelativeRoutingType } from "@remix-run/router";
import type { FormatDistanceFn } from "../../types.js";
import type { FormatDistanceOptions } from "./formatDistance.js";
import type { FormatDistanceStrictOptions } from "./formatDistanceStrict.js";
import type { FormatLong } from "../../locale/types.js";
import type { FormatLong } from "../../types.js";
import type { FormatLongFn, FormatLongWidth } from "../types.js";
import type { FormatRelativeFn } from "../../types.js";
import type { ForwardedRef } from './types.js';
import type { Frame } from '../Frame.js';
import type { Frame } from '../api/Frame.js';
import type { Frame } from './Frame.js';
import type { Frame, FrameAddScriptTagOptions, FrameAddStyleTagOptions, FrameWaitForFunctionOptions, GoToOptions, WaitForOptions } from './Frame.js';
import type { Frame, WaitForOptions } from '../api/Frame.js';
import type { FrameManager } from './FrameManager.js';
import type { FrameManagerEvents } from './FrameManagerEvents.js';
import type { FunctionComponent, SVGProps } from 'react';
import type { FunctionExpressionNameScope } from './FunctionExpressionNameScope';
import type { FunctionNameDefinition } from './FunctionNameDefinition';
import type { FunctionScope } from './FunctionScope';
import type { FunctionTypeScope } from './FunctionTypeScope';
import type { FutureConfig as RenderFutureConfig } from "./components";
import type { FutureConfig as RouterFutureConfig } from "@remix-run/router";
import type { FutureConfig, Location, NavigateOptions, RelativeRoutingType, RouteObject, RouterProviderProps, To, DataStrategyFunction, PatchRoutesOnNavigationFunction } from "react-router";
import type { FutureConfig, Location, RouteObject } from "react-router-dom";
import type { GREATEST_LOWER_BOUND, LEAST_UPPER_BOUND, TraceMap } from './trace-mapping';
import type { GenMapping } from '@jridgewell/gen-mapping';
import type { GenericDateConstructor } from "./types.js";
import type { GenericRelationship, GenericSchema, GenericTable, Prettify } from '../types'
import type { GenericRelationship, GenericSchema, GenericTable, Prettify } from '../types';
import type { GenericSchema, SupabaseClientOptions } from './lib/types'
import type { GenericSchema, SupabaseClientOptions } from './lib/types';
import type { GeolocationOptions, MediaFeature } from '../api/Page.js';
import type { GetCookiesOptions } from './BrowsingContext.js';
import type { GetUriProtocol } from '.';
import type { GlobOptions, GlobOptionsWithFileTypesFalse, GlobOptionsWithFileTypesTrue, GlobOptionsWithFileTypesUnset } from './glob.js';
import type { GlobalScope } from './GlobalScope';
import type { GoogChannel } from '../../../protocol/chromium-bidi.js';
import type { GoogChannel } from '../protocol/chromium-bidi.js';
import type { GraphQLCompositeType, GraphQLType } from '../type/definition';
import type { GraphQLDirective } from '../type/directives';
import type { GraphQLDirective } from './directives';
import type { GraphQLError } from '../error/GraphQLError';
import type { GraphQLField } from '../type/definition';
import type { GraphQLField, GraphQLNamedType } from './definition';
import type { GraphQLFieldResolver } from '../type/definition';
import type { GraphQLFormattedError } from '../error/GraphQLError';
import type { GraphQLInputType } from '../type/definition';
import type { GraphQLNamedType } from '../type/definition';
import type { GraphQLNamedType } from './definition';
import type { GraphQLNamedType, GraphQLType } from '../type/definition';
import type { GraphQLObjectType } from '../type/definition';
import type { GraphQLSchema } from '../type/schema';
import type { GraphQLSchema } from './schema';
import type { GraphQLSchema } from './type/schema';
import type { GraphQLSchemaValidationOptions } from '../type/schema';
import type { GraphQLVariables } from '../../handlers/GraphQLHandler'
import type { HTTPRequest } from '../api/HTTPRequest.js';
import type { HTTPRequest } from './HTTPRequest.js';
import type { HTTPResponse } from '../api/HTTPResponse.js';
import type { HTTPResponse } from './HTTPResponse.js';
import type { HackerDefinition } from '../../..';
import type { HackerDefinition } from './hacker';
import type { HandleFor } from './types.js';
import type { Handler } from "gensync";
import type { Handler } from './index.js';
import type { HandlerKind } from '../../handlers/common'
import type { HandlerKind } from './common'
import type { Headers } from './fetch'
import type { Heading } from 'mdast';
import type { HelperManager } from "../HelperManager";
import type { HelperManager } from "./HelperManager";
import type { HideOptions as HideOptions_2 } from '@floating-ui/core';
import type { History, Location, Path, To } from "./history";
import type { Html } from 'mdast';
import type { HtmlExtension } from 'micromark-util-types';
import type { Htmlparser2TreeAdapterMap } from 'parse5-htmlparser2-tree-adapter';
import type { HttpProxyAgent, HttpProxyAgentOptions } from 'http-proxy-agent';
import type { HttpProxyAgentOptions } from 'http-proxy-agent';
import type { HttpRequestEventMap } from '../../glossary'
import type { HttpRequestEventMap } from '../glossary'
import type { HttpRequestEventMap, Interceptor } from '@mswjs/interceptors'
import type { HttpResponse } from './HttpResponse'
import type { HttpResponse, StrictRequest } from '..//HttpResponse'
import type { HttpResponseInit } from '../../HttpResponse'
import type { HttpsProxyAgent, HttpsProxyAgentOptions } from 'https-proxy-agent';
import type { HttpsProxyAgentOptions } from 'https-proxy-agent';
import type { ISOFormatOptions } from "./types.js";
import type { Image } from 'mdast';
import type { ImageReference } from 'mdast';
import type { ImperativePanelGroupHandle, PanelGroupOnLayout, PanelGroupProps, PanelGroupStorage } from "./PanelGroup.js";
import type { ImperativePanelHandle, PanelOnCollapse, PanelOnExpand, PanelOnResize, PanelProps } from "./Panel.js";
import type { ImplicitGlobalVariableDefinition } from './ImplicitGlobalVariableDefinition';
import type { ImplicitLibVariableOptions } from '../variable';
import type { ImportBindingDefinition } from './ImportBindingDefinition';
import type { IndexRouteObject, Navigator, NonIndexRouteObject, RouteMatch, RouteObject } from "./context";
import type { IndividualAndMetaSelectorsString, MetaSelectors, Modifiers, ModifiersString, PredefinedFormats, PredefinedFormatsString, Selectors, SelectorsString, TypeModifiers, TypeModifiersString, UnderscoreOptions, UnderscoreOptionsString } from './enums';
import type { IndividualAndMetaSelectorsString, MetaSelectorsString, Selectors, SelectorsString } from './enums';
import type { Infer } from '@typeschema/main';
import type { InferCustomEventPayload } from './customEvent'
import type { InferMessageIdsTypeFromRule, InferOptionsTypeFromRule } from '../util';
import type { Info } from 'mdast-util-to-markdown';
import type { InitialConstruct } from 'micromark-util-types';
import type { InitialEntry, LazyRouteFunction, Location, RelativeRoutingType, Router as RemixRouter, To, TrackedPromise } from "@remix-run/router";
import type { InlineCode } from 'mdast';
import type { Input } from '../../../protocol/protocol.js';
import type { InputOptions, ResolvedConfig } from "./config/index.ts";
import type { InputState } from './InputState.js';
import type { InquirerReadline } from '@inquirer/type';
import type { Inspect, Options } from './types.js';
import type { InternalOptions } from "../types.js";
import type { InternalOptions } from '../options.js';
import type { InternalOptions } from './options.js';
import type { InternalSelector } from "./types.js";
import type { InternetDefinition } from '../../..';
import type { InternetDefinition } from './internet';
import type { InterruptHandler, QuickJSRuntime } from "./runtime";
import type { Interval } from "./types.js";
import type { Interval, StepOptions } from "./types.js";
import type { IntrospectionQuery } from './getIntrospectionQuery';
import type { IsNever, IsAny, IsUnknown, ReadonlyKeys, RequiredKeys, OptionalKeys, MutuallyExtends, UnionToTuple } from './utils';
import type { IsPageTargetCallback, TargetFilterCallback } from '../api/Browser.js';
import type { IsolatedWorld } from './IsolatedWorld.js';
import type { IsolatedWorldChart } from './IsolatedWorld.js';
import type { IssueData, ZodErrorMap, ZodIssue } from "../ZodError";
import type { JSDOM } from 'jsdom'
import type { JSHandle } from '../api/JSHandle.js';
import type { JSHandle } from './JSHandle.js';
import type { JSONSchema } from '@typescript-eslint/utils';
import type { JSONSchema4 } from "json-schema";
import type { JSONSchema4 } from '../json-schema';
import type { JSXElementConstructor, ReactElement, ReactNode } from 'react';
import type { Join } from 'mdast-util-to-markdown';
import type { JsxElement } from './types.js';
import type { KeyInput } from '../common/USKeyboardLayout.js';
import type { KeyPrefix, TFunction } from './typescript/t.js';
import type { Keyboard, KeyboardTypeOptions, Mouse, Touchscreen } from './Input.js';
import type { KeyboardTypeOptions } from './Input.js';
import type { KeyboardTypeOptions, KeyPressOptions, MouseClickOptions, TouchHandle } from './Input.js';
import type { Kind } from './kinds';
import type { LaunchOptions } from './LaunchOptions.js';
import type { LayoutType, TickItem } from '../util/types';
import type { LazyArg } from './LazyArg.js';
import type { Lib } from './lib';
import type { Lib, SourceType, TSESTree } from '@typescript-eslint/types';
import type { Lib, TSESTree } from '@typescript-eslint/types';
import type { LibDefinition } from '../variable';
import type { LifeCycleEventsMap } from '~/core/sharedOptions'
import type { LifeCycleEventsMap, SharedOptions } from '~/core/sharedOptions'
import type { LineCounter } from './parse/line-counter';
import type { Link } from 'mdast';
import type { LinkReference } from 'mdast';
import type { Linter } from "eslint";
import type { Linter } from '../Linter';
import type { Linter } from './Linter';
import type { List } from 'mdast';
import type { ListItem } from 'mdast';
import type { LiteralUnion } from '../../utils/types';
import type { Locale } from "./locale/types.js";
import type { Locale } from "./types.js";
import type { LocaleDayPeriod } from "../../locale/types.js";
import type { LocaleDayPeriod, Match } from "../../../locale/types.js";
import type { LocaleDefinition } from '..';
import type { LocaleDefinition } from '../..';
import type { LocaleDefinition } from './definitions';
import type { LocaleDefinition, MetadataDefinition } from './definitions';
import type { LocaleEntry } from './definitions';
import type { LocaleProxy } from './locale-proxy';
import type { Localize } from "../../locale/types.js";
import type { Localize } from "../../types.js";
import type { LocalizedOptions } from "./types.js";
import type { LocalizedOptions, RoundingOptions } from "./types.js";
import type { LocalizedOptions, WeekOptions } from "./types.js";
import type { Location } from './ast';
import type { Location } from './token.js';
import type { Location, Path, To } from "./history";
import type { LocationDefinition } from '../../..';
import type { LocationDefinition } from './location';
import type { LocationModule as AddressModule } from './modules/location';
import type { LogHandler, MergedRollupOptions, RollupLog } from './rollup';
import type { LogLevelId } from './log';
import type { Logger } from '@open-draft/logger'
import type { LoggerFn } from '../../../utils/log.js';
import type { LoggerFn } from '../utils/log.js';
import type { LooseRuleDefinition, SharedConfigurationSettings } from './Rule';
import type { LoremDefinition } from '../../..';
import type { LoremDefinition } from './lorem';
import type { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorlds.js';
import type { ManualVehicleInfo } from "@/hooks/useManualValuation";
import type { Map } from 'vfile';
import type { MapLike } from '../../nodes/YAMLMap';
import type { MapLike } from './YAMLMap';
import type { MapLike, YAMLMap } from './YAMLMap';
import type { MapSource as MapSourceType } from './source-map-tree';
import type { MappedTypeScope } from './MappedTypeScope';
import type { MapperCdpConnection } from '../cdp/CdpConnection.js';
import type { MapperCdpConnection } from './CdpConnection.js';
import type { MapperOptions } from '../../BidiServer.js';
import type { MapperOptions } from './BidiServer.js';
import type { Match } from "../../../locale/types.js";
import type { Match } from "../../locale/types.js";
import type { Match } from "../../types.js";
import type { MatchFn, MatchValueCallback } from "../types.js";
import type { Maybe } from '../jsutils/Maybe';
import type { Maybe } from './Maybe';
import type { Maybe } from './jsutils/Maybe';
import type { MaybePromise } from '../typeUtils'
import type { MdxJsxAttribute } from '../index.js';
import type { MdxJsxExpressionAttribute } from '../index.js';
import type { MemoState } from './binary-search';
import type { Merge } from '../types/utils.js';
import type { MessageIds, Options } from '../naming-convention';
import type { MessagePort } from 'worker_threads'
import type { MetadataDefinition } from '../..';
import type { MetadataDefinition } from './metadata';
import type { Middleware as Middleware_2 } from '@floating-ui/core';
import type { MiddlewareState as MiddlewareState_2 } from '@floating-ui/core';
import type { ModuleEvalOptions, QuickJSWASMModule } from "./module";
import type { ModuleScope } from './ModuleScope';
import type { MouseEvent } from 'react';
import type { MusicDefinition } from '../../..';
import type { MusicDefinition } from './music';
import type { MutableParseSettings } from './index';
import type { MutableParseSettings } from './parseSettings';
import type { MutableRefObject } from 'react';
import type { Mutate, StateCreator, StoreApi, StoreMutatorIdentifier } from './vanilla';
import type { Mutation } from './mutation'
import type { Mutation, MutationState } from './mutation'
import type { MutationCache } from './mutationCache'
import type { MutationFilters } from './utils'
import type { MutationFilters, QueryFilters, Updater } from './utils'
import type { MutationObserver } from './mutationObserver'
import type { MutationState } from './mutation'
import type { Namespace, TypeOptions, i18n, ParseKeys } from 'i18next';
import type { NapiMinifyExtra } from "./binding";
import type { NavigateFunction } from "./lib/hooks";
import type { NavigateOptions, RouteContextObject, RouteMatch, RouteObject } from "./context";
import type { NetworkConditions } from '../cdp/NetworkManager.js';
import type { NetworkConditions } from './NetworkManager.js';
import type { NetworkManager } from './NetworkManager.js';
import type { NetworkStorage } from '../network/NetworkStorage.js';
import type { NetworkStorage } from './NetworkStorage.js';
import type { NetworkStorage } from './modules/network/NetworkStorage.js';
import type { NewDocumentScriptEvaluation } from '../api/Page.js';
import type { NewPlugin } from '../types';
import type { NewPlugin, Options, OptionsReceived } from './types';
import type { NoInfer } from './typeUtils'
import type { Node } from '../nodes/Node';
import type { Node } from './Node';
import type { Node } from './nodes/Node';
import type { Node } from 'unist';
import type { Node, NodeType, ParsedNode, Range } from '../nodes/Node';
import type { Node, ParsedNode } from './nodes/Node';
import type { Nodes } from 'hast';
import type { Nodes } from 'mdast';
import type { NopeObject } from 'nope-validator/lib/cjs/NopeObject';
import type { NormalizedExtension } from 'micromark-util-types';
import type { NormalizedInterval } from "./types.js";
import type { NormalizedSocketWriteArgs } from '../Socket/utils/normalizeSocketWriteArgs'
import type { Nullable } from '../utils';
import type { ObjMap } from '../jsutils/ObjMap';
import type { ObjMap } from './ObjMap';
import type { ObjMap, ReadOnlyObjMap } from './ObjMap';
import type { Observable, OperatorFunction } from '../../../third_party/rxjs/rxjs.js';
import type { OperatorFunction } from '../../third_party/rxjs/rxjs.js';
import type { OperatorPrecedence } from './getOperatorPrecedence';
import type { Options as MessageOptions } from 'vfile-message';
import type { Options as RemarkRehypeOptions } from 'remark-rehype';
import type { Options as SelectOptions } from 'cheerio-select';
import type { Options as ToHastOptions } from 'mdast-util-to-hast';
import type { Options as ToMarkdownExtension } from 'mdast-util-to-markdown';
import type { Options } from "../index";
import type { Options } from "./index";
import type { Options } from '../index.js';
import type { Options } from './types.js';
import type { Options } from 'hast-util-to-jsx-runtime';
import type { Options } from 'mdast-util-to-markdown';
import type { Options, SourceMapOptions, Transform } from "./Options";
import type { Options, SucraseContext, Transform } from "../index";
import type { OutgoingHttpHeaders } from 'http';
import type { OutgoingMessage } from './OutgoingMessage.js';
import type { PDFOptions } from '../common/PDFOptions.js';
import type { PacProxyAgent, PacProxyAgentOptions } from 'pac-proxy-agent';
import type { PackageJson } from "pkg-types";
import type { Page } from '../Page.js';
import type { Page } from '../api/Page.js';
import type { Page } from './Page.js';
import type { Page, QueryOptions, WaitForSelectorOptions, WaitTimeoutOptions } from '../api/Page.js';
import type { Page, VideoFormat } from '../api/Page.js';
import type { Pair } from '../nodes/Pair';
import type { Pair } from './Pair';
import type { Pair } from './nodes/Pair';
import type { PanelResizeHandleOnDragging, PanelResizeHandleProps } from "./PanelResizeHandle.js";
import type { Paragraph } from 'mdast';
import type { ParameterDefinition } from './ParameterDefinition';
import type { Parents } from 'hast';
import type { Parents } from 'mdast';
import type { ParseAst, ParseAstAsync } from './rollup';
import type { ParseContext } from 'micromark-util-types';
import type { ParseFlags, ParseResult } from "../types.js";
import type { ParseFlags, ParseResult, ParserOptions } from "../types.js";
import type { ParseFlags, ParseResult, ParserOptions } from "./types.js";
import type { ParseFlags, ParserOptions } from "./types.js";
import type { ParseOptions } from '../language/parser';
import type { ParseOptions } from '../options';
import type { ParseOptions } from 'micromark-util-types';
import type { ParseResult } from "./types.js";
import type { ParseSelector } from './parser.js'
import type { ParseSelector } from 'typed-query-selector/parser.js';
import type { ParseSelector } from 'typed-query-selector/parser.js';
import type { ParseSettings } from '../parseSettings';
import type { ParseSettings } from './index';
import type { ParseSettings } from './parseSettings';
import type { ParsedDomain, ErrorResult, errorCodes } from './index.d.ts';
import type { ParsedNode } from '../../nodes/Node';
import type { ParsedNode } from '../nodes/Node';
import type { ParsedNode } from './nodes/Node';
import type { ParsedNode, Range } from '../nodes/Node';
import type { ParsedNode, Range } from './Node';
import type { ParsedPDFOptions, PDFOptions } from './PDFOptions.js';
import type { Parser as ParserType } from './Parser';
import type { Parser } from "./Parser.js";
import type { Parser } from './Parser';
import type { ParserOptions as HTMLParser2ParserOptions } from 'htmlparser2';
import type { ParserOptions as Parse5ParserOptions } from 'parse5';
import type { ParserOptions } from './ParserOptions';
import type { ParserOptions, TSESTree } from '@typescript-eslint/types';
import type { ParserServices } from './parser-options';
import type { ParserServices, ParserServicesWithTypeInformation } from '../ts-estree';
import type { ParserServices, TSESTree } from '../ts-estree';
import type { ParserServices, TSESTreeOptions } from './parser-options';
import type { ParserServicesWithTypeInformation, TSESTree } from '@typescript-eslint/typescript-estree';
import type { ParserServicesWithTypeInformation, TSESTree } from '@typescript-eslint/utils';
import type { ParserWeakMap, ParserWeakMapESTreeToTSNode } from './parser-options';
import type { PartialDeep } from '@inquirer/type';
import type { PartialDeep } from 'type-fest'
import type { PartialKeys, VirtualizerOptions } from '@tanstack/virtual-core'
import type { Path } from '../jsutils/Path';
import type { Path } from './matchRequestUrl'
import type { Path } from './utils/matching/matchRequestUrl'
import type { Path, PathParams } from './utils/matching/matchRequestUrl'
import type { PatternVisitorCallback, PatternVisitorOptions } from './PatternVisitor';
import type { PendingThenable, Thenable } from './thenable'
import type { Permission } from '../api/Browser.js';
import type { PersonDefinition } from '../../..';
import type { PersonDefinition } from './person';
import type { PersonModule as NameModule } from './modules/person';
import type { PhoneNumberDefinition } from '../../..';
import type { PhoneNumberDefinition } from './phone_number';
import type { PhrasingParents } from '../types.js';
import type { PluggableList } from 'unified';
import type { Plugin, ParseOptions, Module, Output, Options, Script, Program, JsMinifyOptions, WasmAnalysisOptions } from "@swc/types";
import type { PluginCreator } from 'postcss'
import type { PluginObj } from "@babel/core";
import type { PluginOption } from 'vite';
import type { Point } from '../api/ElementHandle.js';
import type { Point } from '../types/geometric.js';
import type { Point } from './ElementHandle.js';
import type { Point } from 'micromark-util-types';
import type { Point } from 'unist';
import type { Point, SplinePoint } from '../types/geometric.js';
import type { PointerHitAreaMargins } from "./PanelResizeHandleRegistry.js";
import type { Position } from 'unist';
import type { PreBuiltMetadataDefinition } from '../../definitions/metadata';
import type { PreBuiltMetadataDefinitionForCountry } from '../../definitions/metadata';
import type { PreferOptionalChainMessageIds, PreferOptionalChainOptions } from './PreferOptionalChainOptions';
import type { PreferOptionalChainMessageIds, PreferOptionalChainOptions } from './prefer-optional-chain-utils/PreferOptionalChainOptions';
import type { PreferOptionalChainOptions } from './PreferOptionalChainOptions';
import type { PreloadScript } from './PreloadScript.js';
import type { PreloadScriptStorage } from '../script/PreloadScriptStorage.js';
import type { PreloadScriptStorage } from './PreloadScriptStorage.js';
import type { PreloadScriptStorage } from './modules/script/PreloadScriptStorage.js';
import type { PresenceOpts, PresenceOnJoinCallback, PresenceOnLeaveCallback } from 'phoenix';
import type { Prettify } from '@inquirer/type';
import type { Prettify, PartialDeep } from '@inquirer/type';
import type { Processor as ProcessorType } from './Processor';
import type { Processor } from 'unified';
import type { Program } from 'typescript';
import type { ProjectServiceOptions } from '../parser-options';
import type { ProjectServiceSettings } from '../create-program/createProjectService';
import type { ProjectServiceSettings } from './create-program/createProjectService';
import type { PromiseOrValue } from '../jsutils/PromiseOrValue';
import type { PromiseOrValue } from './PromiseOrValue';
import type { Props as XAxisProps } from '../cartesian/XAxis';
import type { Props as YAxisProps } from '../cartesian/YAxis';
import type { Props } from '../../types.js';
import type { Props } from '../types.js';
import type { Props, ReactTag } from '../../types.js';
import type { Protocol } from 'devtools-protocol';
import type { ProtocolError } from '../common/Errors.js';
import type { ProtocolMapping } from 'devtools-protocol/types/protocol-mapping.js';
import type { ProtocolMapping } from 'devtools-protocol/types/protocol-mapping.js';
import type { ProtocolType } from '../common/ConnectOptions.js';
import type { PseudoSelector } from "css-what";
import type { PuppeteerLifeCycleEvent } from '../cdp/LifecycleWatcher.js';
import type { PuppeteerNode } from './PuppeteerNode.js';
import type { Quarter, Era, Day, Month } from "../../types.js";
import type { Query } from './query'
import type { Query, QueryState } from './query'
import type { QueryBehavior } from './query'
import type { QueryCache } from './queryCache'
import type { QueryClient } from './queryClient'
import type { QueryClient } from '@tanstack/query-core'
import type { QueryClient, QueryFilters } from '@tanstack/query-core'
import type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'
import type { QueryFilters } from './utils'
import type { QueryFilters, QueryTypeFilter, SkipToken } from './utils'
import type { QueryFunction, QueryFunctionContext, QueryKey } from './types'
import type { QueryHandler } from './QueryHandler.js';
import type { QueryObserver } from './queryObserver'
import type { QueryOptions, ScreenshotOptions, WaitForSelectorOptions } from './Page.js';
import type { QueryState } from './query'
import type { QuickJSAsyncContext } from "./context-asyncify";
import type { QuickJSAsyncContext, AsyncFunctionImplementation } from "./context-asyncify";
import type { QuickJSAsyncRuntime } from "./runtime-asyncify";
import type { QuickJSAsyncWASMModule } from "./module-asyncify";
import type { QuickJSContext } from "./context";
import type { QuickJSFFI as ReleaseSyncFFI } from "./generated/ffi.WASM_RELEASE_SYNC";
import type { QuickJSFFI, QuickJSAsyncFFI } from "./variants";
import type { QuickJSHandle } from "./types";
import type { QuickJSRuntime } from "./runtime";
import type { QuickJSRuntime, InterruptHandler } from "./runtime";
import type { QuickJSWASMModule } from "./module";
import type { QuickJSWASMModule } from '@tootallnate/quickjs-emscripten';
import type { Randomizer } from './randomizer';
import type { Range } from '../nodes/Node';
import type { Range } from './Node';
import type { ReactElement } from 'react';
import type { ReactNode } from 'react';
import type { ReadOnlyObjMap, ReadOnlyObjMapLike } from './ObjMap';
import type { Readable } from 'stream';
import type { ReadableStreamAsyncIterator, ReadableStreamIteratorOptions } from './ponyfill';
import type { Realm as BidiRealmCore, DedicatedWorkerRealm, SharedWorkerRealm } from './core/Realm.js';
import type { Realm } from '../api/Realm.js';
import type { Realm } from '../script/Realm.js';
import type { Realm } from './Realm.js';
import type { RealmStorage } from '../script/RealmStorage.js';
import type { RealmStorage } from './RealmStorage.js';
import type { RealmStorage } from './modules/script/RealmStorage.js';
import type { RealtimeChannelOptions } from './RealtimeChannel'
import type { RealtimeChannelOptions } from './RealtimeChannel';
import type { RealtimePresenceJoinPayload, RealtimePresenceLeavePayload, RealtimePresenceState } from './RealtimePresence';
import type { RecordKey } from './unique';
import type { Reference } from '../referencer/Reference';
import type { ReferenceImplicitGlobal } from '../referencer/Reference';
import type { ReferenceImplicitGlobal } from './Reference';
import type { Referencer } from './Referencer';
import type { ReferencerOptions } from './referencer';
import type { RenderResult } from '@testing-library/react';
import type { Replacer } from './Document';
import type { Replacer } from './doc/Document';
import type { ReportDescriptor, RuleContext } from '@typescript-eslint/utils/ts-eslint';
import type { ReportDescriptorMessageData, RuleCreateFunction, RuleModule, SharedConfigurationSettings } from './Rule';
import type { Request } from './Request.js';
import type { Request } from './core/Request.js';
import type { RequestController } from './RequestController'
import type { RequestHandler } from '../../handlers/RequestHandler'
import type { RequestHandler } from '../handlers/RequestHandler'
import type { RequestHandler } from './handlers/RequestHandler'
import type { RequestHandler } from '~/core/handlers/RequestHandler'
import type { RequestInfo, Response, Request } from './fetch'
import type { RequiredDeep } from 'type-fest'
import type { RequiredDeep } from '~/core/typeUtils'
import type { Resolver } from './types';
import type { Resolver } from 'micromark-util-types';
import type { Resolver, VestErrors } from './types';
import type { ResolverObjectKey, ResolverCache, ResolverProxy, DescriptorDefaults, Descriptor, ContextProxy } from './helpers.config.types.js';
import type { ResponseResolutionContext } from '../utils/executeHandlers'
import type { Result } from '../../../utils/result.js';
import type { Result } from '../utils/result.js';
import type { Result } from './result.js';
import type { RetryDelayValue, RetryValue } from './retryer'
import type { Retryer } from './retryer'
import type { ReverseSegment, SourceMapSegment } from './sourcemap-segment';
import type { Reviver } from './doc/applyReviver';
import type { RollupLog } from './rollup';
import type { Root as HastRoot } from 'hast';
import type { Root as MdastRoot } from 'mdast';
import type { Root } from 'mdast';
import type { RootTransformerResult } from "./transformers/RootTransformer";
import type { RoundingMethod } from "../types.js";
import type { RoundingOptions } from "./types.js";
import type { Router as RemixRouter, StaticHandlerContext, CreateStaticHandlerOptions as RouterCreateStaticHandlerOptions, FutureConfig as RouterFutureConfig } from "@remix-run/router";
import type { RuleContext } from '@typescript-eslint/utils/ts-eslint';
import type { RuleContext, RuleListener, RuleMetaData, RuleMetaDataDocs, RuleModule } from '../ts-eslint/Rule';
import type { RuleCreateFunction, RuleModule } from '../ts-eslint';
import type { RuleMetaData } from '../Rule';
import type { SDLValidationContext } from '../ValidationContext';
import type { SDLValidationRule, ValidationRule } from './ValidationContext';
import type { SafeConfig } from 'mdast-util-to-markdown';
import type { Scalar } from '../../nodes/Scalar';
import type { Scalar } from '../nodes/Scalar';
import type { Scalar } from './Scalar';
import type { Scalar } from './nodes/Scalar';
import type { ScalarTag } from '../types';
import type { Schema as SchemaType } from 'property-information';
import type { Schema } from '../../schema/Schema';
import type { Schema } from '../Schema';
import type { Schema } from '../schema/Schema';
import type { Schema } from './Schema';
import type { Schema } from './schema/Schema';
import type { Schema } from '@typeschema/main';
import type { Schema } from 'property-information';
import type { SchemaOptions } from '../options';
import type { SchemaOptions, ToStringOptions } from '../options';
import type { ScienceDefinition } from '../../..';
import type { ScienceDefinition } from './science';
import type { Scope } from "./parser/tokenizer/state";
import type { Scope } from "./tokenizer/state";
import type { Scope } from '../scope';
import type { Scope } from './Scope';
import type { Scope } from './scope';
import type { Scope } from '@radix-ui/react-context';
import type { ScopeManager } from '../ScopeManager';
import type { ScopeManager } from '@typescript-eslint/scope-manager';
import type { ScopeVariable } from '@typescript-eslint/scope-manager';
import type { ScreenRecorder } from '../node/ScreenRecorder.js';
import type { ScreenRecorder } from './node/ScreenRecorder.js';
import type { Script } from '../../../protocol/protocol.js';
import type { ScrollLockStep } from './overflow-store.js';
import type { SectionedSourceMapInput } from './types';
import type { SecurityDetails } from '../common/SecurityDetails.js';
import type { Selector } from "css-what";
import type { Selector } from './naming-convention-utils';
import type { Selector, PseudoSelector } from "css-what";
import type { SelectorType, BasicAcceptedElems } from './types.js';
import type { SelectorsString } from './enums';
import type { SemanticOrSyntacticError } from './semantic-or-syntactic-errors';
import type { SerializedCookie } from './constants';
import type { ServiceWorkerIncomingEventsMap } from '../../glossary'
import type { ServiceWorkerIncomingRequest } from '../setupWorker/glossary'
import type { ServiceWorkerMessage } from './utils/createMessageChannel'
import type { Session } from './Session.js';
import type { Session } from 'chromium-bidi/lib/cjs/protocol/protocol.js';
import type { SetupServer } from './glossary'
import type { SetupServerCommon } from './glossary'
import type { SetupWorkerInternalContext } from '../setupWorker/glossary'
import type { ShapeErrors } from 'nope-validator/lib/cjs/types';
import type { ShiftOptions as ShiftOptions_2 } from '@floating-ui/core';
import type { SimpleFaker } from '../simple-faker';
import type { SimpleTransport } from './SimpleTransport.js';
import type { SizeOptions as SizeOptions_2 } from '@floating-ui/core';
import type { SnifferOptions } from "./sniffer.js";
import type { SocksProxyAgent, SocksProxyAgentOptions } from 'socks-proxy-agent';
import type { SocksProxyAgentOptions } from 'socks-proxy-agent';
import type { Source } from '../language/source';
import type { Source } from './language/source';
import type { Source } from './source';
import type { SourceCode } from './SourceCode';
import type { SourceCode } from '@typescript-eslint/utils/ts-eslint';
import type { SourceFile } from 'typescript';
import type { SourceLocation } from '../language/location';
import type { SourceLocation } from './location';
import type { SourceMapInput } from '@jridgewell/trace-mapping';
import type { SourceMapInput, SourceMapLoader } from './types';
import type { SourceMapInput, SourceMapLoader, Options } from './types';
import type { SourceMapOptions } from "./index";
import type { SourceMapSegment } from './sourcemap-segment';
import type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';
import type { SourceMapV3, DecodedSourceMap, EncodedSourceMap, InvalidOriginalMapping, OriginalMapping, InvalidGeneratedMapping, GeneratedMapping, SourceMapInput, Needle, SourceNeedle, SourceMap, EachMapping } from './types';
import type { SourceToken } from '../parse/cst';
import type { SourceToken, Token } from '../parse/cst';
import type { SourceType, TSESTree } from '@typescript-eslint/types';
import type { Space } from 'property-information';
import type { SplinePoint } from '../types/geometric.js';
import type { StandardSchemaV1 } from "./standard-schema";
import type { State } from '../types.js';
import type { State } from './types.js';
import type { State } from 'mdast-util-to-markdown';
import type { State } from 'micromark-util-types';
import type { StateCreator, StoreApi, StoreMutatorIdentifier } from '../vanilla';
import type { StateCreator, StoreMutatorIdentifier } from '../vanilla';
import type { Stats } from '../types';
import type { Stats } from './types';
import type { Storage } from '../../../protocol/protocol.js';
import type { Store } from '../utils/store.js';
import type { StoreApi } from 'zustand';
import type { StrictEqualUsingBranding } from './branding';
import type { StrictEqualUsingTSInternalIdenticalToOperator, IsNever, UnionToIntersection, UnionToTuple } from './utils';
import type { StrictlyParseSelector } from './parser.js'
import type { StringReader, StringWriter } from './strings';
import type { StringifyContext } from '../../stringify/stringify';
import type { StringifyContext } from '../stringify/stringify';
import type { StringifyContext } from './stringify';
import type { Strong } from 'mdast';
import type { SubmitOptions, ParamKeyValuePair, URLSearchParamsInit, SubmitTarget, FetcherSubmitOptions } from "./dom";
import type { Subscribable } from './subscribable'
import type { SuccessOrFail, VmFunctionImplementation } from "./vm-interface";
import type { SupportedBrowser } from '../common/SupportedBrowser.js';
import type { SupportedBrowser } from './SupportedBrowser.js';
import type { SupportedWebDriverCapabilities } from '../common/ConnectOptions.js';
import type { SwitchScope } from './SwitchScope';
import type { SyntaxKind } from 'typescript';
import type { SystemDefinition } from '../../..';
import type { SystemDefinition } from './system';
import type { TAG_ID } from './html.js';
import type { TRBL, SplinePoint, RoundedRect, TRBLCorners } from '../types/geometric.js';
import type { TRBL, TRBLCorners } from '../types/geometric.js';
import type { TSESLint } from '@typescript-eslint/utils';
import type { TSESLint, TSESTree } from '@typescript-eslint/utils';
import type { TSESTree } from '../../ts-estree';
import type { TSESTree } from '../ts-estree';
import type { TSESTree } from './ts-estree';
import type { TSESTree } from '@typescript-eslint/types';
import type { TSESTree } from '@typescript-eslint/utils';
import type { TSESTree, TSESTreeToTSNode, TSNode, TSToken } from './ts-estree';
import type { TSESTree, TSNode } from './ts-estree';
import type { TSESTreeOptions } from '../parser-options';
import type { TSEnumMemberDefinition } from './TSEnumMemberDefinition';
import type { TSEnumNameDefinition } from './TSEnumNameDefinition';
import type { TSEnumScope } from './TSEnumScope';
import type { TSError } from './node-utils';
import type { TSModuleNameDefinition } from './TSModuleNameDefinition';
import type { TSModuleScope } from './TSModuleScope';
import type { TSNode } from './ts-nodes';
import type { TagToken } from '../common/token.js';
import type { TagToken, Attribute } from './token.js';
import type { Tags } from './schema/tags';
import type { Target } from '../api/Target.js';
import type { Target } from './Target.js';
import type { TargetFilterCallback } from '../api/Browser.js';
import type { TargetManager } from './TargetManager.js';
import type { TargetManagerEvents } from './TargetManageEvents.js';
import type { Targets } from "@babel/helper-compilation-targets";
import type { TestStatus, Metadata, PlaywrightTestOptions, PlaywrightWorkerOptions, ReporterDescription, FullConfig, FullProject, Location } from './test';
import type { Text } from 'mdast';
import type { ThematicBreak } from 'mdast';
import type { Theme, Status } from './theme.ts';
import type { ThirdPartyModule } from 'i18next';
import type { TimeoutError } from '../common/Errors.js';
import type { TimeoutSettings } from '../common/TimeoutSettings.js';
import type { ToJSContext } from '../../nodes/toJS';
import type { ToJSContext } from './toJS';
import type { ToJSOptions } from '../options';
import type { ToStringOptions } from '../options';
import type { Token } from "../parser/tokenizer";
import type { Token } from "./index";
import type { Token } from "./parser/tokenizer";
import type { Token } from "./tokenizer/index";
import type { Token } from '../parse/cst';
import type { Token } from './cst';
import type { Token } from 'mdast-util-from-markdown';
import type { TokenDimension } from '@csstools/css-tokenizer';
import type { TokenFunction } from '@csstools/css-tokenizer';
import type { TokenKind } from './tokenKind';
import type { TokenNumber } from '@csstools/css-tokenizer';
import type { TokenPercentage } from '@csstools/css-tokenizer';
import type { TokenType } from 'micromark-util-types';
import type { TokenizeContext } from 'micromark-util-types';
import type { TraceMap } from '@jridgewell/trace-mapping';
import type { Tracing } from '../cdp/Tracing.js';
import type { TrackFields } from '../types.js';
import type { Transport } from '../utils/transport.js';
import type { Transport } from './transport.js';
import type { TreeAdapter, TreeAdapterTypeMap } from '../tree-adapters/interface.js';
import type { TreeAdapter, TreeAdapterTypeMap } from './interface.js';
import type { TreeAdapterTypeMap } from './tree-adapters/interface.js';
import type { Type, TypeChecker } from 'typescript';
import type { TypeCheck } from '@sinclair/typebox/compiler';
import type { TypeDefinition } from './TypeDefinition';
import type { TypeOf, ZodType } from ".";
import type { TypeOrValueSpecifier } from '../util';
import type { TypeOrValueSpecifier } from './TypeOrValueSpecifier';
import type { TypeScope } from './TypeScope';
import type { TypedChartComponent } from './types.js';
import type { URL } from 'url';
import type { UnhandledRequestStrategy } from './utils/request/onUnhandledRequest'
import type { Unsafe } from 'mdast-util-to-markdown';
import type { UseBaseQueryOptions } from './types'
import type { UseFloatingOptions as UseFloatingOptions_2 } from '@floating-ui/react-dom';
import type { UseFloatingReturn as UseFloatingReturn_2 } from '@floating-ui/react-dom';
import type { UseInfiniteQueryOptions } from './types'
import type { UseQueryOptions } from './types'
import type { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types'
import type { UserContext } from './UserContext.js';
import type { UserContextConfig } from '../browser/UserContextConfig.js';
import type { UserContextStorage } from '../browser/UserContextStorage';
import type { UserContextStorage } from '../browser/UserContextStorage.js';
import type { UserContextStorage } from './UserContextStorage.js';
import type { UserContextStorage } from './modules/browser/UserContextStorage.js';
import type { UserPrompt } from './core/UserPrompt.js';
import type { VFile } from 'vfile';
import type { ValidOperand } from './gatherLogicalOperands';
import type { ValidatedOptions } from "./validation/options.ts";
import type { ValidationContext } from '../../ValidationContext';
import type { ValidationContext } from '../ValidationContext';
import type { ValidationError } from 'computed-types';
import type { ValidationError } from 'joi';
import type { ValidationIssue } from '@typeschema/core';
import type { Valuation } from "@/types/valuation-history";
import type { ValuationResult } from "@/types/valuation";
import type { Value } from 'micromark-util-types';
import type { Value } from 'vfile';
import type { ValueNode } from '../language/ast';
import type { ValueOf } from './types';
import type { Variable } from '../variable';
import type { Variable } from './Variable';
import type { Variable } from './variable';
import type { VariableDefinition } from './VariableDefinition';
import type { VehicleDefinition } from '../../..';
import type { VehicleDefinition } from './vehicle';
import type { Viewport } from '../common/Viewport.js';
import type { Viewport } from './Viewport.js';
import type { VisitorKeys } from '@typescript-eslint/visitor-keys';
import type { VisitorOptions } from './Visitor';
import type { VisitorOptions } from './VisitorBase';
import type { VpicVehicleData } from "@/types/vpic";
import type { WaitForOptions } from '../api/Frame.js';
import type { WaitForSelectorOptions } from '../api/Page.js';
import type { WaitTimeoutOptions } from '../api/Page.js';
import type { WebSocket as WSWebSocket } from 'ws'
import type { WebSocket as WSWebSocket } from 'ws';
import type { WebSocketClassTransport } from './WebSocketClassTransport'
import type { WebSocketClientConnectionProtocol } from '@mswjs/interceptors/WebSocket'
import type { WebSocketConnectionData } from '@mswjs/interceptors/WebSocket'
import type { WebSocketConnectionData } from '@mswjs/interceptors/lib/browser/interceptors/WebSocket'
import type { WebSocketData } from './WebSocketTransport'
import type { WebSocketData } from '@mswjs/interceptors/lib/browser/interceptors/WebSocket'
import type { WebSocketData, WebSocketTransport } from './WebSocketTransport'
import type { WebSocketEventListener } from './WebSocketOverride'
import type { WebSocketHandler } from '../../handlers/WebSocketHandler'
import type { WebSocketHandler } from './handlers/WebSocketHandler'
import type { WebSocketHandler } from '~/core/handlers/WebSocketHandler'
import type { WebWorker } from './WebWorker.js';
import type { WindowRealm } from './core/Realm.js';
import type { WithScope } from './WithScope';
import type { WordDefinition } from '../../..';
import type { WordDefinition } from './word';
import type { YAMLError, YAMLWarning } from '../errors';
import type { YAMLMap } from '../../nodes/YAMLMap';
import type { YAMLMap } from '../nodes/YAMLMap';
import type { YAMLMap } from './YAMLMap';
import type { YAMLMap } from './nodes/YAMLMap';
import type { YAMLSeq } from '../nodes/YAMLSeq';
import type { YAMLSeq } from './YAMLSeq';
import type { YAMLSeq } from './nodes/YAMLSeq';
import type { YearParserValue } from "./YearParser.js";
import type { ZodArray, ZodNullable, ZodObject, ZodOptional, ZodRawShape, ZodTuple, ZodTupleItems, ZodTypeAny } from "../index";
import type { ZodErrorMap } from "./ZodError";
import type { ZodParsedType } from "./util";
import type { i18n, ParseKeys, Namespace, TypeOptions, TOptions, TFunction } from 'i18next';
import type { prop } from './attributes.js';
import type { z } from "zod";
import type {Accessibility} from '../cdp/Accessibility.js';
import type {AddPreloadScriptOptions} from './Browser.js';
import type {AllUnionFields} from 'type-fest';
import type {And} from './and';
import type {And} from 'type-fest';
import type {ApplyDefaultOptions, AsciiPunctuation, StartsWith} from './internal';
import type {ApplyDefaultOptions, BuiltIns, LiteralKeyOf} from './internal';
import type {ApplyDefaultOptions, BuiltIns} from './internal';
import type {ApplyDefaultOptions, IfArrayReadonly} from './internal';
import type {ApplyDefaultOptions, IsPlainObject} from './internal';
import type {ApplyDefaultOptions, NonRecursiveType} from './internal';
import type {ApplyDefaultOptions, Not} from './internal';
import type {ApplyDefaultOptions, StringDigit, ToString} from './internal';
import type {ApplyDefaultOptions} from './internal';
import type {Arguments} from 'yargs';
import type {ArrayElement, ObjectValue} from './internal';
import type {ArrayEntry, MapEntry, ObjectEntry, SetEntry} from './entry';
import type {ArrayIndices, ArrayValues} from 'type-fest';
import type {ArraySlice} from './array-slice';
import type {ArraySlice} from 'type-fest';
import type {ArraySplice} from './array-splice';
import type {ArrayTail} from './array-tail';
import type {ArrayTail} from 'type-fest';
import type {ArrayValues, ArrayIndices} from 'type-fest';
import type {Arrayable} from 'type-fest';
import type {AsyncReturnType} from 'type-fest';
import type {Asyncify} from 'type-fest';
import type {Awaitable, AwaitableIterable} from '../common/types.js';
import type {Awaitable, AwaitableIterable} from './types.js';
import type {Awaitable, FlattenHandle} from '../common/types.js';
import type {Awaitable, HandleFor, NodeFor} from '../../common/types.js';
import type {AwaitableIterable, HandleFor} from './types.js';
import type {AwaitableIterable} from '../common/types.js';
import type {Awaitable} from '../common/types.js';
import type {BidiBrowserContext} from './BrowserContext.js';
import type {BidiBrowser} from './Browser.js';
import type {BidiCdpSession} from './CDPSession.js';
import type {BidiConnection} from '../Connection.js';
import type {BidiConnection} from './Connection.js';
import type {BidiElementHandle} from './ElementHandle.js';
import type {BidiEvents, Commands, Connection} from './Connection.js';
import type {BidiFrameRealm} from './Realm.js';
import type {BidiFrame} from './Frame.js';
import type {BidiHTTPRequest} from './HTTPRequest.js';
import type {BidiHTTPResponse} from './HTTPResponse.js';
import type {BidiJSHandle} from './JSHandle.js';
import type {BidiPage} from './Page.js';
import type {BidiRealm} from './Realm.js';
import type {BidiWebWorker} from './WebWorker.js';
import type {BindingPayload, EvaluateFunc, HandleFor} from '../common/types.js';
import type {BindingPayload, HandleFor} from '../common/types.js';
import type {Binding} from './Binding.js';
import type {BoundingBox} from '../api/ElementHandle.js';
import type {Browser as BrowserCore} from './core/Browser.js';
import type {Browser, BrowserCloseCallback} from '../api/Browser.js';
import type {Browser, Permission, WaitForTargetOptions} from './Browser.js';
import type {BrowserCloseCallback} from '../api/Browser.js';
import type {BrowserContextEvents} from '../api/BrowserContext.js';
import type {BrowserContext} from '../api/BrowserContext.js';
import type {BrowserContext} from './BrowserContext.js';
import type {BrowserEvents} from '../api/Browser.js';
import type {BrowserLauncher} from './BrowserLauncher.js';
import type {BrowserPlatform} from '@puppeteer/browsers';
import type {Browser} from '../api/Browser.js';
import type {Browser} from './Browser.js';
import type {BrowsingContext} from './BrowsingContext.js';
import type {BrowsingContext} from './core/BrowsingContext.js';
import type {BuildObject, BuildTuple, NonRecursiveType, ObjectValue} from './internal';
import type {BuildTuple, StaticPartOfArray, VariablePartOfArray} from './internal';
import type {BuildTuple} from './internal';
import type {BuildTuple} from './tuple';
import type {BuiltIns, HasMultipleCallSignatures} from './internal';
import type {BuiltIns} from './internal';
import type {CDPEvents, CDPSession} from '../api/CDPSession.js';
import type {CDPSession} from '../api/CDPSession.js';
import type {CDPSession} from '../puppeteer-core.js';
import type {CDPSession} from './CDPSession.js';
import type {CamelCase, CamelCaseOptions, DefaultCamelCaseOptions} from './camel-case';
import type {CamelCaseOptions, DefaultCamelCaseOptions} from './camel-case';
import type {CamelCasedPropertiesDeep} from 'type-fest';
import type {CamelCasedProperties} from 'type-fest';
import type {CamelCase} from 'type-fest';
import type {CdpBrowser} from './Browser.js';
import type {CdpCDPSession} from './CdpSession.js';
import type {CdpElementHandle} from './ElementHandle.js';
import type {CdpFrame} from './Frame.js';
import type {CdpHTTPRequest} from './HTTPRequest.js';
import type {CdpHTTPResponse} from './HTTPResponse.js';
import type {CdpPage} from './Page.js';
import type {CdpPreloadScript} from './CdpPreloadScript.js';
import type {CdpTarget} from './Target.js';
import type {CdpWebWorker} from './WebWorker.js';
import type {ChildProcessByStdio} from 'node
import type {ChildProcessWithoutNullStreams} from 'node
import type {ChildProcess} from 'node
import type {ChromeReleaseChannel, LaunchOptions} from './LaunchOptions.js';
import type {ClickOptions, ElementHandle} from '../api/ElementHandle.js';
import type {CommandOptions} from '../api/CDPSession.js';
import type {CompareKeys} from 'pretty-format';
import type {CompileResults} from './lib/index.js'
import type {ConditionalExcept} from './conditional-except';
import type {ConditionalExcept} from 'type-fest';
import type {ConditionalKeys} from './conditional-keys';
import type {ConditionalKeys} from 'type-fest';
import type {ConditionalPickDeep} from 'type-fest';
import type {ConditionalPick} from 'type-fest';
import type {ConditionalSimplifyDeep} from './conditional-simplify';
import type {Configuration} from '../common/Configuration.js';
import type {Config} from '@jest/types';
import type {ConnectOptions} from '../common/ConnectOptions.js';
import type {ConnectOptions} from './ConnectOptions.js';
import type {Connection as CdpConnection} from '../cdp/Connection.js';
import type {ConnectionTransport} from '../common/ConnectionTransport.js';
import type {ConnectionTransport} from './ConnectionTransport.js';
import type {Connection} from '../cdp/Connection.js';
import type {Connection} from './Connection.js';
import type {Connection} from './core/Connection.js';
import type {ConsoleMessageType} from '../common/ConsoleMessage.js';
import type {ConsoleMessage} from '../common/ConsoleMessage.js';
import type {Cookie, CookieData} from '../common/Cookie.js';
import type {CoverageMapData} from 'istanbul-lib-coverage';
import type {Coverage} from '../cdp/Coverage.js';
import type {Credentials} from '../api/Page.js';
import type {CustomQueryHandler} from '../common/CustomQueryHandler.js';
import type {Data as HastData, ElementContent, Parent as HastParent} from 'hast'
import type {Data as HastData, Literal as HastLiteral} from 'hast'
import type {Data as MdastData, Literal as MdastLiteral} from 'mdast'
import type {Data, ElementContent, Literal, Properties} from 'hast'
import type {Data, Node} from 'unist'
import type {DebugInfo} from '../api/Browser.js';
import type {DedicatedWorkerRealm, SharedWorkerRealm} from './core/Realm.js';
import type {DedicatedWorkerRealm} from './Realm.js';
import type {DefaultDelimiterCaseOptions, DelimiterCase} from './delimiter-case';
import type {DefaultDelimiterCaseOptions} from './delimiter-case';
import type {DefaultWordsOptions, Words, WordsOptions} from './words';
import type {DelimiterCasedPropertiesDeep} from './delimiter-cased-properties-deep';
import type {DelimiterCasedPropertiesDeep} from 'type-fest';
import type {DelimiterCasedProperties} from './delimiter-cased-properties';
import type {DelimiterCasedProperties} from 'type-fest';
import type {DelimiterCase} from 'type-fest';
import type {DeviceRequestPrompt} from '../cdp/DeviceRequestPrompt.js';
import type {DeviceRequestPrompt} from './DeviceRequestPrompt.js';
import type {Device} from '../common/Device.js';
import type {Dialog} from './Dialog.js';
import type {Disposed, Moveable} from '../common/types.js';
import type {DownloadBehavior} from '../common/DownloadBehavior.js';
import type {DownloadBehavior} from './DownloadBehavior.js';
import type {Element, Nodes, Parents} from 'hast'
import type {ElementHandle} from '../api/ElementHandle.js';
import type {ElementHandle} from './ElementHandle.js';
import type {EmptyObject} from './empty-object';
import type {EmptyObject} from 'type-fest';
import type {EnforceOptional} from './enforce-optional';
import type {EnforceOptional} from 'type-fest';
import type {Entries} from 'type-fest';
import type {Entry} from 'type-fest';
import type {Environment} from './Environment.js';
import type {EqualsFunction} from '@jest/expect-utils';
import type {EvaluateFunc, HandleFor} from '../common/types.js';
import type {EvaluateFuncWith, HandleFor, HandleOr} from '../common/types.js';
import type {EventEmitter, EventType} from './EventEmitter.js';
import type {EventEmitter} from '../../common/EventEmitter.js';
import type {EventEmitter} from '../common/EventEmitter.js';
import type {EventType} from '../../common/EventEmitter.js';
import type {EventType} from '../common/EventEmitter.js';
import type {EventType} from './EventEmitter.js';
import type {EventsWithWildcard} from '../common/EventEmitter.js';
import type {ExactKey, IsArrayReadonly, NonRecursiveType, SetArrayAccess, ToString} from './internal';
import type {Except} from './except';
import type {Except} from 'type-fest';
import type {ExecutionContext} from './ExecutionContext.js';
import type {Expression, Program} from 'estree'
import type {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'
import type {Extension as MicromarkExtension} from 'micromark-util-types'
import type {FileChooser} from '../common/FileChooser.js';
import type {FilterDefinedKeys, FilterOptionalKeys} from './keys';
import type {FindGlobalInstanceType} from './find-global-type';
import type {FindGlobalInstanceType} from 'type-fest';
import type {FindGlobalType} from 'type-fest';
import type {Finite} from 'type-fest';
import type {FixedLengthArray} from 'type-fest';
import type {Float} from 'type-fest';
import type {ForegroundColor} from 'chalk';
import type {Frame, WaitForOptions} from '../api/Frame.js';
import type {FrameManagerEvents} from './FrameManagerEvents.js';
import type {FrameManager} from './FrameManager.js';
import type {Frame} from '../Frame.js';
import type {Frame} from '../api/Frame.js';
import type {Frame} from './Frame.js';
import type {GeolocationOptions, MediaFeature} from '../api/Page.js';
import type {GetCookiesOptions} from './BrowsingContext.js';
import type {Get} from 'type-fest';
import type {GlobalThis} from 'type-fest';
import type {Global} from '@jest/types';
import type {GreaterThanOrEqual} from './greater-than-or-equal';
import type {GreaterThanOrEqual} from 'type-fest';
import type {GreaterThan} from '../greater-than';
import type {GreaterThan} from './greater-than';
import type {GreaterThan} from 'type-fest';
import type {HTTPRequest} from '../api/HTTPRequest.js';
import type {HTTPRequest} from './HTTPRequest.js';
import type {HTTPResponse} from '../api/HTTPResponse.js';
import type {HTTPResponse} from './HTTPResponse.js';
import type {HandleFor} from './types.js';
import type {Handler} from '../common/EventEmitter.js';
import type {HasOptionalKeys, OptionalKeysOf} from 'type-fest';
import type {HasReadonlyKeys, ReadonlyKeysOf} from 'type-fest';
import type {HasRequiredKeys} from './has-required-keys';
import type {HasRequiredKeys} from 'type-fest';
import type {HasWritableKeys, WritableKeysOf} from 'type-fest';
import type {HomomorphicPick, IfArrayReadonly} from './internal';
import type {HomomorphicPick} from './internal';
import type {IfAny} from '../if-any';
import type {IfAny} from './if-any';
import type {IfAny} from 'type-fest';
import type {IfEmptyObject} from './if-empty-object';
import type {IfEmptyObject} from 'type-fest';
import type {IfNever} from '../if-never';
import type {IfNever} from './if-never';
import type {IfNever} from 'type-fest';
import type {IfNotAnyOrNever, RequireNone} from './internal';
import type {IfNotAnyOrNever} from './internal';
import type {IfNull} from 'type-fest';
import type {IfUnknown} from './if-unknown';
import type {IfUnknown} from 'type-fest';
import type {Includes} from 'type-fest';
import type {IntClosedRange} from 'type-fest';
import type {IntRange} from './int-range';
import type {IntRange} from 'type-fest';
import type {Integer} from 'type-fest';
import type {InvariantOf} from 'type-fest';
import type {IsAny} from '../is-any';
import type {IsAny} from './is-any';
import type {IsAny} from 'type-fest';
import type {IsBooleanLiteral} from 'type-fest';
import type {IsEmptyObject} from './empty-object';
import type {IsEmptyObject} from 'type-fest';
import type {IsEqual} from '../is-equal';
import type {IsEqual} from './is-equal';
import type {IsEqual} from 'type-fest';
import type {IsFloat, PositiveInfinity} from "type-fest";
import type {IsFloat} from './is-float';
import type {IsInteger, PositiveInfinity} from "type-fest";
import type {IsInteger} from './is-integer';
import type {IsLiteral} from '../is-literal';
import type {IsLiteral} from 'type-fest';
import type {IsNegative} from './numeric';
import type {IsNegative} from 'type-fest';
import type {IsNever, And} from 'type-fest';
import type {IsNever} from '../is-never';
import type {IsNever} from './is-never';
import type {IsNotFalse, IsPrimitive} from './internal';
import type {IsNull} from './is-null';
import type {IsNull} from 'type-fest';
import type {IsNumericLiteral} from './is-literal';
import type {IsNumericLiteral} from 'type-fest';
import type {IsStringLiteral} from './is-literal';
import type {IsStringLiteral} from 'type-fest';
import type {IsSymbolLiteral} from 'type-fest';
import type {IsTuple} from './is-tuple';
import type {IsTuple} from 'type-fest';
import type {IsUnion} from './internal';
import type {IsUnknown} from './is-unknown';
import type {IsUnknown} from 'type-fest';
import type {IsolatedWorldChart} from './IsolatedWorld.js';
import type {IsolatedWorld} from './IsolatedWorld.js';
import type {IterableElement} from 'type-fest';
import type {JSHandle} from '../api/JSHandle.js';
import type {JSHandle} from './JSHandle.js';
import type {Join} from './join';
import type {Join} from 'type-fest';
import type {JsonObject, JsonValue} from './basic';
import type {JsonPrimitive, JsonValue} from './basic';
import type {JsonPrimitive} from './basic';
import type {Jsonifiable} from 'type-fest';
import type {Jsonify, JsonValue} from 'type-fest';
import type {Jsonify} from 'type-fest';
import type {KebabCasedProperties} from 'type-fest';
import type {KebabCase} from 'type-fest';
import type {KeyInput} from '../common/USKeyboardLayout.js';
import type {KeyboardTypeOptions} from './Input.js';
import type {KeysOfUnion} from '../keys-of-union';
import type {KeysOfUnion} from './keys-of-union';
import type {KeysOfUnion} from 'type-fest';
import type {LastArrayElement} from 'type-fest';
import type {LaunchOptions} from './LaunchOptions.js';
import type {LazyArg} from './LazyArg.js';
import type {LessThanOrEqual} from './less-than-or-equal';
import type {LessThanOrEqual} from 'type-fest';
import type {LessThan} from '../less-than';
import type {LessThan} from './less-than';
import type {LessThan} from 'type-fest';
import type {LiteralStringUnion} from './literal-union';
import type {LiteralToPrimitiveDeep, TsConfigJson} from 'type-fest';
import type {LiteralToPrimitive} from './literal-to-primitive';
import type {LiteralToPrimitive} from 'type-fest';
import type {LiteralUnion} from './literal-union';
import type {LiteralUnion} from 'type-fest';
import type {MAIN_WORLD, PUPPETEER_WORLD} from './IsolatedWorlds.js';
import type {MergeDeep, MergeDeepOptions} from 'type-fest';
import type {MergeDeep} from 'type-fest';
import type {MergeExclusive} from 'type-fest';
import type {Merge} from '../merge';
import type {Merge} from './merge';
import type {Merge} from 'type-fest';
import type {MultidimensionalArray} from 'type-fest';
import type {MultidimensionalReadonlyArray} from 'type-fest';
import type {Navigation} from './core/Navigation.js';
import type {NegativeInfinity, PositiveInfinity} from '../numeric';
import type {NegativeInfinity, PositiveInfinity} from './numeric';
import type {NetworkConditions} from '../cdp/NetworkManager.js';
import type {NetworkConditions} from './NetworkManager.js';
import type {NetworkManager} from './NetworkManager.js';
import type {NewDocumentScriptEvaluation} from '../api/Page.js';
import type {Nodes, Parent, PhrasingContent, Root} from 'mdast'
import type {NonEmptyObject} from 'type-fest';
import type {NonEmptyString} from 'type-fest';
import type {NonEmptyTuple} from './non-empty-tuple';
import type {NonEmptyTuple} from 'type-fest';
import type {NonNegativeInteger} from 'type-fest';
import type {NonNegative} from 'type-fest';
import type {NonRecursiveType, IsUnion} from './internal';
import type {NonRecursiveType, ReadonlyKeysOfUnion, ValueOfUnion} from './internal';
import type {NonRecursiveType, StringToNumber} from './internal';
import type {NonRecursiveType, UnionMin, UnionMax, TupleLength, StaticPartOfArray, VariablePartOfArray, IsArrayReadonly, SetArrayAccess, ApplyDefaultOptions} from './internal';
import type {NonRecursiveType} from './internal';
import type {NonRecursiveType} from './type';
import type {Not, TupleMin} from './internal';
import type {Not} from './internal';
import type {NumberAbsolute, BuildTuple, ReverseSign} from './internal';
import type {NumberAbsolute, BuildTuple, TupleMax, ReverseSign} from './internal';
import type {NumberAbsolute, PositiveNumericStringGt} from './internal';
import type {Numeric} from './numeric';
import type {Observable} from '../../third_party/rxjs/rxjs.js';
import type {OmitDeep} from 'type-fest';
import type {OmitIndexSignature} from './omit-index-signature';
import type {OmitIndexSignature} from 'type-fest';
import type {Opaque, UnwrapOpaque} from 'type-fest';
import type {Opaque} from 'type-fest';
import type {OperatorFunction} from '../../third_party/rxjs/rxjs.js';
import type {OptionalKeysOf, Except} from 'type-fest';
import type {OptionalKeysOf} from '../optional-keys-of';
import type {OptionalKeysOf} from './optional-keys-of';
import type {Options} from './lib/index.js'
import type {Or} from './or';
import type {Or} from 'type-fest';
import type {PDFOptions} from '../common/PDFOptions.js';
import type {Page, VideoFormat} from '../api/Page.js';
import type {Page} from '../Page.js';
import type {Page} from '../api/Page.js';
import type {Page} from './Page.js';
import type {ParseOptions, TokenizeContext, Token} from 'micromark-util-types'
import type {ParseOptions, Token} from 'micromark-util-types'
import type {ParseSelector} from 'typed-query-selector/parser.js';
import type {PartialDeep} from 'type-fest';
import type {PartialOnUndefinedDeep} from 'type-fest';
import type {PascalCasedPropertiesDeep} from 'type-fest';
import type {PascalCasedProperties} from 'type-fest';
import type {PascalCase} from './pascal-case';
import type {PascalCase} from 'type-fest';
import type {Paths} from './paths';
import type {Paths} from 'type-fest';
import type {Permission} from '../api/Browser.js';
import type {PickDeep, PartialDeep} from 'type-fest';
import type {PickIndexSignature} from './pick-index-signature';
import type {PickIndexSignature} from 'type-fest';
import type {Plugin} from 'unified'
import type {Point, Position} from 'unist'
import type {Point} from '../api/ElementHandle.js';
import type {Point} from './ElementHandle.js';
import type {Point} from 'unist'
import type {Poller} from '../injected/Poller.js';
import type {PositiveInfinity, NegativeInfinity, IsNegative} from './numeric';
import type {PositiveInfinity, NegativeInfinity} from './numeric';
import type {Primitive, ConditionalExcept} from 'type-fest';
import type {Primitive, ConditionalPick} from 'type-fest';
import type {Primitive} from '../primitive';
import type {Primitive} from './primitive';
import type {Program} from 'estree-jsx'
import type {Promisable} from 'type-fest';
import type {ProtocolError} from '../common/Errors.js';
import type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';
import type {ProtocolType} from '../common/ConnectOptions.js';
import type {Protocol} from 'devtools-protocol';
import type {PuppeteerLifeCycleEvent} from '../cdp/LifecycleWatcher.js';
import type {PuppeteerNode} from './PuppeteerNode.js';
import type {QueryHandler} from './QueryHandler.js';
import type {Readable, Transform, Writable} from 'node
import type {ReadonlyDeep} from 'type-fest';
import type {ReadonlyKeysOf} from './readonly-keys-of';
import type {ReadonlyKeysOf} from 'type-fest';
import type {Realm} from '../api/Realm.js';
import type {Realm} from './Realm.js';
import type {ReportOptions} from 'istanbul-reports';
import type {Request} from './Request.js';
import type {Request} from './core/Request.js';
import type {RequireAllOrNone} from 'type-fest';
import type {RequireAtLeastOne} from './require-at-least-one';
import type {RequireAtLeastOne} from 'type-fest';
import type {RequireExactlyOne} from './require-exactly-one';
import type {RequireExactlyOne} from 'type-fest';
import type {RequireOneOrNone} from 'type-fest';
import type {RequiredDeep} from './required-deep';
import type {RequiredDeep} from 'type-fest';
import type {RequiredKeysOf} from '../required-keys-of';
import type {RequiredKeysOf} from './required-keys-of';
import type {RequiredKeysOf} from 'type-fest';
import type {Root} from 'mdast'
import type {Schema} from 'property-information'
import type {Schema} from 'type-fest';
import type {ScreamingSnakeCase} from 'type-fest';
import type {ScreenRecorder} from '../node/ScreenRecorder.js';
import type {ScreenRecorder} from './node/ScreenRecorder.js';
import type {SecurityDetails} from '../common/SecurityDetails.js';
import type {Session} from './Session.js';
import type {Session} from 'chromium-bidi/lib/cjs/protocol/protocol.js';
import type {SetFieldType} from 'type-fest';
import type {SetNonNullableDeep} from 'type-fest';
import type {SetNonNullable} from './set-non-nullable';
import type {SetNonNullable} from 'type-fest';
import type {SetOptional} from 'type-fest';
import type {SetParameterType} from 'type-fest';
import type {SetReadonly} from 'type-fest';
import type {SetRequiredDeep} from 'type-fest';
import type {SetRequired} from './set-required';
import type {SetRequired} from 'type-fest';
import type {SetReturnType} from './set-return-type';
import type {SetReturnType} from 'type-fest';
import type {SharedUnionFieldsDeep} from 'type-fest';
import type {SharedUnionFields} from './shared-union-fields';
import type {SharedUnionFields} from 'type-fest';
import type {SimplifyDeep} from './simplify-deep';
import type {SimplifyDeep} from 'type-fest';
import type {Simplify} from '../simplify';
import type {Simplify} from './simplify';
import type {Simplify} from './simplify.d';
import type {Simplify} from 'type-fest';
import type {SingleKeyObject} from 'type-fest';
import type {SnakeCasedPropertiesDeep} from 'type-fest';
import type {SnakeCasedProperties} from 'type-fest';
import type {SnakeCase} from './snake-case';
import type {SnakeCase} from 'type-fest';
import type {SnapshotFormat} from '@jest/schemas';
import type {Split} from './split';
import type {Split} from 'type-fest';
import type {Spread} from 'type-fest';
import type {StackData} from 'stack-utils';
import type {StaticPartOfArray, VariablePartOfArray, NonRecursiveType, ToString, IsNumberLike, ApplyDefaultOptions} from './internal';
import type {StaticPartOfArray, VariablePartOfArray} from './internal';
import type {StringKeyOf} from './string-key-of';
import type {StringKeyOf} from 'type-fest';
import type {StringSlice} from 'type-fest';
import type {StringToArray} from './internal';
import type {StringToNumber} from './string';
import type {Stringified} from 'type-fest';
import type {StructuredCloneable} from 'type-fest';
import type {Subtract} from './subtract';
import type {Subtract} from 'type-fest';
import type {Sum} from './sum';
import type {Sum} from 'type-fest';
import type {SupportedBrowser} from '../common/SupportedBrowser.js';
import type {SupportedBrowser} from './SupportedBrowser.js';
import type {SupportedWebDriverCapabilities} from '../common/ConnectOptions.js';
import type {Tagged, UnwrapTagged} from 'type-fest';
import type {TaggedUnion} from 'type-fest';
import type {Tagged} from 'type-fest';
import type {Tag} from './lib/index.js'
import type {TargetFilterCallback} from '../api/Browser.js';
import type {TargetManagerEvents} from './TargetManageEvents.js';
import type {TargetManager} from './TargetManager.js';
import type {Target} from '../api/Target.js';
import type {Target} from './Target.js';
import type {TestResult} from '@jest/types';
import type {TimeoutError} from '../common/Errors.js';
import type {TimeoutSettings} from '../common/TimeoutSettings.js';
import type {ToString} from './string';
import type {Tracing} from '../cdp/Tracing.js';
import type {Trim} from '../trim';
import type {Trim} from 'type-fest';
import type {TupleToUnion} from 'type-fest';
import type {TypedArray} from './typed-array';
import type {UndefinedOnPartialDeep} from 'type-fest';
import type {UndefinedToOptional} from './internal';
import type {UnionToIntersection} from './union-to-intersection';
import type {UnionToIntersection} from './union-to-intersection.d';
import type {UnionToIntersection} from 'type-fest';
import type {UnionToTuple} from './union-to-tuple';
import type {UnionToTuple} from 'type-fest';
import type {UnknownArray} from '../unknown-array';
import type {UnknownArray} from './unknown-array';
import type {UnknownArray} from 'type-fest';
import type {UnknownMap} from 'type-fest';
import type {UnknownRecord} from './unknown-record';
import type {UnknownRecord} from 'type-fest';
import type {UnknownSet} from 'type-fest';
import type {UserContext} from './UserContext.js';
import type {UserContext} from './core/UserContext.js';
import type {UserPrompt} from './core/UserPrompt.js';
import type {VFile} from './lib/index.js'
import type {ValueOf} from 'type-fest';
import type {Value} from 'vfile'
import type {Viewport} from '../common/Viewport.js';
import type {Viewport} from './Viewport.js';
import type {WaitForOptions} from '../api/Frame.js';
import type {WaitForSelectorOptions} from '../api/Page.js';
import type {WaitTimeoutOptions} from '../api/Page.js';
import type {WebWorker} from './WebWorker.js';
import type {Whitespace} from './characters';
import type {Whitespace} from './internal';
import type {WindowRealm} from './core/Realm.js';
import type {WordsOptions} from './words';
import type {Words} from './words';
import type {Words} from 'type-fest';
import type {WritableDeep} from 'type-fest';
import type {WritableKeysOf} from './writable-keys-of';
import type {WritableKeysOf} from 'type-fest';
import type {Writable} from 'type-fest';
import type {} from '@vitest/expect'
import typescript from '@rollup/plugin-typescript';
import useEmblaCarousel, {
import useIsSearchMode from '../../hooks/useIsSearchMode';
import useIsSearchMode from './useIsSearchMode';
import useSetVariationPicker from './useSetVariationPicker';
import user from '@testing-library/user-event';
import userEvent from "@testing-library/user-event";
import valuationRules from "../../valuationRules.json";
import vine from '@vinejs/vine';
import vm from 'node
import weekdayRange from './weekdayRange';
import width from './width';
import wrapAnsi from 'wrap-ansi';
import xmlDecodeTree from "./generated/decode-data-xml.js";
import yargs from "yargs";
import z from 'zod';
import zlib from 'node
import {
import { A as AfterAllListener, b as AfterEachListener, B as BeforeAllListener, d as BeforeEachListener, e as TaskHook, O as OnTestFailedHandler, f as OnTestFinishedHandler, a as Test, g as Custom, S as Suite, h as SuiteHooks, F as File, i as TaskUpdateEvent, T as Task, j as TestAPI, k as SuiteAPI, l as SuiteCollector } from './tasks.d-hsdzc98-.js';
import { A as AfterSuiteRunMeta } from './chunks/environment.d.Dmw5ulng.js';
import { AIAssistantDrawer } from "./AIAssistantDrawer";
import { AIAssistantTrigger } from "@/components/chat/AIAssistantTrigger";
import { AIChatBubble } from "@/components/chat/AIChatBubble";
import { AICondition } from "@/types/photo";
import { AICondition, Photo, PhotoScore } from "@/types/photo";
import { AICondition, PhotoScore } from "@/types/photo";
import { AICondition, PhotoScore, PhotoScoringResult } from "@/types/photo";
import { AIConditionBadge } from "./AIConditionBadge";
import { AIConditionBadge } from "@/components/valuation/AIConditionBadge";
import { APIBuilder } from "./api-builder";
import { API_VERSIONS, API_VERSION_HEADER_NAME } from './constants'
import { API_VERSION_HEADER_NAME, BASE64URL_REGEX } from './constants'
import { AST } from './ast.js';
import { ASTNode } from "./types";
import { ASTNode, Type, AnyType, Field } from "./lib/types";
import { AST_NODE_TYPES, AST_TOKEN_TYPES } from './ts-estree';
import { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from "@remix-run/router";
import { AccessOptions } from 'basic-ftp';
import { Accessibility } from '../cdp/Accessibility.js';
import { Accessibility } from './Accessibility.js';
import { Accessibility, Argument, ArrayExpression, ArrayPattern, ArrowFunctionExpression, AssignmentExpression, AssignmentPattern, AssignmentPatternProperty, AssignmentProperty, AwaitExpression, BigIntLiteral, BinaryExpression, BindingIdentifier, BlockStatement, BooleanLiteral, BreakStatement, CallExpression, CatchClause, Class, ClassDeclaration, ClassExpression, ClassMember, ClassMethod, ClassProperty, ComputedPropName, ConditionalExpression, Constructor, ContinueStatement, DebuggerStatement, Declaration, Decorator, DefaultDecl, DoWhileStatement, EmptyStatement, ExportAllDeclaration, ExportDeclaration, ExportDefaultDeclaration, ExportDefaultExpression, ExportDefaultSpecifier, ExportNamedDeclaration, ExportNamespaceSpecifier, ExportSpecifier, ExprOrSpread, Expression, ExpressionStatement, Fn, ForInStatement, ForOfStatement, ForStatement, FunctionDeclaration, FunctionExpression, GetterProperty, Identifier, IfStatement, Import, ImportDeclaration, ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier, JSXAttrValue, JSXAttribute, JSXAttributeName, JSXAttributeOrSpread, JSXClosingElement, JSXClosingFragment, JSXElement, JSXElementChild, JSXElementName, JSXEmptyExpression, JSXExpressionContainer, JSXFragment, JSXMemberExpression, JSXNamespacedName, JSXObject, JSXOpeningElement, JSXOpeningFragment, JSXSpreadChild, JSXText, KeyValuePatternProperty, KeyValueProperty, LabeledStatement, MemberExpression, MetaProperty, MethodProperty, Module, ModuleDeclaration, ModuleExportName, ModuleItem, NamedExportSpecifier, NamedImportSpecifier, NewExpression, NullLiteral, NumericLiteral, ObjectExpression, ObjectPattern, ObjectPatternProperty, OptionalChainingCall, OptionalChainingExpression, Param, ParenthesisExpression, Pattern, PrivateMethod, PrivateName, PrivateProperty, Program, Property, PropertyName, RegExpLiteral, RestElement, ReturnStatement, Script, SequenceExpression, SetterProperty, SpreadElement, Statement, StaticBlock, StringLiteral, Super, SuperPropExpression, SwitchCase, SwitchStatement, TaggedTemplateExpression, TemplateLiteral, ThisExpression, ThrowStatement, TryStatement, TsAsExpression, TsCallSignatureDeclaration, TsConstAssertion, TsConstructSignatureDeclaration, TsEntityName, TsEnumDeclaration, TsEnumMember, TsEnumMemberId, TsExportAssignment, TsExpressionWithTypeArguments, TsExternalModuleReference, TsFnParameter, TsGetterSignature, TsImportEqualsDeclaration, TsIndexSignature, TsInstantiation, TsInterfaceBody, TsInterfaceDeclaration, TsMethodSignature, TsModuleBlock, TsModuleDeclaration, TsModuleName, TsModuleReference, TsNamespaceBody, TsNamespaceDeclaration, TsNamespaceExportDeclaration, TsNonNullExpression, TsParameterProperty, TsParameterPropertyParameter, TsPropertySignature, TsQualifiedName, TsSatisfiesExpression, TsSetterSignature, TsType, TsTypeAliasDeclaration, TsTypeAnnotation, TsTypeAssertion, TsTypeElement, TsTypeParameter, TsTypeParameterDeclaration, TsTypeParameterInstantiation, UnaryExpression, UpdateExpression, VariableDeclaration, VariableDeclarator, WhileStatement, WithStatement, YieldExpression } from "@swc/types";
import { AccessibilityManager } from './AccessibilityManager';
import { AccidentCalculator } from "@/utils/rules/calculators/accidentCalculator";
import { AccidentDetails } from "../types/manualEntry";
import { AccidentDetails } from "@/components/lookup/types/manualEntry";
import { AccidentDetailsForm } from "@/components/lookup/form-parts/AccidentDetailsForm";
import { AccidentFactorCard } from "./AccidentFactorCard";
import { AccidentHistoryForm } from "./accident-history/AccidentHistoryForm";
import { AccidentHistorySection } from "./vehicle-details/AccidentHistorySection";
import { AccidentToggle } from "./AccidentToggle";
import { AccidentToggle } from "@/components/premium/form/steps/vehicle-details/AccidentToggle";
import { AcroButtonFlags } from 'src/core/acroform/flags';
import { AcroButtonFlags, AcroChoiceFlags } from 'src/core/acroform/flags';
import { AcroChoiceFlags } from 'src/core/acroform/flags';
import { Action as HistoryAction } from "./history";
import { Action as NavigationType } from "@remix-run/router";
import { ActiveModifiers } from './Modifiers';
import { ActiveModifiers } from 'types/Modifiers';
import { ActiveModifiers, InternalModifier } from 'types/Modifiers';
import { ActiveModifiers, Modifiers } from 'types/Modifiers';
import { ActiveShape } from './types';
import { ActiveShape, SymbolType } from './types';
import { AddDealerVehiclePage } from "@/pages/dealer/AddDealerVehiclePage";
import { Address4 } from './ipv4';
import { Address6 } from './ipv6';
import { AddressError } from './address-error';
import { AdjustmentBreakdown } from "@/types/photo";
import { AdjustmentBreakdown } from "@/utils/rules/types";
import { AdjustmentBreakdown, Rule, RulesEngineInput } from "./types";
import { AdjustmentBreakdown, RulesEngineInput } from "../rules/types";
import { AdjustmentBreakdown, RulesEngineInput } from "../types";
import { AdjustmentBreakdown, RulesEngineInput } from "./rules/types";
import { AdjustmentBreakdown, SectionParams } from "../types";
import { AdjustmentCalculator } from "./adjustmentCalculator";
import { AdjustmentCalculator, RulesEngineInput } from "../types";
import { AdminAnalytics } from "@/hooks/useAdminAnalytics";
import { AdminAnalyticsChart } from "@/components/admin/AdminAnalyticsChart";
import { AdminAnalyticsDashboard } from "./dashboard/AdminAnalyticsDashboard";
import { AdminAnalyticsDashboard } from "@/components/admin/AdminAnalyticsDashboard";
import { AdminAnalyticsDashboard } from "@/components/admin/dashboard/AdminAnalyticsDashboard";
import { AdminUserAttributes, GenerateLinkParams, GenerateLinkResponse, Pagination, User, UserResponse, GoTrueAdminMFAApi, PageParams } from './lib/types';
import { Agent as HttpAgent } from 'http'
import { Agent as HttpsAgent, globalAgent as httpsGlobalAgent } from 'https'
import { Agent } from 'http'
import { Agent, AgentConnectOpts } from 'agent-base';
import { AggregateFunctions, ContainsNull, GenericRelationship, GenericSchema, GenericTable, IsNonEmptyArray, TablesAndViews, UnionToArray } from './types';
import { AggregateFunctions, ExtractFirstProperty, GenericSchema, IsNonEmptyArray, Prettify, TablesAndViews, TypeScriptTypes } from './types';
import { AiAssistantPreview } from "./AiAssistantPreview";
import { AirlineModule } from './modules/airline';
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";
import { AlertCircle, AlertTriangle, Check, Loader2 } from "lucide-react";
import { AlertCircle, AlertTriangle, Info } from "lucide-react";
import { AlertCircle, AlertTriangle, XCircle } from "lucide-react";
import { AlertCircle, ArrowLeft } from "lucide-react";
import { AlertCircle, Award, Camera, CheckSquare, Loader2 } from "lucide-react";
import { AlertCircle, Camera, Check, Image, Upload, X } from "lucide-react";
import { AlertCircle, Camera, Check, Lock } from "lucide-react";
import { AlertCircle, Car, CheckCircle, Loader2, Search } from "lucide-react";
import { AlertCircle, Car, CheckCircle2, Loader2 } from "lucide-react";
import { AlertCircle, Car, Fuel, Info, Timer, Zap } from "lucide-react";
import { AlertCircle, Check, ChevronRight, Loader2 } from "lucide-react";
import { AlertCircle, Check, CreditCard, Download } from "lucide-react";
import { AlertCircle, Check, Info, X } from "lucide-react";
import { AlertCircle, Check, InfoIcon } from "lucide-react";
import { AlertCircle, CheckCircle } from "lucide-react";
import { AlertCircle, CheckCircle, HelpCircle } from "lucide-react";
import { AlertCircle, CheckCircle, Info } from "lucide-react";
import { AlertCircle, CheckCircle, Loader2, Send } from "lucide-react";
import { AlertCircle, CheckCircle, MapPin } from "lucide-react";
import { AlertCircle, CheckCircle2 } from "lucide-react";
import { AlertCircle, CheckCircle2, Clock } from "lucide-react";
import { AlertCircle, CheckCircle2, Loader2, Search } from "lucide-react";
import { AlertCircle, Download, Loader2, Mail } from "lucide-react";
import { AlertCircle, FileText, Mail, Share2 } from "lucide-react";
import { AlertCircle, InfoIcon, Loader2 } from "lucide-react";
import { AlertCircle, Loader2 } from "lucide-react";
import { AlertCircle, Loader2, Search } from "lucide-react";
import { AlertCircle, Loader2, Store } from "lucide-react";
import { AlertCircle, Loader2, X } from "lucide-react";
import { AlertCircle, RefreshCw } from "lucide-react";
import { AlertCircle, RotateCcw, Search } from "lucide-react";
import { AlertTriangle } from "lucide-react";
import { AlertTriangle, ArrowRight, Check } from "lucide-react";
import { AlertTriangle, Camera, Check, Upload } from "lucide-react";
import { AlertTriangle, Car, Check, Database, Loader2 } from "lucide-react";
import { AlertTriangle, Car, CheckCircle, ShieldAlert } from "lucide-react";
import { AlertTriangle, Car, Loader2 } from "lucide-react";
import { AlertTriangle, CarFront, CheckCircle, Loader2 } from "lucide-react";
import { AlertTriangle, Check } from "lucide-react";
import { AlertTriangle, CheckCircle } from "lucide-react";
import { AlertTriangle, CheckCircle, Info } from "lucide-react";
import { AlertTriangle, Clock, FileText, Shield, User } from "lucide-react";
import { AlertTriangle, Home, RefreshCw } from "lucide-react";
import { AlertTriangle, Loader2 } from "lucide-react";
import { AlertTriangle, MapPin, TrendingDown, TrendingUp } from "lucide-react";
import { AlertTriangle, Shield } from "lucide-react";
import { Alias } from '../nodes/Alias';
import { AlignedPlacement } from '@floating-ui/core';
import { AlignedPlacement } from '@floating-ui/dom';
import { AlignedPlacement } from '@floating-ui/react-dom';
import { AlignedPlacement } from '@floating-ui/utils';
import { Alignment } from '@floating-ui/core';
import { Alignment } from '@floating-ui/dom';
import { Alignment } from '@floating-ui/react-dom';
import { Alignment } from '@floating-ui/utils';
import { AlignmentOptionType } from './Alignment';
import { AlignmentOptionType } from './Alignment.js';
import { AlignmentType } from './Alignment';
import { AlignmentType } from './Alignment.js';
import { AllowInDimension, AnimationDuration, AnimationTiming, CartesianViewBox, Coordinate } from '../util/types';
import { AnalysisSection } from "./AnalysisSection";
import { AnimalModule } from './modules/animal';
import { AnimatePresence, motion } from "framer-motion";
import { AnimatedButton } from "@/components/ui/animated-button";
import { AnimatedCard } from "@/components/ui/animated-card";
import { AnimatedCounter } from "./AnimatedCounter";
import { AnimatedCounter } from "@/components/animations/AnimatedCounter";
import { AnimationDuration, AnimationTiming } from '../util/types';
import { AnimationDuration, AnimationTiming, DataKey, TreemapNode } from '../util/types';
import { AnimationEvent, AriaAttributes, ClipboardEvent, Component, CompositionEvent, DragEvent, FocusEvent, FormEvent, FunctionComponent, KeyboardEvent, MouseEvent, PointerEvent, ReactElement, ReactNode, SVGProps, SyntheticEvent, TouchEvent, TransitionEvent, UIEvent, WheelEvent, JSX } from 'react';
import { AnimationPlaybackOptions, Transition, MotionValue, UnresolvedValueKeyframe, ElementOrSelector, DOMKeyframesDefinition, AnimationOptions, GroupAnimationWithThen, AnimationPlaybackControlsWithThen } from 'motion-dom';
import { AnimationScope } from 'motion-dom';
import { AnimationsType } from './Animations';
import { AnimationsType } from './Animations.js';
import { AnnouncementBar } from "@/components/marketing/AnnouncementBar";
import { AnyConfig } from './types'
import { AnyConfig, ConfigExtension } from './types'
import { AnyConfig, ConfigExtension, DefaultClassGroupIds, DefaultThemeGroupIds } from './types'
import { AnyNode } from "domhandler";
import { AnyNode, ChildNode, Element, ParentNode } from "domhandler";
import { AnyNode, Element } from "domhandler";
import { AnyStrictValidator, ValidationState } from 'typanion';
import { ApiErrorType } from "@/utils/api-utils";
import { ApiLevel } from '../misc/level';
import { AppearanceMapping } from "./appearances";
import { AppearanceMapping } from "./appearances";
import { AppearanceMapping } from 'src/api/form/appearances';
import { AppearanceProviderFor } from "./appearances";
import { AppearanceProviderFor } from "./appearances";
import { Archive, CheckSquare, MessageCircle, Pin } from "lucide-react";
import { AreaDot } from '../cartesian/Area';
import { Arguments as ParserArguments, DetailedArguments as ParserDetailedArguments, Configuration as ParserConfiguration, Options as ParserOptions, ConfigCallback, CoerceCallback } from 'yargs-parser';
import { Arguments, DetailedArguments } from 'yargs-parser';
import { Argv } from ".";
import { AriaLabelingProps, DOMProps, LinkDOMProps, FocusableElement, Orientation, Href, RouterOptions, RefObject } from "@react-types/shared";
import { ArkErrors } from 'arktype';
import { ArrayFormatter, decodeUnknown } from 'effect/ParseResult';
import { ArrayKey, IsTuple, TupleKeys } from './common';
import { Arrayable } from '@vitest/utils';
import { ArrowDown, ArrowUp } from "lucide-react";
import { ArrowDown, ArrowUp, Minus } from "lucide-react";
import { ArrowLeft } from "lucide-react";
import { ArrowLeft, ArrowRight } from "lucide-react";
import { ArrowLeft, Building } from "lucide-react";
import { ArrowLeft, Home, LogOut, ShieldAlert } from "lucide-react";
import { ArrowLeft, Loader2 } from "lucide-react";
import { ArrowLeft, PlusCircle } from "lucide-react";
import { ArrowLeft, User } from "lucide-react";
import { ArrowOptions } from '@floating-ui/react-dom';
import { ArrowRight } from "lucide-react";
import { ArrowRight, Award } from "lucide-react";
import { ArrowRight, Building, User } from "lucide-react";
import { ArrowRight, Calendar, Car, Gauge } from "lucide-react";
import { ArrowRight, Check, Download, Loader2 } from "lucide-react";
import { ArrowRight, Check, Loader2 } from "lucide-react";
import { ArrowRight, CheckCircle, FileText, ShieldCheck } from "lucide-react";
import { ArrowRight, CheckCircle, Loader2 } from "lucide-react";
import { ArrowRight, ChevronRight } from "lucide-react";
import { ArrowRight, Download, Share } from "lucide-react";
import { ArrowRight, FileText } from "lucide-react";
import { ArrowRight, KeyRound, Mail } from "lucide-react";
import { ArrowRight, Loader2 } from "lucide-react";
import { ArrowRight, Loader2, RotateCcw } from "lucide-react";
import { ArrowRight, Mail } from "lucide-react";
import { AspectRatio } from "@/components/ui/aspect-ratio";
import { Assumptions } from "./assumptions";
import { Ast } from './parser'
import { Ast } from './parser';
import { Ast, ParseQuery } from './parser'
import { Ast, ParseQuery } from './parser';
import { AsyncCallback } from './providers/async';
import { AsyncLocalStorage } from 'node
import { AsyncParseReturnType, INVALID, ParseContext, ParseInput, ParseParams, ParseReturnType, ParseStatus, SyncParseReturnType } from "./helpers/parseUtil";
import { AsyncRuntimeOptions, ContextOptions } from "./types";
import { AsyncValidator, Validator } from 'fluentvalidation-ts';
import { Asyncify, AsyncifySleepResult, EitherModule, EmscriptenModuleCallbacks } from "./emscripten-types";
import { AtRuleProps } from './at-rule.js'
import { AttachmentOptions, SaveOptions, Base64SaveOptions, LoadOptions, CreateOptions, EmbedFontOptions, SetTitleOptions } from "./PDFDocumentOptions";
import { AttachmentOptions, SaveOptions, Base64SaveOptions, LoadOptions, CreateOptions, EmbedFontOptions, SetTitleOptions } from "./PDFDocumentOptions";
import { AuctionHistorySection } from "@/components/valuation/AuctionHistorySection";
import { AuditChecklist } from "@/components/audit/AuditChecklist";
import { AuthChangeEvent } from '@supabase/auth-js'
import { AuthClient } from '@supabase/auth-js'
import { AuthClient } from '@supabase/auth-js';
import { AuthError } from './errors'
import { AuthError } from './errors';
import { AuthError } from './lib/errors';
import { AuthError, isAuthError } from './lib/errors'
import { AuthInvalidJwtError } from './errors'
import { AuthLayout } from "./AuthLayout";
import { AuthMode } from "@/types/auth";
import { AuthProvider as ContextAuthProvider } from "@/components/auth/AuthContext";
import { AuthProvider } from "@/components/auth/AuthContext";
import { AuthProvider, useAuth } from "@/components/auth/AuthContext";
import { AuthResponse, AuthResponsePassword, SSOResponse, GenerateLinkResponse, UserResponse } from './types';
import { AuthTestPanel } from "@/components/admin/testing/AuthTestPanel";
import { AutoPlacementOptions } from '@floating-ui/dom';
import { AutoPlacementOptions } from '@floating-ui/react-dom';
import { AutoUpdateOptions } from '@floating-ui/dom';
import { AutoUpdateOptions } from '@floating-ui/react-dom';
import { Avatar } from "@/components/ui/avatar";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, createRoutesFromChildren, renderMatches } from "./lib/components";
import { Awaitable } from '@vitest/utils';
import { Award, Car, ChartBar, MapPin, Share2, TrendingUp } from "lucide-react";
import { Award, Gift, Loader2, Mail, Users } from "lucide-react";
import { Award, Minus, TrendingDown, TrendingUp } from "lucide-react";
import { Axis } from './ViewPort';
import { Axis } from './types';
import { Axis } from '@floating-ui/core';
import { Axis } from '@floating-ui/dom';
import { Axis } from '@floating-ui/react-dom';
import { Axis } from '@floating-ui/utils';
import { AxisDirectionOptionType, AxisOptionType } from './Axis';
import { AxisDirectionOptionType, AxisOptionType } from './Axis.js';
import { AxisDomain, BaseAxisProps } from './types';
import { AxisMap, CategoricalChartState } from './types';
import { AxisOptionType, AxisType } from './Axis';
import { AxisOptionType, AxisType } from './Axis.js';
import { AxisStackGroups } from '../util/ChartUtils';
import { AxisType } from './Axis';
import { AxisType } from './Axis.js';
import { AxisType, BaseAxisProps, DataKey, LayoutType, LegendType, PolarLayoutType, NumberDomain, TickItem, CategoricalDomain, StackOffsetType, Margin, ChartOffset } from './types';
import { AxisType, CategoricalChartOptions, ChartCoordinate, DataKey, LayoutType, Margin, StackOffsetType, TooltipEventType } from '../util/types';
import { B as BenchmarkResult } from './benchmark.d.BwvBVTda.js';
import { BACKGROUND_CLIP } from '../css/property-descriptors/background-clip';
import { BACKGROUND_ORIGIN } from '../css/property-descriptors/background-origin';
import { BACKGROUND_REPEAT } from '../css/property-descriptors/background-repeat';
import { BORDER_STYLE } from '../../css/property-descriptors/border-style';
import { BackgroundSizeInfo } from '../css/property-descriptors/background-size';
import { Badge } from "./badge";
import { Badge } from "@/components/ui/badge";
import { BadgeCheck } from "lucide-react";
import { BadgeCheck, Calendar, ChevronRight, Gauge } from "lucide-react";
import { BadgeCheck, FileBarChart, FileLineChart, History } from "lucide-react";
import { BadgeEnhanced } from "@/components/ui/badge-enhanced";
import { BarChart, Car, Check, DollarSign, FileText, Zap } from "lucide-react";
import { BarChart, Car, FileText, Gauge, Shield } from "lucide-react";
import { BarChart, Download, Loader2, PieChart } from "lucide-react";
import { BarChart, PieChart, Users } from "lucide-react";
import { BarChart2, TrendingDown, TrendingUp } from "lucide-react";
import { BarChart3, Car, PlusCircle, Users } from "lucide-react";
import { BarChart3, DollarSign, FileText } from "lucide-react";
import { BarProps } from '../cartesian/Bar';
import { BarRectangleItem } from './Bar';
import { BaseAxisProps, AxisInterval, PresentationAttributesAdaptChildEvent } from '../util/types';
import { BaseAxisProps, ChartCoordinate, ChartOffset, DataKey, LayoutType, Margin, StackOffsetType, TickItem } from '../util/types';
import { BaseAxisProps, TickItem, PresentationAttributesAdaptChildEvent } from '../util/types';
import { BaseEmojiProps } from './BaseEmojiProps';
import { BaseEmojiProps } from './BaseEmojiProps';
import { BaseExpression, BaseNode, Expression, Literal } from "estree";
import { BaseIssue, BaseSchema, BaseSchemaAsync, Config, InferIssue } from 'valibot';
import { BatchInterceptor } from './BatchInterceptor'
import { BatchInterceptor, Interceptor, HttpRequestEventMap } from '@mswjs/interceptors';
import { Bell, BellOff, DollarSign } from "lucide-react";
import { Bell, Building2, LockKeyhole, Upload, User } from "lucide-react";
import { BezierCurve } from './bezier-curve';
import { BidiBrowserContext } from './BrowserContext.js';
import { BidiBrowserTarget } from './Target.js';
import { BidiCdpSession } from './CDPSession.js';
import { BidiConnection } from './Connection.js';
import { BidiElementHandle } from './ElementHandle.js';
import { BidiFrame } from './Frame.js';
import { BidiFrameRealm } from './Realm.js';
import { BidiHTTPResponse } from './HTTPResponse.js';
import { BidiJSHandle } from './JSHandle.js';
import { BidiKeyboard, BidiMouse, BidiTouchscreen } from './Input.js';
import { BidiPage } from './Page.js';
import { BidiWorkerRealm } from './Realm.js';
import { BigInteger } from 'jsbn';
import { Blob } from 'buffer'
import { BlockScope, CatchScope, ClassScope, ConditionalTypeScope, ForScope, FunctionExpressionNameScope, FunctionScope, FunctionTypeScope, GlobalScope, MappedTypeScope, ModuleScope, SwitchScope, TSEnumScope, TSModuleScope, TypeScope, WithScope } from './scope';
import { Body } from './components/body/Body';
import { BodyInit, Headers } from './fetch'
import { BodyM } from "@/components/ui-kit/typography";
import { BodyM, BodyS } from "@/components/ui-kit/typography";
import { BodyM, BodyS, Heading } from "@/components/ui-kit/typography";
import { BodyM, Heading } from "@/components/ui-kit/typography";
import { BodyS } from "@/components/ui-kit/typography";
import { BodyS, Caption } from "./typography";
import { BodyS, Heading } from "@/components/ui-kit/typography";
import { BookmarkPlus, Download } from "lucide-react";
import { BorrowedHeapCharPointer, JSContextPointer, JSRuntimePointer, JSValueConstPointer, JSValuePointer, OwnedHeapCharPointer } from "./types-ffi";
import { BoundCurves } from '../bound-curves';
import { BoundCurves } from './bound-curves';
import { Boundary } from '@floating-ui/dom';
import { Boundary } from '@floating-ui/react-dom';
import { Bounds } from '../css/layout/bounds';
import { Bounds } from './bounds';
import { Box, Easing, EasingFunction, BezierDefinition } from 'motion-utils';
import { BrainCircuit } from "lucide-react";
import { BrainCircuit, ChevronUp, MessageCircle, X } from "lucide-react";
import { Breakdown } from "./sections/Breakdown";
import { BreakdownItem, BreakdownItemProps } from "./BreakdownItem";
import { BreakdownList } from "./scoring/BreakdownList";
import { Briefcase, Mail } from "lucide-react";
import { BrotliDecompress, Unzip } from 'minizlib';
import { BrotliDecompressionStream } from 'internal
import { Browser as BrowserBase, type BrowserCloseCallback, type BrowserContextOptions, type IsPageTargetCallback, type TargetFilterCallback } from '../api/Browser.js';
import { Browser } from './Browser.js';
import { Browser, BrowserPlatform } from './browser-data/browser-data.js';
import { Browser, BrowserPlatform, BrowserTag, ChromeReleaseChannel, type ProfileOptions } from './types.js';
import { Browser, ConnectOptions, ChromeArgOptions, LaunchOptions, FetcherOptions, BrowserFetcher} from "puppeteer"
import { Browser, type BrowserCloseCallback, type BrowserContextOptions, type DebugInfo } from '../api/Browser.js';
import { Browser, type BrowserPlatform } from './browser-data/browser-data.js';
import { BrowserContext } from '../api/BrowserContext.js';
import { BrowserLauncher, type ResolvedLaunchArgs } from './BrowserLauncher.js';
import { BrowserNativeObject, IsAny, IsEqual, Primitive } from '../utils';
import { BrowserNativeObject, IsAny, LiteralUnion, Merge } from './utils';
import { BrowserPlatform } from './browser-data/browser-data.js';
import { BrowserPlatform } from './types.js';
import { BrowserPlatform, ChromeReleaseChannel } from './types.js';
import { BrowserPlatform, type ProfileOptions } from './types.js';
import { BrowserRouter } from "react-router-dom";
import { BrowsingContext } from './BrowsingContext.js';
import { BrowsingContext, Session } from '../../../protocol/protocol.js';
import { BrowsingContext, type EmptyResult } from '../../../protocol/protocol.js';
import { BtnClearSearch } from './BtnClearSearch';
import { BtnPlus } from './BtnPlus';
import { BtnSkinToneVariation } from './BtnSkinToneVariation';
import { Bucket } from '../lib/types'
import { Bucket } from '../lib/types';
import { Buffer } from "node
import { Buffer } from 'buffer';
import { Builder } from "./builder";
import { Building, ChartBar, FileBarChart, Shield, Zap } from "lucide-react";
import { Building, KeyRound, Mail, Phone, User } from "lucide-react";
import { Building2 } from "lucide-react";
import { BundleInput } from "./spack";
import { Button } from "@/components/ui/button";
import { Button } from '../../atoms/Button';
import { Button } from '../Button';
import { Button } from '../atoms/Button';
import { Button } from './Button';
import { Button, ButtonProps } from "./button";
import { ButtonEnhanced } from "@/components/ui/button-enhanced";
import { ButtonProps } from 'components/Button';
import { ButtonProps, buttonVariants } from "@/components/ui/button";
import { Buttons, MouseButton } from './buttons';
import { C as Colors } from './index-8b61d5bc.js';
import { C as ContextRPC } from './worker.d.CHGSOG0s.js';
import { C as CustomEventMap, a as ViteNodeRunner, H as HMRPayload$1, b as HotContext } from './index.d-CWZbpOcv.js';
import { CDBadge } from "../CDBadge";
import { CDBadge } from "@/components/ui-kit/CDBadge";
import { CDButton } from "../CDButton";
import { CDButton } from "@/components/ui-kit/CDButton";
import { CDCard } from "@/components/ui-kit/CDCard";
import { CDCard, CDCardBody } from "@/components/ui-kit/CDCard";
import { CDCard, CDCardBody, CDCardFooter, CDCardHeader } from "../CDCard";
import { CDCard, CDCardBody, CDCardFooter, CDCardHeader } from "./CDCard";
import { CDCard, CDCardBody, CDCardHeader } from "@/components/ui-kit/CDCard";
import { CDFooter } from "../CDFooter";
import { CDFooter } from "@/components/ui-kit/CDFooter";
import { CDInput } from "../CDInput";
import { CDModal, CDModalBody, CDModalFooter, CDModalHeader } from "../CDModal";
import { CDNavbar } from "../CDNavbar";
import { CDNavbar } from "@/components/ui-kit/CDNavbar";
import { CDPSession } from '../api/CDPSession.js';
import { CDTable } from "../CDTable";
import { CDTable } from "@/components/ui-kit/CDTable";
import { CDTabs } from "../CDTabs";
import { CDTooltip } from "../CDTooltip";
import { CDTooltip } from "@/components/ui-kit/CDTooltip";
import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'
import { CHANNEL_STATES } from './lib/constants';
import { COMMAND_ARG_COUNTS, SVGPathData } from "./SVGPathData";
import { CONNECTION_STATE } from './lib/constants';
import { CSSLinearGradientImage } from '../image';
import { CSSLinearGradientImage, CSSRadialGradientImage } from '../image';
import { CSSParsedCounterDeclaration } from '../../index';
import { CSSParsedDeclaration } from '../../css';
import { CSSParsedDeclaration } from '../css/index';
import { CSSParsedDeclaration } from '../index';
import { CSSProperties } from 'react';
import { CSSProperties, HTMLAttributes, PropsWithChildren } from "react";
import { CSSProperties, HTMLAttributes, PropsWithChildren, ReactElement } from "react";
import { CSSProperties, ReactNode } from 'react';
import { CSSProperties, ReactNode, SelectHTMLAttributes, ChangeEventHandler, MouseEvent, FocusEvent, KeyboardEvent, PointerEvent, TouchEvent, InputHTMLAttributes, HTMLProps, RefObject } from 'react';
import { CSSRadialGradientImage } from '../image';
import { CSSRadialGradientImage, GradientColorStop, GradientCorner, UnprocessedGradientColorStop } from '../image';
import { CSSToken } from '@csstools/css-tokenizer';
import { CSSToken, DimensionToken, NumberValueToken, StringValueToken, TokenType } from './tokenizer';
import { CSSToken, TokenType, tokenize } from '@csstools/css-tokenizer';
import { CSSTypes } from './types';
import { CSSValue } from '../../syntax/parser';
import { CSSValue } from '../css/syntax/parser';
import { CSSValue } from '../syntax/parser';
import { CSSValue } from './syntax/parser';
import { Cache } from "../../utils";
import { Cache } from "../../utils";
import { Cache } from 'src/utils';
import { Cache, CosmiconfigResult } from './types';
import { Cache, ResourceOptions } from './cache-storage';
import { Cache, mergeUint8Arrays, toHexStringOfMinLength } from 'src/utils';
import { CacheItem, createCacheKey, getCache, setCache } from './cache';
import { Calculator } from "../interfaces/Calculator";
import { Calculator } from "../rules/interfaces/Calculator";
import { Calendar } from "@/components/ui/calendar";
import { Calendar } from "lucide-react";
import { Calendar, Car, DollarSign, Loader2, Trash2 } from "lucide-react";
import { Calendar, Download, Info, Mail } from "lucide-react";
import { Calendar, Gauge, Minus, TrendingDown, TrendingUp } from "lucide-react";
import { Calendar, TrendingDown, TrendingUp } from "lucide-react";
import { CalendarIcon, InfoIcon } from "lucide-react";
import { CalendarIcon, Upload } from "lucide-react";
import { CalendarX } from "lucide-react";
import { Callback } from './utils';
import { Callback, ErrorCallback, Nullable } from '../utils';
import { Callback, ErrorCallback, Nullable } from './utils';
import { CallbackRegistry } from '../common/CallbackRegistry.js';
import { CamelCaseOptions } from './utilities';
import { CamelProperty, HyphenProperty, Property } from './types';
import { CamelProperty, Property } from './types';
import { Camera, Car, ChartBar, Clock, Database, Shield } from "lucide-react";
import { Camera, Car, ChartBar, Database, Shield } from "lucide-react";
import { Camera, CheckCircle, Loader2, Upload, X } from "lucide-react";
import { Camera, Download, Loader2, Save, Share } from "lucide-react";
import { Camera, Image, Upload, X } from "lucide-react";
import { CancelableMessageEvent, CloseEvent } from './events'
import { CancelableMessageEvent, CloseEvent } from './utils/events'
import { CanvasElementContainer } from './canvas-element-container';
import { Caption } from "./typography";
import { Caption } from "@/components/ui-kit/typography";
import { Caption } from 'components/Caption';
import { Caption, CaptionProps } from './Caption';
import { Caption, Label } from "./typography";
import { CaptionDropdowns } from './CaptionDropdowns';
import { CaptionDropdowns } from 'components/CaptionDropdowns';
import { CaptionLabel } from './CaptionLabel';
import { CaptionLabel } from 'components/CaptionLabel';
import { CaptionLabelProps } from 'components/CaptionLabel';
import { CaptionLayout } from 'components/Caption';
import { CaptionLayout, CaptionProps } from 'components/Caption';
import { CaptionNavigation } from './CaptionNavigation';
import { CaptionNavigation } from 'components/CaptionNavigation';
import { CaptionProps } from 'components/Caption';
import { CaptionProps } from 'components/Caption/Caption';
import { Car } from "lucide-react";
import { Car, CarFront, FileBarChart, Loader2 } from "lucide-react";
import { Car, ChartBar, FileBarChart, Shield } from "lucide-react";
import { Car, ChartBar, Shield } from "lucide-react";
import { Car, Check } from "lucide-react";
import { Car, Edit, Trash2 } from "lucide-react";
import { Car, FileText, MessagesSquare, ShieldCheck } from "lucide-react";
import { Car, FileText, Search } from "lucide-react";
import { Car, FileText, Shield } from "lucide-react";
import { Car, Gauge, ShieldCheck } from "lucide-react";
import { Car, History, LogOut, Settings, User } from "lucide-react";
import { CarFront, Undo2 } from "lucide-react";
import { CarIcon, FuelIcon, SettingsIcon } from "lucide-react";
import { Card } from "./card";
import { Card } from "@/components/ui/card";
import { Card, CardContent } from "@/components/ui/card";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { CarfaxBadge } from "./hero/CarfaxBadge";
import { CarfaxBadge } from "@/components/premium/hero/CarfaxBadge";
import { CarfaxCalculator } from "@/utils/rules/calculators/carfaxCalculator";
import { CarfaxData } from "@/utils/carfax/mockCarfaxService";
import { CarfaxErrorAlert } from "./CarfaxErrorAlert";
import { CarfaxErrorAlert } from "./vin/CarfaxErrorAlert";
import { CarfaxReportTab } from "./CarfaxReportTab";
import { CarfaxSummary } from "./CarfaxSummary";
import { CartesianTickItem } from '../util/types';
import { CartesianViewBox, ChartOffset } from './types';
import { CartesianViewBox, ChartOffset, XAxisMap, YAxisMap } from '../util/types';
import { CartesianViewBox, D3Scale } from '../util/types';
import { CartesianViewBox, PresentationAttributesAdaptChildEvent, CartesianTickItem, AxisInterval } from '../util/types';
import { CategoricalChartState } from '../chart/types';
import { Categories } from '../config/categoryConfig';
import { Categories } from '../config/categoryConfig';
import { Categories, SuggestionMode } from '../types/exposedTypes';
import { Categories, SuggestionMode } from '../types/exposedTypes';
import { CategoriesConfig } from './categoryConfig';
import { CategoriesConfig } from './categoryConfig';
import { CategoryButton } from './CategoryButton';
import { CategoryConfig } from '../../config/categoryConfig';
import { CategoryConfig } from '../../config/categoryConfig';
import { CategoryConfig, CustomCategoryConfig } from '../config/categoryConfig';
import { CategoryNavigation } from '../navigation/CategoryNavigation';
import { CdpBrowser } from './Browser.js';
import { CdpBrowserContext } from './BrowserContext.js';
import { CdpCDPSession } from './CdpSession.js';
import { CdpFrame } from './Frame.js';
import { CdpHTTPRequest } from './HTTPRequest.js';
import { CdpJSHandle } from './JSHandle.js';
import { CdpKeyboard, CdpMouse, CdpTouchscreen } from './Input.js';
import { CdpTarget } from './Target.js';
import { CdpWebWorker } from './WebWorker.js';
import { Cell, Legend, Pie, PieChart, ResponsiveContainer } from "recharts";
import { ChainableFunction } from '@vitest/runner/utils';
import { ChangeEventHandler } from 'react';
import { ChannelProxy } from './ChannelProxy.js';
import { ChartBar, Info } from "lucide-react";
import { ChartBar, Shield, TrendingUp } from "lucide-react";
import { ChartContainer } from "@/components/ui/chart";
import { ChartCoordinate, ChartOffset, LayoutType } from '../types';
import { ChartCoordinate, ChartOffset, LayoutType, TooltipEventType } from '../util/types';
import { ChartCoordinate, Coordinate } from '../types';
import { ChartCoordinate, Coordinate, ChartOffset, LayoutType } from '../types';
import { ChartOffset, D3Scale } from '../util/types';
import { ChatBubble } from "./ChatBubble";
import { ChatBubble } from "@/components/chat/ChatBubble";
import { ChatInput } from "./ChatInput";
import { ChatInterface } from "./ChatInterface";
import { ChatMessage } from "./ChatMessage";
import { ChatView } from "./chat/ChatView";
import { Check } from "lucide-react";
import { Check, CheckCircle, Tag } from "lucide-react";
import { Check, ChevronDown, ChevronUp } from "lucide-react";
import { Check, ChevronDown, Zap } from "lucide-react";
import { Check, ChevronLeft, ChevronRight, Sparkles } from "lucide-react";
import { Check, ChevronRight, Circle } from "lucide-react";
import { Check, ChevronRight, X } from "lucide-react";
import { Check, ChevronsUpDown } from "lucide-react";
import { Check, Copy, Linkedin, Loader2, Share2, Twitter } from "lucide-react";
import { Check, HelpCircle, X } from "lucide-react";
import { Check, Info } from "lucide-react";
import { Check, Info, TrendingDown, TrendingUp } from "lucide-react";
import { Check, KeyRound, Loader2 } from "lucide-react";
import { Check, Tag } from "lucide-react";
import { CheckCircle } from "lucide-react";
import { CheckCircle, Info } from "lucide-react";
import { CheckCircle, Info, Loader2, XCircle } from "lucide-react";
import { CheckCircle, RefreshCcw } from "lucide-react";
import { CheckCircle, ShieldCheck, XCircle } from "lucide-react";
import { CheckCircle2 } from "lucide-react";
import { CheckCircle2, ChevronRight } from "lucide-react";
import { CheckCircle2, Loader2, XCircle } from "lucide-react";
import { CheckDuplicateEmbededReference, GetFieldNodeResultName, IsAny, IsRelationNullable, IsStringUnion, JsonPathToType, ResolveRelationship, SelectQueryError } from './utils';
import { CheckIcon } from "lucide-react";
import { CheckIcon, ChevronDownIcon, Palette } from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import { Cheerio } from '../cheerio.js';
import { Cheerio } from './cheerio.js';
import { ChevronDown } from "lucide-react";
import { ChevronDown, ChevronUp, Info } from "lucide-react";
import { ChevronDown, ChevronUp, Minus } from "lucide-react";
import { ChevronDown, Grid, List, Plus, Search } from "lucide-react";
import { ChevronDown, Search, X } from "lucide-react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";
import { ChevronLeft, ChevronRight, Star } from "lucide-react";
import { ChevronLeft, Lock } from "lucide-react";
import { ChevronRight } from "lucide-react";
import { ChevronRight, Eye, FileText, Lock } from "lucide-react";
import { ChevronRight, MoreHorizontal } from "lucide-react";
import { ChildNode, Element, DataNode, Document, ParentNode } from "./node.js";
import { ChildProcess } from 'child_process'
import { ChildProcess } from 'child_process';
import { ChildProcess, SpawnOptions } from 'node
import { ChildProcessByStdio, SpawnOptions, ChildProcess } from 'child_process';
import { ChromiumBidi } from '../../../protocol/protocol.js';
import { Circle } from "lucide-react";
import { ClassConstructor, ClassTransformOptions } from 'class-transformer';
import { ClassFieldInitializerScope } from './scope/ClassFieldInitializerScope';
import { ClassNameValue, twJoin } from './tw-join'
import { ClassNames } from '../../../DomUtils/classNames';
import { ClassNames } from '../../DomUtils/classNames';
import { ClassNames } from '../DomUtils/classNames';
import { ClassNames } from 'types/Styles';
import { ClassNames, StyledComponent, Styles } from './Styles';
import { ClassNames, Styles } from 'types/Styles';
import { ClassNames, asSelectors } from '../../../DomUtils/classNames';
import { ClassNames, asSelectors } from './classNames';
import { ClassStaticBlockScope } from './scope/ClassStaticBlockScope';
import { ClickableEmoji } from '../emoji/Emoji';
import { ClickableEmojiButton } from './ClickableEmojiButton';
import { ClickableInputOrButton } from '../click/isClickableInput';
import { ClientRectObject } from '@floating-ui/core';
import { ClientRectObject } from '@floating-ui/dom';
import { ClientRectObject } from '@floating-ui/react-dom';
import { ClientRectObject } from '@floating-ui/utils';
import { ClientRequestInterceptor } from '.'
import { ClientRequestInterceptor } from '../interceptors/ClientRequest'
import { ClientRequestInterceptor } from '../interceptors/ClientRequest/index.js';
import { ClientRequestInterceptor } from './interceptors/ClientRequest'
import { ClientRequestInterceptor } from './interceptors/ClientRequest/index.js';
import { ClientRequestInterceptor } from '@mswjs/interceptors/ClientRequest'
import { Clock, DollarSign, File, ShieldCheck, Sparkles } from "lucide-react";
import { Clock, Download, FileBarChart, Loader2 } from "lucide-react";
import { CloneOptions, WindowOptions } from './dom/document-cloner';
import { CloseEvent } from './utils/events'
import { Collection } from './Collection';
import { Color } from "../colors";
import { Color } from "../colors";
import { Color } from "./colors";
import { Color } from "./colors";
import { Color } from '../../css/types/color';
import { Color } from '../types/color';
import { Color } from './color';
import { Color } from './types/color';
import { Color } from '@kurkle/color';
import { Color } from 'src/api/colors';
import { Color, PDFFont, PDFPage } from "pdf-lib";
import { Color, PDFFont, PDFPage, rgb } from "pdf-lib";
import { Color, PDFPage, rgb } from "pdf-lib";
import { Color, colorToComponents, setFillingColor } from 'src/api/colors';
import { Color, rgb } from "pdf-lib";
import { Color, rgb } from 'src/api/colors';
import { Color, setFillingColor, setStrokingColor } from 'src/api/colors';
import { ColorCalculator } from "@/utils/rules/calculators/colorCalculator";
import { ColorChannels, ComputedColorChannels, Options } from './typedef';
import { ColorChannels, Options } from './typedef.js';
import { ColorChannels, Options, SpecifiedColorChannels } from './typedef.js';
import { ColorChannels, Options, StringColorChannels } from './typedef.js';
import { ColorCommonInstance } from "d3-color";
import { ColorModule } from './modules/color';
import { ColorSwatch } from "@/components/ui/ColorSwatch";
import { Colors } from "./types"
import { Colors } from 'tinyrainbow';
import { CombedTextLayoutError } from 'src/api/errors';
import { ComboBox } from "@/components/ui/combobox";
import { ComboboxMachine } from './combobox-machine.js';
import { Command as CommandPrimitive } from "cmdk";
import { CommandA, CommandC } from "./types";
import { CommandInstance } from './command';
import { CommandInstance, CommandHandler, CommandBuilderDefinition, CommandBuilder, CommandHandlerCallback, FinishCommandHandler } from './command';
import { CommerceModule } from './modules/commerce';
import { CommonOptions, Config, CosmiconfigResult, Loader, LoaderResult, Loaders, LoadersSync, LoaderSync, Options, OptionsSync, PublicExplorer, PublicExplorerBase, PublicExplorerSync, SearchStrategy, Transform, TransformSync } from './types.js';
import { CompanyModule } from './modules/company';
import { CompareKeys } from '@vitest/pretty-format';
import { ComparisonTable } from "@/components/home/ComparisonTable";
import { CompileOptions } from 'degenerator';
import { CompletionFunction } from './completion';
import { CompletionValuationHeader } from "./valuation-complete";
import { Composer } from './compose/composer';
import { ComputePositionConfig } from '@floating-ui/dom';
import { ComputePositionConfig } from '@floating-ui/react-dom';
import { ComputePositionReturn } from '@floating-ui/core';
import { ComputePositionReturn } from '@floating-ui/dom';
import { ComputePositionReturn } from '@floating-ui/react-dom';
import { ComputeTextAlternativeOptions } from "./accessible-name-and-description";
import { ConditionAndFuelInputs } from "@/components/lookup/form-parts/ConditionAndFuelInputs";
import { ConditionAndZipFields } from "./components/ConditionAndZipFields";
import { ConditionAndZipFields } from "./manual/components/ConditionAndZipFields";
import { ConditionAssessmentResult } from "./types.ts";
import { ConditionBadge } from "@/components/ui/condition-badge";
import { ConditionCategory } from "./ConditionCategory";
import { ConditionEvaluationForm } from "@/components/valuation/condition";
import { ConditionFilterOption } from "@/hooks/useDealerValuations";
import { ConditionLevel } from "../types/manualEntry";
import { ConditionLevel } from "@/components/lookup/types/manualEntry";
import { ConditionOption } from "../types";
import { ConditionOption, FactorSlider } from "./FactorSlider";
import { ConditionRatingOption } from "@/types/condition";
import { ConditionRatingOption, ConditionTipsProps } from "./types";
import { ConditionSelector } from "./vehicle-upload/ConditionSelector";
import { ConditionSelectorSegmented } from "@/components/lookup/ConditionSelectorSegmented";
import { ConditionSliderWithTooltip } from "../ConditionSliderWithTooltip";
import { ConditionSliderWithTooltip } from "@/components/valuation/ConditionSliderWithTooltip";
import { ConditionSummary } from "./review/ConditionSummary";
import { ConditionTips } from "./ConditionTips";
import { ConditionTips } from "@/components/valuation/condition/ConditionTips";
import { ConditionTipsProps } from "./types";
import { ConditionValues } from "../types";
import { ConditionValues } from "./condition/types";
import { ConditionValues } from "./types";
import { ConditionValues } from "@/components/valuation/condition/types";
import { ConfidenceScore } from "./scoring/ConfidenceScore";
import { ConfidenceScore } from "@/components/valuation/ConfidenceScore";
import { Config } from '../../types/config'
import { Config, DefaultClassGroupIds, DefaultThemeGroupIds } from './types'
import { Config, ResolvableTo, ThemeConfig } from './types/config'
import { ConfigUtils } from './config-utils'
import { Configuration, DetailedArguments } from "yargs-parser";
import { Connection } from '../cdp/Connection.js';
import { ConnectionOptions as TLSConnectionOptions } from "tls";
import { ConnectionOptions as TLSConnectionOptions, TLSSocket } from "tls";
import { ConnectionOptions, TLSSocket } from "tls";
import { Console } from 'node
import { Container } from "@/components/ui/container";
import { ContainerWithChildren } from './container.js'
import { ContainsNull } from './select-query-parser/types'
import { ContainsNull } from './select-query-parser/types';
import { ContainsNull, GenericRelationship, PostgreSQLTypes } from './types'
import { ContainsNull, GenericRelationship, PostgreSQLTypes } from './types';
import { ContentType, Props as LabelProps, LabelPosition } from './Label';
import { Context } from "../lib/path-visitor";
import { Context } from '../../../core/context';
import { Context } from '../../core/context';
import { Context } from '../core/context';
import { Context } from './context';
import { ContextEvalOptions, EitherFFI, JSValue, PromiseExecutor, QuickJSHandle } from "./types";
import { ContextEvalOptions, QuickJSHandle } from "./types";
import { ContextOptions } from './core/context';
import { ContextOptions, EitherFFI, JSModuleLoader, JSModuleNormalizer, QuickJSHandle } from "./types";
import { ContextOptions, EitherFFI, JSModuleLoader, RuntimeOptions, RuntimeOptionsBase } from "./types";
import { ContextOptions, JSModuleLoaderAsync, JSModuleNormalizerAsync } from "./types";
import { ContextualKeyword } from "../tokenizer/keywords";
import { ContextualKeyword } from "./keywords";
import { Control } from './form';
import { Control, DeepPartialSkipArrayKey, FieldPath, FieldPathValue, FieldPathValues, FieldValues } from './types';
import { Control, FieldError, FieldPath, FieldPathValue, FieldValues, Noop, RefCallBack, UseFormStateReturn } from './';
import { Control, FieldValues, FormState, ReadFormState } from '../types';
import { ControllerProps, FieldPath, FieldValues } from './types';
import { Cookie } from './cookie';
import { Cookie, ParseCookieOptions } from './cookie';
import { Coordinate } from '../util/types';
import { Coordinate, AxisType, Size } from './types';
import { Coordinate, CartesianViewBox, AllowInDimension } from '../types';
import { Coordinate, ChartOffset, GeometrySector } from './types';
import { Coords } from '@floating-ui/core';
import { Coords } from '@floating-ui/dom';
import { Coords } from '@floating-ui/react-dom';
import { Coords } from '@floating-ui/utils';
import { Copy, Link, Mail, Users } from "lucide-react";
import { CountableTimeInterval, TimeInterval } from "d3-time";
import { CounterType } from './Counter';
import { CounterType } from './Counter.js';
import { Coverage } from '../cdp/Coverage.js';
import { Coverage } from './Coverage.js';
import { CoverageMap, CoverageSummary, FileCoverage } from "istanbul-lib-coverage";
import { CreateOptionsType, LooseOptionsType } from './Options';
import { CreateOptionsType, LooseOptionsType } from './Options.js';
import { CreditCard, Database, Eye, FileText, Trash2 } from "lucide-react";
import { CreditCard, Plus, Trash2 } from "lucide-react";
import { CriteriaMode } from './form';
import { CriteriaMode, FieldName, FieldRefs, FieldValues, InternalFieldName } from '../types';
import { CssSearch } from './CssSearch';
import { CssSyntaxError, ProcessOptions } from './postcss.js'
import { CurveFactory } from 'victory-vendor/d3-shape';
import { CurveType, Point as CurvePoint } from '../shape/Curve';
import { CurveType, Props as CurveProps, Point as CurvePoint } from '../shape/Curve';
import { CustomComponents } from 'types/DayPickerBase';
import { CustomEmoji } from '../../config/customEmojiConfig';
import { CustomEmoji } from '../../config/customEmojiConfig';
import { CustomEmoji } from '../config/customEmojiConfig';
import { CustomEmoji } from '../config/customEmojiConfig';
import { CustomEmoji } from './customEmojiConfig';
import { CustomEmoji } from './customEmojiConfig';
import { CustomFontEmbedder, PDFHexString, PDFRef, StandardFontEmbedder } from "../core";
import { CustomFontEmbedder, PDFHexString, PDFRef, StandardFontEmbedder } from "../core";
import { CustomModifiers, DayModifiers } from 'types/Modifiers';
import { CustomModifiers, InternalModifiers, Modifiers } from 'types/Modifiers';
import { CwdError } from './cwd-error.js';
import { D as DebuggerOptions, c as DepsHandlingOptions, V as ViteNodeServerOptions, F as FetchResult, d as ViteNodeResolveId } from './index.d-CWZbpOcv.js';
import { D as DefaultBodyType, R as RequestHandler, f as RequestHandlerDefaultInfo, a as ResponseResolver, c as RequestHandlerOptions } from './HttpResponse-DQOloMJy.js';
import { D as DefaultBodyType, a as ResponseResolver, c as RequestHandlerOptions } from './HttpResponse-DQOloMJy.js';
import { D as DiffOptions } from './types.d-BCElaP-c.js';
import { D3Scale } from '../util/types';
import { D3Scale, DataKey } from '../util/types';
import { D3Scale, LegendType, TooltipType, AnimationTiming, ChartOffset, Coordinate, DataKey, TickItem, AnimationDuration } from '../util/types';
import { D3Scale, LegendType, TooltipType, AnimationTiming, ChartOffset, DataKey, TickItem, AnimationDuration, ActiveShape } from '../util/types';
import { D3Scale, TooltipType, LegendType, AnimationTiming, ChartOffset, DataKey, TickItem, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';
import { DATA_ATTRIBUTES } from "./constants.js";
import { DEFAULT_HEADERS } from '../lib/constants'
import { DEFAULT_HEADERS } from './constants'
import { DEFAULT_LABEL_HEIGHT } from '../components/main/PickerMain';
import { DEFAULT_REACTIONS } from '../components/Reactions/DEFAULT_REACTIONS';
import { DEFAULT_START_OPTIONS } from './start/utils/prepareStartHandler'
import { DEFAULT_TIMEOUT } from '../lib/constants'
import { DOCUMENT_MODE } from './html.js';
import { DOCUMENT_MODE, type NS } from '../common/html.js';
import { DOMAttributes, PressEvents, RefObject, FocusableElement, FocusEvents, KeyboardEvents, FocusableDOMProps, FocusableProps, HoverEvents, MoveEvents, ScrollEvents, LongPressEvent } from "@react-types/shared";
import { DOMException, EventInit } from './patch'
import { DOMParser } from './types';
import { DataEmoji } from '../../dataUtils/DataTypes';
import { DataEmoji } from '../../dataUtils/DataTypes';
import { DataEmoji } from '../dataUtils/DataTypes';
import { DataEmoji } from '../dataUtils/DataTypes';
import { DataEmoji } from './DataTypes';
import { DataEmoji } from './DataTypes';
import { DataEmoji, DataEmojis, EmojiProperties, WithName } from './DataTypes';
import { DataEmoji, DataEmojis, WithName } from './DataTypes';
import { DataKey, LegendType, LayoutType, PresentationAttributesAdaptChildEvent } from '../util/types';
import { DataKey, ViewBox } from '../util/types';
import { DataRouterContext, DataRouterStateContext, LocationContext, NavigationContext, RouteContext } from "./lib/context";
import { Database, RefreshCw } from "lucide-react";
import { DatabaseModule } from './modules/database';
import { DatatypeModule } from './modules/datatype';
import { DateModule } from './modules/date';
import { DateRange } from './Matchers';
import { DateRange } from 'index';
import { DateRange } from 'types/Matchers';
import { Day } from 'components/Day';
import { Day, DayProps } from './Day';
import { DayClickEventHandler } from 'types/EventHandlers';
import { DayContent } from 'components/DayContent';
import { DayContent, DayContentProps } from 'components/DayContent';
import { DayContentProps } from 'components/DayContent';
import { DayLabel } from 'types/Labels';
import { DayModifiers } from 'index';
import { DayModifiers, InternalModifier, Modifiers } from 'types/Modifiers';
import { DayModifiers, ModifiersClassNames } from 'types/Modifiers';
import { DayPicker } from "react-day-picker";
import { DayPickerBase } from './DayPickerBase';
import { DayPickerBase } from 'types/DayPickerBase';
import { DayPickerBase, DaySelectionMode } from 'types/DayPickerBase';
import { DayPickerContextValue } from 'contexts/DayPicker';
import { DayPickerContextValue, useDayPicker } from 'contexts/DayPicker';
import { DayPickerDefaultProps } from 'types/DayPickerDefault';
import { DayPickerMultipleProps } from 'types/DayPickerMultiple';
import { DayPickerProps } from 'DayPicker';
import { DayPickerProvider } from './DayPicker';
import { DayPickerRangeProps } from 'types/DayPickerRange';
import { DayPickerRangeProps, isDayPickerRange } from 'types/DayPickerRange';
import { DayPickerSingleProps } from 'types/DayPickerSingle';
import { DayPickerSingleProps, isDayPickerSingle } from 'types/DayPickerSingle';
import { DayProps } from 'components/Day';
import { DaySelectionMode } from 'types/DayPickerBase';
import { DealerInventoryList } from "@/components/dealer/inventory/DealerInventoryList";
import { DealerInventoryTable } from "./DealerInventoryTable";
import { DealerInventoryTable } from "@/components/dealer/DealerInventoryTable";
import { DealerMessagesLayout } from "@/components/dealer-messages/DealerMessagesLayout";
import { DealerOffer } from "@/hooks/useDealerOfferComparison";
import { DealerOfferCard } from "./DealerOfferCard";
import { DealerOfferForm } from "@/components/dealer/DealerOfferForm";
import { DealerOffersList } from "@/components/dealer/DealerOffersList";
import { DealerOffersTab } from "./DealerOffersTab";
import { DealerSignupForm } from "@/components/dealer/DealerSignupForm";
import { DealerVehicle } from "@/types/dealerVehicle";
import { DealerVehicle } from "@/types/vehicle"; // Updated import
import { DealerVehicle, DealerVehicleFormData } from "@/types/dealerVehicle";
import { DealerVehicle, DealerVehicleStatus } from "@/types/dealerVehicle";
import { DealerVehicleForm } from "@/components/dealer/forms/DealerVehicleForm";
import { DealerVehicleFormData } from "@/types/dealerVehicle";
import { DealerVehicleFormData } from "@/types/vehicle";
import { Debugger } from 'debug';
import { DecodedVehicleInfo } from "@/types/vehicle";
import { DecodedVehicleInfo } from "@/types/vehicle"; // ✅ Assuming you have this
import { DecodingMode } from "./decode.js";
import { DeepMap, DeepPartial, Noop } from './utils';
import { DeepPartial, FieldValues, Names } from '../types';
import { Def, Plugin } from "./types";
import { DefaultColors } from './types/generated/colors'
import { DefaultError, InfiniteData, QueryKey, DataTag, OmitKeyof, SkipToken, InitialDataFunction } from '@tanstack/query-core';
import { DefaultError, InfiniteData, QueryKey, QueryClient } from '@tanstack/query-core';
import { DefaultError, QueryClient } from '@tanstack/query-core';
import { DefaultError, QueryKey, FetchInfiniteQueryOptions, QueryClient } from '@tanstack/query-core';
import { DefaultError, QueryKey, FetchQueryOptions, QueryClient } from '@tanstack/query-core';
import { DefaultError, QueryKey, Query, DefaultedQueryObserverOptions, QueryObserverResult, QueryObserver } from '@tanstack/query-core';
import { DefaultError, QueryKey, QueryClient } from '@tanstack/query-core';
import { DefaultError, QueryKey, QueryClient, NoInfer } from '@tanstack/query-core';
import { DefaultError, QueryKey, QueryFunction, InitialDataFunction, DataTag, OmitKeyof, SkipToken } from '@tanstack/query-core';
import { DefaultError, QueryObserverResult, DefinedQueryObserverResult, QueryKey, OmitKeyof, QueryObserverOptions, SkipToken, DistributiveOmit, InfiniteQueryObserverOptions, DefinedInfiniteQueryObserverResult, MutationObserverOptions, Override, MutationObserverResult, MutateFunction, InfiniteQueryObserverResult } from '@tanstack/query-core';
import { DefaultMap } from '../utils/default-map.js';
import { DefaultRequestMultipartBody } from '../../handlers/RequestHandler'
import { DefaultTheme } from './types/generated/default-theme'
import { DefaultThemeGroupIds, NoInfer, ThemeGetter, ThemeObject } from './types'
import { Deferred } from '../../../utils/Deferred.js';
import { Deferred } from '../util/Deferred.js';
import { Deferred } from './lib/helpers';
import { DeferredPromise } from '@open-draft/deferred-promise'
import { DeferredPromise } from '@open-draft/deferred-promise';
import { DefinedInitialDataInfiniteOptions, UndefinedInitialDataInfiniteOptions } from './infiniteQueryOptions.js';
import { DefinedInitialDataOptions, UndefinedInitialDataOptions } from './queryOptions.js';
import { DefinedUseInfiniteQueryResult, UseInfiniteQueryResult, UseInfiniteQueryOptions } from './types.js';
import { DefinedUseQueryResult, UseQueryResult, UseQueryOptions } from './types.js';
import { DefinitionBase } from './DefinitionBase';
import { DefinitionType } from './DefinitionType';
import { DeleteConfirmationDialog } from "./DeleteConfirmationDialog";
import { Derivable } from '@floating-ui/dom';
import { Derivable } from '@floating-ui/react-dom';
import { DesignCard } from "@/components/ui/design-system";
import { DesignCard, SectionHeader } from "../ui/design-system";
import { DetailedArguments } from 'yargs-parser';
import { DetailedConditionRating } from "@/components/premium/condition/DetailedConditionRating";
import { DetectOverflowOptions } from '@floating-ui/dom';
import { DetectOverflowOptions } from '@floating-ui/react-dom';
import { DeviceRequestPromptManager } from './DeviceRequestPrompt.js';
import { Dialog } from '../api/Dialog.js';
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Dictionary } from './common-types';
import { DiffOptions } from '@vitest/utils/diff';
import { DimensionToken, NumberValueToken } from '../syntax/tokenizer';
import { Dimensions } from '@floating-ui/core';
import { Dimensions } from '@floating-ui/dom';
import { Dimensions } from '@floating-ui/react-dom';
import { Dimensions } from '@floating-ui/utils';
import { DirectOptions } from './directApi';
import { Direction } from "./types.js";
import { Direction, ResizeEvent } from "./types.js";
import { DirectiveLocation } from '../language/directiveLocation';
import { Directives } from '../doc/directives';
import { Directives } from './directives';
import { Dirent } from '@nodelib/fs.walk';
import { DismissableLayer } from '@radix-ui/react-dismissable-layer';
import { Dispatch, SetStateAction, useState } from 'react';
import { Disposable } from './utils/internal/Disposable'
import { Disposable } from './utils/internal/Disposable.js';
import { Disposable, Lifetime, Scope } from "./lifetime";
import { DisposableStack, disposeSymbol } from '../../util/disposable.js';
import { Document } from '../doc/Document';
import { Document } from './doc/Document';
import { DocumentNode } from 'graphql';
import { DollarSign } from "lucide-react";
import { DollarSign, Loader2 } from "lucide-react";
import { DollarSign, Loader2, MessageSquare } from "lucide-react";
import { DomSerializerOptions } from "dom-serializer";
import { Dot } from "lucide-react";
import { DotProps } from '..';
import { Download } from "lucide-react";
import { Download, ExternalLink } from "lucide-react";
import { Download, ExternalLink, FileBarChart, Loader2 } from "lucide-react";
import { Download, FileText, Mail } from "lucide-react";
import { Download, Loader2 } from "lucide-react";
import { Download, Loader2, Lock } from "lucide-react";
import { Download, Lock } from "lucide-react";
import { Download, Lock, Mail } from "lucide-react";
import { DownloadPDFButton } from "@/components/ui/DownloadPDFButton";
import { Draft } from 'immer';
import { DragHandlerOptionType } from './DragHandler';
import { DragHandlerOptionType } from './DragHandler.js';
import { DragHandlerType } from './DragHandler';
import { DragHandlerType } from './DragHandler.js';
import { DragTrackerType, PointerEventType } from './DragTracker';
import { DragTrackerType, PointerEventType } from './DragTracker.js';
import { Drawer as DrawerPrimitive } from "vaul";
import { DrivingBehaviorSummary } from "./review/DrivingBehaviorSummary";
import { Dropdown } from 'components/Dropdown';
import { Dropdown, DropdownProps } from 'components/Dropdown';
import { DropdownProps } from 'components/Dropdown';
import { Droplets, Loader2 } from "lucide-react";
import { Duplex } from 'node
import { Duplex } from 'stream'
import { Duplex } from 'stream';
import { Duplex, DuplexOptions } from "stream";
import { Duplex, DuplexOptions } from 'node
import { Duplex, Readable, Writable } from 'stream'
import { E as DefaultError, a5 as InfiniteData, F as QueryKey, c as QueryObserver, aN as InfiniteQueryObserverResult, b as QueryClient, ag as InfiniteQueryObserverOptions, ah as DefaultedInfiniteQueryObserverOptions, as as FetchNextPageOptions, at as FetchPreviousPageOptions, w as Query } from './hydration-BaHDIfRR.js';
import { E as EncodedSourceMap } from './trace-mapping.d-DLVdEqOp.js';
import { E as Environment } from './chunks/environment.d.Dmw5ulng.js';
import { ERR, type ParserError, type ParserErrorHandler } from '../common/error-codes.js';
import { ERR, type ParserErrorHandler } from '../common/error-codes.js';
import { ESLint, Rule } from "./index.js";
import { ESLintScopeVariable } from './ESLintScopeVariable';
import { ESLintUtils } from '@typescript-eslint/utils';
import { Easing, EasingFunction, Point } from 'motion-utils';
import { Easing, EasingFunction, Point, Axis, Box } from 'motion-utils';
import { Easing, Point, BoundingBox, Box } from 'motion-utils';
import { Easing, Point, TransformPoint, Box, Axis, Delta, BoundingBox } from 'motion-utils';
import { Edit } from './delta';
import { Edit, FileText, Trash2 } from "lucide-react";
import { EditableInputOrTextarea } from '../edit/isEditable';
import { Effect } from 'effect';
import { EffectTarget, IElementEffect } from './effects';
import { EitherModule } from "./emscripten-types";
import { Element } from './Document';
import { Element, AnyNode, ParentNode } from "domhandler";
import { ElementContainer } from '../../dom/element-container';
import { ElementContainer } from '../dom/element-container';
import { ElementContainer } from '../element-container';
import { ElementContainer } from './element-container';
import { ElementContext } from '@floating-ui/core';
import { ElementContext } from '@floating-ui/dom';
import { ElementContext } from '@floating-ui/react-dom';
import { ElementHandle, type AutofillData } from '../api/ElementHandle.js';
import { ElementPaint, StackingContext } from '../stacking-context';
import { ElementRects } from '@floating-ui/core';
import { ElementRects } from '@floating-ui/dom';
import { ElementRects } from '@floating-ui/react-dom';
import { ElementRects } from '@floating-ui/utils';
import { ElementRef } from '../components/context/ElementRefContext';
import { ElementRef } from '../components/context/ElementRefContext';
import { ElementRefContextProvider } from './components/context/ElementRefContext';
import { ElementType } from "domelementtype";
import { Elements } from '@floating-ui/dom';
import { Elements } from '@floating-ui/react-dom';
import { EmbeddedFileOptions } from "../core/embedders/FileEmbedder";
import { EmbeddedFileOptions } from "../core/embedders/FileEmbedder";
import { EmbeddedFileOptions } from 'src/core/embedders/FileEmbedder';
import { EmblaCarouselType } from './EmblaCarousel';
import { EmblaCarouselType } from './EmblaCarousel.js';
import { EmblaCarouselType, EmblaOptionsType, EmblaPluginType } from 'embla-carousel';
import { EmblaOptionsType } from './Options';
import { EmblaOptionsType } from './Options.js';
import { EmblaPluginType } from 'embla-carousel';
import { EmblaPluginsType, EmblaPluginType } from './Plugins';
import { EmblaPluginsType, EmblaPluginType } from './Plugins.js';
import { Emitter } from 'strict-event-emitter'
import { Emitter } from 'strict-event-emitter';
import { Emitter, EventMap } from 'strict-event-emitter'
import { Emitter, Listener } from 'strict-event-emitter'
import { Emitter, Listener } from 'strict-event-emitter';
import { EmojiCategory } from './EmojiCategory';
import { EmojiClickData, EmojiStyle, SkinTonePickerLocation, SkinTones, SuggestionMode, Theme } from '../types/exposedTypes';
import { EmojiClickData, SkinTones, EmojiStyle } from '../types/exposedTypes';
import { EmojiImg } from './EmojiImg';
import { EmojiList } from './EmojiList';
import { EmojiProperties } from '../dataUtils/DataTypes';
import { EmojiProperties } from '../dataUtils/DataTypes';
import { EmojiStyle } from '../../types/exposedTypes';
import { EmojiStyle } from '../../types/exposedTypes';
import { EmojiStyle } from '../types/exposedTypes';
import { EmojiStyle } from '../types/exposedTypes';
import { EmojiStyle, SkinTones } from '../types/exposedTypes';
import { EmojiStyle, SkinTones } from '../types/exposedTypes';
import { EmojiVariationPicker } from './EmojiVariationPicker';
import { EmptyObject } from '../types';
import { EmptyState } from "../inventory/EmptyState";
import { EmptyState } from "./EmptyState";
import { EmptyState } from "./valuation-history/EmptyState";
import { EngineType } from './Engine';
import { EngineType } from './Engine.js';
import { EnhancedErrorBoundary } from "@/components/common/EnhancedErrorBoundary";
import { EnhancedHeroSection } from "@/components/home/EnhancedHeroSection";
import { EnhancedHomePage } from "@/components/home/EnhancedHomePage";
import { EnhancedManualEntrySchema } from "@/utils/validation/enhanced-validation";
import { EnhancedPremiumFeaturesTabs } from "@/components/premium/features/EnhancedPremiumFeaturesTabs";
import { EnhancedTestimonialsCarousel } from "./EnhancedTestimonialsCarousel";
import { EnhancedValuationParams, ValuationParams } from "./types";
import { EntityCard } from "@/components/ui/entity-card";
import { EntityDecoder } from 'entities/decode';
import { Entry as EntryInternal, FileSystemAdapter as FileSystemAdapterInternal, Pattern as PatternInternal } from './types';
import { Entry, EntryItem, ReaderOptions } from '../types';
import { Entry, ErrnoException, Pattern, ReaderOptions } from '../types';
import { Entry, Pattern, ReaderOptions } from '../types';
import { Entry, ReaderOptions, Pattern } from '../types';
import { Entry, ZipFile } from 'yauzl';
import { EntryFilterFunction, MicromatchOptions, Pattern } from '../../types';
import { EntryTransformerFunction } from '../../types';
import { EntryTypeName } from './types.js';
import { EpaMpgResult } from "@/hooks/useEpaMpg";
import { EpaMpgTip } from "../EpaMpgTip";
import { EquipmentSelector } from "@/components/valuation/equipment/EquipmentSelector";
import { EquipmentSummary } from "../valuation/equipment/EquipmentSummary";
import { ErrnoException } from '../types';
import { ErrorBoundary } from "../../ErrorBoundary";
import { ErrorBoundary } from "@/components/ErrorBoundary";
import { ErrorCode } from './error-codes'
import { ErrorCode } from './error-codes';
import { ErrorCode } from './generated/webdriver-bidi.js';
import { ErrorFilterFunction } from '../../types';
import { ErrorInfo } from "./client";
import { ErrorMessage } from "./ErrorMessage";
import { ErrorObject } from './types';
import { ErrorObject, FieldErrorWithPath } from './types';
import { ErrorOption, FieldError, FieldErrors } from './errors';
import { ErrorState } from "@/components/premium/common/ErrorState";
import { ErrorWithDiff, Awaitable } from '@vitest/utils';
import { ErrorWithDiff, ParsedStack } from './types.js';
import { EventEmitter as EE } from 'events';
import { EventEmitter } from "events";
import { EventEmitter } from "https
import { EventEmitter } from '../../../utils/EventEmitter.js';
import { EventEmitter } from '../../common/EventEmitter.js';
import { EventEmitter } from '../common/EventEmitter.js';
import { EventEmitter } from '../utils/EventEmitter.js';
import { EventEmitter } from 'events'
import { EventEmitter } from 'events';
import { EventEmitter } from 'node
import { EventEmitter, type EventType } from '../common/EventEmitter.js';
import { EventEmitter, type EventsWithWildcard, type EventType } from '../common/EventEmitter.js';
import { EventEmitterAsyncResource } from 'node
import { EventHandler } from './addEventListener';
import { EventHandlerType } from './EventHandler';
import { EventHandlerType } from './EventHandler.js';
import { EventMap, Emitter } from 'strict-event-emitter'
import { EventMap, Emitter } from 'strict-event-emitter';
import { EventMap, Listener } from 'strict-event-emitter'
import { EventMap, Listener } from 'strict-event-emitter';
import { EventName } from 'hooks/useDayEventHandlers';
import { EventPolyfill } from '../polyfills/EventPolyfill'
import { EventPolyfill } from './EventPolyfill'
import { EventStoreType } from './EventStore';
import { EventStoreType } from './EventStore.js';
import { EventType } from '../types';
import { EventType } from './events';
import { EventType } from './types';
import { EventType, EventTypeInit } from './types';
import { EventType, PointerCoords } from './types';
import { ExpectStatic } from '@vitest/expect';
import { Explanation } from "./sections/Explanation";
import { ExplanationRequest } from "./types.ts";
import { ExplanationRequest, ExplanationResponse } from "./types.ts";
import { Expose, Type } from 'class-transformer';
import { Expression, Program, Statement } from "@babel/types";
import { ExternalLink } from "lucide-react";
import { Eye, EyeOff, KeyRound, Loader2, Mail } from "lucide-react";
import { Eye, EyeOff, KeyRound, Loader2, Mail, User } from "lucide-react";
import { F as FakeTimerInstallOpts } from './chunks/config.d.UqE-KR0o.js';
import { F as FeatureBundle, M as MotionProps, a as MotionConfigContext, H as HTMLMotionProps, b as HTMLElements, G as GenericKeyframesTarget, D as DOMMotionComponents, c as MotionComponentProps, d as HTMLMotionComponents, S as SVGMotionComponents, E as EventInfo, e as FeaturePackages, A as AnimationControls, V as VisualElement, f as AnimationDefinition, g as VisualElementAnimationOptions, I as IProjectionNode, R as ResolvedValues, h as HTMLRenderState } from '../types.d-CtuPurYT.js';
import { F as FetchResult, H as HMRLogger } from './types.d-aGj9QkWt.js';
import { F as File, T as Task, a as Test, S as Suite, K as TaskResultPack, y as TaskEventPack, M as TestContext, s as SequenceHooks, t as SequenceSetupFiles } from './tasks.d-hsdzc98-.js';
import { F as QueryKey, _ as QueryFunctionContext, W as QueryFunction } from './hydration-BaHDIfRR.js';
import { FC } from 'react';
import { FN_VAR, SYN_FN_CALC, SYN_FN_VAR, VAL_SPEC } from './constant';
import { FSOption, Path, PathScurry } from 'path-scurry';
import { FTPContext, FTPResponse } from "./FtpContext";
import { FactorSlider } from "../FactorSlider";
import { Faker } from '../faker';
import { FeatureBenefitsList } from "./cards/FeatureBenefitsList";
import { FeatureCard } from "./FeatureCard";
import { FeatureCards } from "./hero/FeatureCards";
import { FeatureCards } from "@/components/premium/hero/FeatureCards";
import { FeatureCheck } from "./FeatureCheck";
import { FeatureHeader } from "./cards/FeatureHeader";
import { FeatureIcon } from "./cards/FeatureIcon";
import { FeatureOption } from "@/types/premium-valuation";
import { FeatureValue } from "./types";
import { FeaturesOverview } from "@/components/home/FeaturesOverview";
import { FeaturesSummary } from "./review/FeaturesSummary";
import { Fetch } from '../lib/fetch';
import { Fetch } from './fetch'
import { Fetch } from './fetch';
import { Fetch } from './lib/fetch'
import { Fetch } from './lib/fetch';
import { Fetch } from './types'
import { Fetch } from './types';
import { Fetch, FunctionsResponse, FunctionInvokeOptions, FunctionRegion } from './types';
import { Fetch, GenericSchema } from './types'
import { Fetch, GenericSchema } from './types';
import { Fetch, GenericSchema, GenericTable, GenericView } from './types'
import { Fetch, GenericSchema, GenericTable, GenericView } from './types';
import { Fetch, GenericSchema, SupabaseClientOptions } from './lib/types';
import { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'
import { Fetch, get, head, post, remove } from '../lib/fetch'
import { Fetch, get, post, put, remove } from '../lib/fetch'
import { FetchInterceptor } from '../interceptors/fetch'
import { FetchInterceptor } from '../interceptors/fetch/index.js';
import { FetchInterceptor } from '@mswjs/interceptors/fetch'
import { FetchParameters } from './types'
import { FetchParameters } from './types';
import { FetchResponse } from '../../../utils/fetchUtils'
import { FetchResponse } from '../../utils/fetchUtils'
import { FetchResponse } from './utils/fetchUtils'
import { FetchResponse } from '@mswjs/interceptors'
import { FetchResponse } from '@mswjs/interceptors';
import { Field } from '../types';
import { Field, FieldName, FieldValues, InternalFieldName } from './fields';
import { Field, FieldValues, InternalFieldErrors, InternalNameSet } from '../types';
import { Field, InternalFieldName } from 'react-hook-form';
import { Field, NativeFieldValue } from '../types';
import { FieldArray } from './fieldArray';
import { FieldArrayMethodProps, InternalFieldName } from '../types';
import { FieldArrayPath, FieldArrayPathValue } from './path';
import { FieldArrayPath, FieldPath, FieldPathValue, FieldPathValues } from './path';
import { FieldArrayPath, FieldValues, UseFieldArrayProps, UseFieldArrayReturn } from './types';
import { FieldElement } from '../types';
import { FieldError } from 'react-hook-form';
import { FieldError, FieldErrors } from 'react-hook-form';
import { FieldError, FieldErrors, FieldValues } from '../types';
import { FieldError, FieldErrors, FieldValues, InternalFieldName } from '../types';
import { FieldError, FieldErrors, appendErrors } from 'react-hook-form';
import { FieldError, FieldValues, Resolver } from 'react-hook-form';
import { FieldError, FieldValues, ResolverOptions, ResolverResult } from 'react-hook-form';
import { FieldError, FieldValues, appendErrors } from 'react-hook-form';
import { FieldError, Ref, ValidateResult } from '../types';
import { FieldError, appendErrors } from 'react-hook-form';
import { FieldErrors } from './errors';
import { FieldErrors } from 'react-hook-form';
import { FieldErrors, FieldValues, ResolverOptions } from 'react-hook-form';
import { FieldName, FieldRefs, FieldValue, FieldValues, InternalFieldName } from './fields';
import { FieldName, FieldValues, ResolverOptions, ResolverResult } from 'react-hook-form';
import { FieldPath, FieldPathValue } from './path';
import { FieldPath, FieldValues } from '../types';
import { FieldPath, FieldValues, UseControllerProps, UseControllerReturn } from './types';
import { FieldRefs, InternalFieldName, Ref } from '../types';
import { FieldValidation, ValidationRules } from "@/types/premium-valuation";
import { FieldValues } from '../fields';
import { FieldValues } from '../types';
import { FieldValues } from './fields';
import { FieldValues, FormProps } from './types';
import { FieldValues, FormProviderProps, UseFormReturn } from './types';
import { FieldValues, FormState, InternalFieldName, ReadFormState } from '../types';
import { FieldValues, InternalFieldName, Ref } from './fields';
import { FieldValues, Resolver } from '../types';
import { FieldValues, Resolver } from 'react-hook-form';
import { FieldValues, ResolverOptions, ResolverResult } from 'react-hook-form';
import { FieldValues, UseFormProps, UseFormReturn } from '../types';
import { FieldValues, UseFormProps, UseFormReturn } from './types';
import { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';
import { File as File$1, TaskResultPack as TaskResultPack$1, TaskEventPack, TaskPopulated, Suite as Suite$1, Test as Test$1, Custom as Custom$1, Task as Task$1, TaskBase as TaskBase$1, TaskResult as TaskResult$1, DoneCallback as DoneCallback$1, RuntimeContext as RuntimeContext$1, SuiteHooks as SuiteHooks$1, SequenceHooks as SequenceHooks$1, SequenceSetupFiles as SequenceSetupFiles$1 } from '@vitest/runner';
import { File } from "../index";
import { File } from './file'
import { File, Expression } from '@babel/types';
import { File, TaskResultPack, TaskEventPack, CancelReason, FileSpecification, Task } from '@vitest/runner';
import { File, Upload } from "lucide-react";
import { FileChooser } from '../common/FileChooser.js';
import { FileDown } from "lucide-react";
import { FileDown, Loader2 } from "lucide-react";
import { FileDropzone } from "./FileDropzone";
import { FileInfo } from "./FileInfo";
import { FileObject, FileOptions, SearchOptions, FetchParameters, TransformOptions, DestinationOptions, FileObjectV2, Camelize } from '../lib/types';
import { FilePosition } from './input.js'
import { FileSearch } from "lucide-react";
import { FileSpecification, VitestRunner } from './types.js';
import { FileSystemAdapter, Pattern } from './types';
import { FileText } from "lucide-react";
import { FileText, Info } from "lucide-react";
import { FileText, Loader2 } from "lucide-react";
import { FileWithPath } from "file-selector";
import { FileWithPath } from './file';
import { FileX } from "lucide-react";
import { Filter } from "lucide-react";
import { Filter, X } from "lucide-react";
import { FilterDict } from '../../hooks/useFilter';
import { FilterDict } from '../../hooks/useFilter';
import { FilterPredicate, Options } from "../../types";
import { FilterPredicate, Options, Counts } from "../../types";
import { FilteredSvgElementType } from './types';
import { FinanceModule } from './modules/finance';
import { FindProxyForURL, PacResolverOptions } from 'pac-resolver';
import { FindWorker } from '../../glossary'
import { Flame, Shield, Star, Zap } from "lucide-react";
import { FlipOptions } from '@floating-ui/dom';
import { FlipOptions } from '@floating-ui/react-dom';
import { FloatingElement } from '@floating-ui/dom';
import { FloatingElement } from '@floating-ui/react-dom';
import { Focus } from '../../utils/calculate-active-index.js';
import { FocusContextValue } from 'contexts/Focus';
import { FocusContextValue, useFocusContext } from 'contexts/Focus';
import { FocusHandlerOptionType } from './SlideFocus';
import { FocusHandlerOptionType } from './SlideFocus.js';
import { FocusProvider } from './Focus';
import { FocusScope } from '@radix-ui/react-focus-scope';
import { FocusableElement, RefObject, DOMAttributes } from "@react-types/shared";
import { Font } from "../../types/fontkit";
import { Font } from "../../types/fontkit";
import { Font } from 'src/types/fontkit';
import { Font, FontNames, EncodingType } from '@pdf-lib/standard-fonts';
import { Font, FontNames, EncodingType } from '@pdf-lib/standard-fonts';
import { Font, Fontkit, Glyph, Subset, TypeFeatures } from 'src/types/fontkit';
import { Font, Fontkit, Glyph, TypeFeatures } from "../../types/fontkit";
import { Font, Fontkit, Glyph, TypeFeatures } from "../../types/fontkit";
import { Font, Fontkit, Glyph, TypeFeatures } from 'src/types/fontkit';
import { FontNames } from '@pdf-lib/standard-fonts';
import { FontNames } from '@pdf-lib/standard-fonts';
import { Fontkit } from "../types/fontkit";
import { Fontkit } from "../types/fontkit";
import { Fontkit } from 'src/types/fontkit';
import { Fontkit, Glyph, TypeFeatures } from "../../types/fontkit";
import { Fontkit, Glyph, TypeFeatures } from "../../types/fontkit";
import { Footer } from "./Footer";
import { Footer } from "@/components/layout/Footer";
import { Footer } from './Footer';
import { Footer } from 'components/Footer';
import { FooterProps } from 'components/Footer';
import { ForecastChart } from "./forecast/ForecastChart";
import { ForecastError } from "./forecast/ForecastError";
import { ForecastMetrics } from "./ForecastMetrics";
import { ForecastSummary } from "./forecast/ForecastSummary";
import { ForecastTrendIndicator } from "./ForecastTrendIndicator";
import { ForgotEmailForm } from "./forms/ForgotEmailForm";
import { ForgotPasswordForm } from "./forms/ForgotPasswordForm";
import { Fork } from "../types";
import { Fork, Omit } from "../types";
import { Form } from "@/components/ui/form";
import { FormData } from "@/types/premium-valuation";
import { FormData } from './formdata'
import { FormValidationError } from "@/components/premium/common/FormValidationError";
import { FormattedGraphicalItem } from './ChartUtils';
import { Formatter } from 'tinyrainbow';
import { Formatters } from './Formatters';
import { Formatters } from 'types/Formatters';
import { FormattingElementList } from './formatting-element-list.js';
import { ForwardRefExoticComponent } from 'react';
import { ForwardedRef, HTMLAttributes, PropsWithChildren, ReactElement } from "react";
import { Frame } from '../api/Frame.js';
import { Frame, type GoToOptions, type WaitForOptions } from '../api/Frame.js';
import { FrameTree } from './FrameTree.js';
import { FunctionNode } from '@csstools/css-parser-algorithms';
import { FunctionsClient } from '@supabase/functions-js'
import { FunctionsClient } from '@supabase/functions-js';
import { FunnelProps, FunnelTrapezoidItem } from '../numberAxis/Funnel';
import { GLOBSTAR } from 'minimatch';
import { GMT } from './index';
import { GMT, Weekday } from './index';
import { GapMode } from './utils';
import { GenMapping } from '@jridgewell/gen-mapping';
import { GeneratorOptions } from "@babel/generator";
import { GenericSchema } from './types'
import { GenericSchema } from './types';
import { GenericSchema, CheckMatchingArrayTypes } from './types'
import { GenericSchema, CheckMatchingArrayTypes } from './types';
import { GenericTable } from '../types'
import { GenericTable } from '../types';
import { GeometrySector } from '../util/types';
import { GetEmojiUrl } from '../components/emoji/BaseEmojiProps';
import { GetEmojiUrl } from '../components/emoji/BaseEmojiProps';
import { GetEmojiUrl } from './BaseEmojiProps';
import { GetEmojiUrl } from './BaseEmojiProps';
import { GetResult } from './select-query-parser/result'
import { GetResult } from './select-query-parser/result';
import { GetUriProtocol } from '.';
import { GetUriProtocol } from './';
import { GitModule } from './modules/git';
import { Glob } from './glob.js';
import { GlobOptions } from './glob.js';
import { GlobWalkerOpts } from './walker.js';
import { Glyph } from "../../types/fontkit";
import { Glyph } from "../../types/fontkit";
import { Glyph } from 'src/types/fontkit';
import { GradientCorner } from './image';
import { GraphQLEnumType, GraphQLObjectType } from './definition';
import { GraphQLError } from '../error/GraphQLError';
import { GraphQLError } from './GraphQLError';
import { GraphQLHandler } from '../../handlers/GraphQLHandler'
import { GraphQLList, GraphQLNonNull } from '../type/definition';
import { GraphQLScalarType } from './definition';
import { GraphQLSchema } from '../type/schema';
import { GraphicalItem } from '../chart/generateCategoricalChart';
import { GripVertical } from "lucide-react";
import { Group, Options } from "../../types";
import { H as HttpRequestEventMap } from '../../glossary-6564c252.js';
import { H as HttpRequestEventMap, h as Interceptor } from '../../Interceptor-436630be.js';
import { H as HttpResponseInit } from '../../HttpResponse-DQOloMJy.js';
import { HMRPayload, CustomPayload } from '../../types/hmrPayload.js';
import { HMRPayload, Plugin } from 'vite';
import { HTMLMotionProps, motion } from "framer-motion";
import { HTTPRequest, type ResourceType } from '../api/HTTPRequest.js';
import { HTTPResponse, type RemoteAddress } from '../api/HTTPResponse.js';
import { HackerModule } from './modules/hacker';
import { HandlerKind } from '../../handlers/common.js';
import { HandlersController } from '~/core/SetupApi'
import { HandlersExecutionResult, executeHandlers } from './executeHandlers'
import { Head } from './Head';
import { Head } from 'components/Head';
import { HeadRow } from './HeadRow';
import { HeadRow } from 'components/HeadRow';
import { Header } from "./sections/Header";
import { Header } from './components/header/Header';
import { Header } from './header.js';
import { HeaderData } from './header.js';
import { Headers as HeadersPolyfill } from 'headers-polyfill'
import { HeadersInit } from './fetch'
import { Heading, Paragraph } from "@/components/ui-kit/typography";
import { HeadingM } from "./typography";
import { Helmet } from "react-helmet-async";
import { HelpCircle } from "lucide-react";
import { HelperManager } from "./HelperManager";
import { HelpersModule } from './modules/helpers';
import { HeroSection } from "@/components/home/HeroSection";
import { Hfs } from "@humanfs/core";
import { HideOptions } from '@floating-ui/dom';
import { HideOptions } from '@floating-ui/react-dom';
import { History, Location, LocationState } from './index';
import { History, LocationState } from './index';
import { HookHandler } from 'vite';
import { HoverCard, HoverCardTrigger } from "@/components/ui/hover-card";
import { HoverCardContent } from "@/components/ui/hover-card";
import { Http2SecureServer } from 'node
import { HttpHandler } from '../../handlers/HttpHandler'
import { HttpHandler, HttpRequestResolverExtras } from './HttpHandler'
import { HttpOptions } from './http';
import { HttpRequestEventMap } from './glossary'
import { HttpRequestEventMap, IS_PATCHED_MODULE } from '../../glossary'
import { HttpRequestResolverExtras, HttpHandler } from './handlers/HttpHandler.js';
import { HttpResponse } from '..'
import { HttpResponse } from '../HttpResponse'
import { HttpResponse } from './HttpResponse'
import { HttpServer } from '@open-draft/test-server/http'
import { I as Interceptor } from '../../Interceptor-af98b768.js';
import { I as Interceptor, E as ExtractEventNames } from './Interceptor-af98b768.js';
import { ICSSImage } from '../types/image';
import { IContext } from "./util";
import { IElementEffect } from '../effects';
import { IErrorDetail } from "./util";
import { IMPORTANT_MODIFIER, sortModifiers } from './parse-class-name'
import { INPUT_VALIDATION_RULES } from '../constants';
import { INTERNAL_REQUEST_ID_HEADER_NAME } from '../../Interceptor'
import { IOptions } from './options';
import { IOptions, IResult } from 'tldts-core';
import { IOptions, setDefaults } from './options';
import { IPath, Path, PathType } from './path';
import { IPath, PathType, Path } from './path';
import { IPropertyIdentValueDescriptor } from '../IPropertyDescriptor';
import { IPropertyListDescriptor } from '../IPropertyDescriptor';
import { IPropertyTokenValueDescriptor } from '../IPropertyDescriptor';
import { IPropertyTypeValueDescriptor } from '../IPropertyDescriptor';
import { IPropertyValueDescriptor } from '../IPropertyDescriptor';
import { IPublicSuffix, ISuffixLookupOptions } from './interface';
import { IPublicSuffix, ISuffixLookupOptions } from './lookup/interface';
import { IPublicSuffix, ISuffixLookupOptions } from 'tldts-core';
import { IRemoveScrollEffectProps } from './types';
import { ITransform } from './types';
import { ITypeDescriptor } from '../ITypeDescriptor';
import { ITypeSuite, TType } from "./types";
import { IcnSearch } from './IcnSearch';
import { IconDropdown } from './IconDropdown';
import { IconDropdown } from 'components/IconDropdown';
import { IconLeft } from './IconLeft';
import { IconLeft } from 'components/IconLeft';
import { IconRight } from './IconRight';
import { IconRight } from 'components/IconRight';
import { IfOverflow } from '../util/IfOverflowMatches';
import { IgnoreLike } from './ignore.js';
import { Image } from "lucide-react";
import { Image, Paperclip, Send, Smile } from "lucide-react";
import { ImageAlignment } from "../image/alignment";
import { ImageAlignment } from "../image/alignment";
import { ImageAlignment } from '../image';
import { ImageAlignment } from '../image';
import { ImageAlignment } from 'src/api/image/alignment';
import { ImageElementContainer } from './image-element-container';
import { ImageModule } from './modules/image';
import { ImagePlus, X } from "lucide-react";
import { ImageUploadSection } from "./vehicle-upload/ImageUploadSection";
import { ImplicitLabelListType } from '../component/LabelList';
import { ImplicitLabelType } from '../component/Label';
import { Importer, SideCarHOC } from './types';
import { Importer, SideMedium } from './types';
import { IncomingHttpHeaders } from "./header";
import { IncomingHttpHeaders } from './header'
import { IncomingHttpHeaders } from 'http';
import { IncomingMessage } from 'http'
import { IncomingMessage } from 'node
import { IndexOutOfBoundsError } from 'src/core/errors';
import { Infer } from '@vinejs/vine/build/src/types';
import { Infer, object, size, string } from 'superstruct';
import { InferCustomEventPayload } from '../../types/customEvent.js';
import { InfiniteQueryObserver } from '@tanstack/query-core'
import { InfiniteQueryObserver, skipToken } from '@tanstack/query-core'
import { Info } from "lucide-react";
import { Info } from './info.js';
import { Info } from './util/info.js';
import { Info, Loader2 } from "lucide-react";
import { Info, TrendingDown, TrendingUp } from "lucide-react";
import { InfoIcon } from "lucide-react";
import { InlineConfig, UserConfig as UserConfig$1, Plugin, ResolvedConfig as ResolvedConfig$1, LogLevel, LoggerOptions, Logger as Logger$1, createServer as createServer$1 } from 'vite';
import { InlineOptions } from '@floating-ui/core';
import { InlineOptions } from '@floating-ui/dom';
import { InlineOptions } from '@floating-ui/react-dom';
import { InnerSymbolsProp } from '../shape/Symbols';
import { Input } from "@/components/ui/input";
import { Input } from '../../../protocol/protocol.js';
import { Input, type EmptyResult } from '../../../protocol/protocol.js';
import { InputState } from './InputState.js';
import { InstalledBrowser } from './Cache.js';
import { Instance } from '../../setup';
import { Interceptable, MockInterceptor } from './mock-interceptor'
import { Interceptor } from '../../Interceptor'
import { Interceptor } from './Interceptor'
import { Interceptor, ExtractEventNames } from './Interceptor'
import { InterceptorError } from '../InterceptorError'
import { InterceptorError } from './InterceptorError'
import { InternalError } from './devUtils'
import { InternalError, devUtils } from '../internal/devUtils'
import { InternalError, devUtils } from '~/core/utils/internal/devUtils'
import { InternalFieldErrors, InternalFieldName, ValidateResult } from '../types';
import { InternalFieldName } from '../types';
import { InternalFieldName, Names } from '../types';
import { InternalModifier, InternalModifiers } from 'types/Modifiers';
import { InternalModifier, Modifiers } from 'types/Modifiers';
import { InternetModule } from './modules/internet';
import { InterruptHandler, QuickJSRuntime } from "./runtime";
import { IntervalPoller, MutationPoller, RAFPoller } from './Poller.js';
import { InvalidAcroFieldValueError } from 'src/core/errors';
import { InvalidPDFDateStringError } from 'src/core/errors';
import { InvalidTargetIndexError, CorruptPageTreeError } from 'src/core/errors';
import { IpcNetConnectOpts, Socket, TcpNetConnectOpts } from 'net'
import { IsAny, IsNever } from '../utils';
import { IsDefined, IsNumber, Max, Min } from 'class-validator';
import { IsDelimiter } from 'src/core/syntax/Delimiters';
import { IsDigit } from 'src/core/syntax/Numeric';
import { IsDigit, IsNumeric } from 'src/core/syntax/Numeric';
import { IsFlatObject, Noop } from './utils';
import { IsIrregular } from 'src/core/syntax/Irregular';
import { IsNotEmpty } from 'class-validator';
import { IsWhitespace } from 'src/core/syntax/Whitespace';
import { IsolatedWorld } from './IsolatedWorld.js';
import { IssueData, StringValidation, ZodCustomIssue, ZodError, ZodErrorMap } from "./ZodError";
import { Iterable, AsyncIterable } from './utils/internal/isIterable.js';
import { JSBorrowedCharPointer, JSContextPointer, JSRuntimePointer, JSValueConstPointer, JSValuePointer } from "./types-ffi";
import { JSContextPointer, JSRuntimePointer } from "./types-ffi";
import { JSContextPointer, JSValueConstPointer, JSValuePointer } from "./types-ffi";
import { JSHandle } from '../api/JSHandle.js';
import { JSHandle } from './JSHandle.js';
import { JSHandle, ElementHandle, Frame, Page, BrowserContext } from './types';
import { JSONHydrator } from './postcss.js'
import { JSONSchema4 } from "json-schema";
import { JSONSchemaType } from 'ajv';
import { JSRuntimePointer } from "./types-ffi";
import { JSRuntimePointer, JSContextPointer, JSContextPointerPointer, JSValuePointer, JSValueConstPointer, JSValuePointerPointer, JSValueConstPointerPointer, BorrowedHeapCharPointer, OwnedHeapCharPointer, JSBorrowedCharPointer, JSVoidPointer, EvalFlags, EvalDetectModule } from "../types-ffi";
import { JSX, ReactNode } from "react";
import { JSXRole } from "../parser/tokenizer";
import { JpegEmbedder, PDFRef, PngEmbedder } from "../core";
import { JpegEmbedder, PDFRef, PngEmbedder } from "../core";
import { JpegEmbedder, PDFRef, PngEmbedder } from 'src/core';
import { JsonPathToAccessor } from './utils'
import { JsonPathToAccessor } from './utils';
import { JsonPathToAccessor, JsonPathToType } from './select-query-parser/utils'
import { JsonPathToAccessor, JsonPathToType } from './select-query-parser/utils';
import { JwtHeader, JwtPayload, SupportedStorage } from './types'
import { JwtHeader, JwtPayload, SupportedStorage } from './types';
import { KeyFeatures } from "@/components/home/KeyFeatures";
import { KeyRound, Loader2, Mail } from "lucide-react";
import { KeySource, PointerSource, SourceType, type InputSource, type InputSourceFor } from './InputSource.js';
import { Keyboard, Mouse, Touchscreen, type TouchHandle, type KeyDownOptions, type KeyPressOptions, type KeyboardTypeOptions, type MouseClickOptions, type MouseMoveOptions, type MouseOptions, type MouseWheelOptions } from '../api/Input.js';
import { Keyboard, Mouse, Touchscreen, type TouchHandle, type KeyboardTypeOptions, type KeyDownOptions, type KeyPressOptions, type MouseClickOptions, type MouseMoveOptions, type MouseOptions, type MouseWheelOptions } from '../api/Input.js';
import { KeyboardHost } from './keyboard';
import { Keywords } from 'src/core/syntax/Keywords';
import { Kind } from './kinds';
import { LIST_STYLE_TYPE } from '../../property-descriptors/list-style-type';
import { LRUCache } from 'lru-cache';
import { Label } from "@/components/ui/label";
import { Labels } from './Labels';
import { Labels } from 'types/Labels';
import { Languages } from "lucide-react";
import { LayoutType } from '../util/types';
import { LayoutType, PresentationAttributesWithProps } from '../util/types';
import { Lead, Message } from "./types";
import { Lead, Message, TabType } from "../types";
import { Lead, TabType } from "../types";
import { LeadFilters } from "./LeadFilters";
import { LeadProfile } from "./profile/LeadProfile";
import { LeadRow } from "./LeadRow";
import { LeadTable } from "./LeadTable";
import { LeaderboardRow } from "@/components/stats/LeaderboardRow";
import { LeadsProvider } from "@/components/dealer-messages/context/LeadsContext";
import { LeadsSidebar } from "./sidebar/LeadsSidebar";
import { LegacyESLint } from "./use-at-your-own-risk.js";
import { LegendType, AnimationTiming, D3Scale, ChartOffset, DataKey, TickItem, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape, SymbolType } from '../util/types';
import { LegendType, TooltipType, AnimationTiming, ChartOffset, DataKey, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';
import { LegendType, TooltipType, AnimationTiming, Coordinate, ChartOffset, DataKey, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';
import { LegendType, TooltipType, AnimationTiming, DataKey, AnimationDuration } from '../util/types';
import { LegendType, TooltipType, AnimationTiming, TickItem, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';
import { Length } from '../types/length';
import { Length } from '@floating-ui/core';
import { Length } from '@floating-ui/dom';
import { Length } from '@floating-ui/react-dom';
import { Length } from '@floating-ui/utils';
import { LengthPercentage } from '../types/length-percentage';
import { LengthPercentage } from './length-percentage';
import { LengthPercentage } from './types/length-percentage';
import { LengthPercentageTuple } from '../types/length-percentage';
import { Lexer } from './lexer';
import { LifeCycleEventEmitter } from './sharedOptions'
import { LifeCycleEventEmitter } from './sharedOptions.js';
import { LifeCycleEventsMap, SharedOptions } from '../sharedOptions'
import { Lifetime } from ".";
import { Lifetime } from "./lifetime";
import { LimitShiftOptions } from '@floating-ui/core';
import { LimitShiftOptions } from '@floating-ui/dom';
import { LimitType } from './Limit';
import { LimitType } from './Limit.js';
import { LineCapStyle } from "./operators";
import { LineCapStyle } from "./operators";
import { LineCapStyle } from 'src/api/operators';
import { LineDot } from '../cartesian/Line';
import { LineElement } from "../../elements/index.js";
import { LinePointItem } from './Line';
import { Link } from "react-router-dom";
import { Link, useLocation } from "react-router-dom";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { Link, useNavigate } from "react-router-dom";
import { Link, useNavigate, useSearchParams } from "react-router-dom";
import { Linter } from "./index";
import { ListboxMachine } from './listbox-machine.js';
import { LiveChatCTA } from "@/components/dealer/subscription/LiveChatCTA";
import { Loader } from "lucide-react";
import { Loader, LoaderSync } from './types.js';
import { Loader2 } from "lucide-react";
import { Loader2, Mail } from "lucide-react";
import { Loader2, Mail, Search, ShieldCheck, UserCheck } from "lucide-react";
import { Loader2, MapPin } from "lucide-react";
import { Loader2, Mic, MicOff, RefreshCw, SendIcon } from "lucide-react";
import { Loader2, Plus } from "lucide-react";
import { Loader2, Plus, Save, Trash } from "lucide-react";
import { Loader2, PlusCircle, Settings } from "lucide-react";
import { Loader2, Search } from "lucide-react";
import { Loader2, Send, X } from "lucide-react";
import { Loader2, Sparkles } from "lucide-react";
import { Loader2, TrendingUp } from "lucide-react";
import { Loader2, X } from "lucide-react";
import { Loading } from "@/components/ui/loading";
import { Loading } from "@/components/ui/loading"; // Update the import path to match the correct location
import { Loading } from "@/components/ui/loading"; // Updated import
import { LoadingMessage } from "./LoadingMessage";
import { LoadingState } from "../inventory/LoadingState";
import { LoadingState } from "./LoadingState";
import { LoadingState } from "@/components/premium/common/LoadingState";
import { LocalMarketCard } from "./market-analysis/LocalMarketCard";
import { Locale } from 'date-fns';
import { Location, Action, LocationListener, LocationState, UnregisterCallback } from './index';
import { Location, OperationTypeNode } from './ast';
import { LocationModule } from './modules/location';
import { Locator, type AwaitedLocator } from './locators/locators.js';
import { Lock } from "lucide-react";
import { LockAcquireTimeoutError, navigatorLock } from './lib/locks'
import { LogType } from '../utils/log.js';
import { Logger } from './logger';
import { Logger } from '@open-draft/logger'
import { Logger } from '@open-draft/logger';
import { LoginForm } from "./forms/LoginForm";
import { LookupAddress, LookupOptions } from 'dns';
import { LookupOptions } from 'node
import { LookupTabs } from "@/components/home/LookupTabs";
import { LookupTabs } from "@/components/premium/lookup/LookupTabs";
import { LooseOptionsType, CreateOptionsType } from './Options';
import { LooseOptionsType, CreateOptionsType } from './Options.js';
import { LoremModule } from './modules/lorem';
import { LoremPicsum } from './providers/lorempicsum';
import { LowLevelJavascriptVm, SuccessOrFail, VmCallResult, VmFunctionImplementation, VmPropertyDescriptor } from "./vm-interface";
import { LucideIcon } from "lucide-react";
import { M as MockFactoryWithHelper, a as MockOptions } from './chunks/mocker.d.BE_2ls6u.js';
import { M as MockedModuleType } from './registry.d-D765pazg.js';
import { M as ModuleMockerInterceptor } from './mocker.d-B3zjcR_8.js';
import { M as ModuleMockerInterceptor, a as ModuleMockerCompilerHints, b as ModuleMocker } from './mocker.d-B3zjcR_8.js';
import { MAP, SCALAR, SEQ } from '../nodes/identity';
import { MAX_FEATURE_ADJUSTMENT_PERCENT } from "./types";
import { MAX_FILES } from "@/types/photo";
import { MAX_FILES, MIN_FILES } from "@/types/photo";
import { MAX_FILES, MIN_FILES, Photo } from "@/types/photo";
import { MMRegExp } from 'minimatch';
import { MOUSE_EVENT_SOURCE } from '../../config/useConfig';
import { MOUSE_EVENT_SOURCE } from '../config/useConfig';
import { Machine } from '../../machine.js';
import { Machine } from '../machine.js';
import { Mail, MessageSquare, Phone, Plus, X } from "lucide-react";
import { MainLayout } from "@/components/layout";
import { Make } from "@/hooks/types/vehicle";
import { Make, Model } from "./types/vehicle";
import { Make, Model } from "@/hooks/types/vehicle";
import { MakeDirectoryOptions, Stats } from 'fs';
import { MakeModelSelect } from "@/components/premium/lookup/form-parts/fields/MakeModelSelect";
import { MakeModelSelectors } from "./MakeModelSelectors";
import { ManualEntryFormData } from "../types/manualEntry";
import { ManualEntryFormData } from "@/components/lookup/types/manualEntry";
import { ManualEntryTab } from "./ManualEntryTab";
import { ManualLookup as StandardManualLookup } from "@/components/lookup/ManualLookup";
import { ManualLookup } from "@/components/lookup/ManualLookup";
import { ManualLookup } from "@/components/premium/lookup/PremiumManualLookup";
import { ManualVehicleInfo } from "@/hooks/useManualValuation";
import { MapPin } from "lucide-react";
import { MapperCdpClient, type CdpClient } from './CdpClient.js';
import { MapperServerCdpConnection } from './MapperCdpConnection.js';
import { Margin, DataKey, SankeyLink, SankeyNode } from '../util/types';
import { MarketAnalysisTab } from "./MarketAnalysisTab";
import { MarketData } from "@/types/marketListings";
import { MarketData, MarketListing } from "@/types/marketListings";
import { MarketPriceRange } from "./market-analysis/MarketPriceRange";
import { MarketSnapshot } from "./MarketSnapshot";
import { MarketTrendCard } from "./market-analysis/MarketTrendCard";
import { MarketTrendChart } from "./MarketTrendChart";
import { MarketingBanner } from "@/components/marketing/MarketingBanner";
import { Match, Path } from './utils/matching/matchRequestUrl.js';
import { Match, matchRequestUrl, Path } from '../utils/matching/matchRequestUrl'
import { MatchedRegExp, Options } from './typedef';
import { Matcher } from './Matchers';
import { Matcher } from 'anymatch';
import { Matcher } from 'types/Matchers';
import { Matrix } from '../css/property-descriptors/transform';
import { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule';
import { MaybeAsyncBlock } from "./asyncify-helpers";
import { MaybeMockedDeep } from '@vitest/spy';
import { MaybePromise, NoInfer } from './typeUtils.js';
import { Measurable } from '@radix-ui/rect';
import { MemoryRouter, Route, Routes } from "react-router-dom";
import { Menu } from "lucide-react";
import { Menu, Sparkles } from "lucide-react";
import { MenuMachine } from './menu-machine.js';
import { Message } from "../types";
import { Message } from '../types';
import { Message } from './errors';
import { MessageCircle, X } from "lucide-react";
import { MessageEvent, ErrorEvent } from './websocket'
import { MessagePort } from 'node
import { MessageSquare, Send } from "lucide-react";
import { MessageSquare, Star } from "lucide-react";
import { MetaSelectors } from './enums';
import { MethodNotImplementedError } from 'src/core/errors';
import { MicromatchOptions, EntryFilterFunction, Pattern } from '../../types';
import { MicromatchOptions, Pattern, PatternRe } from '../types';
import { MicromatchOptions, ReaderOptions } from '../types';
import { Middleware } from './middleware';
import { Middleware } from '@floating-ui/dom';
import { Middleware } from '@floating-ui/react-dom';
import { MiddlewareArguments } from '@floating-ui/dom';
import { MiddlewareArguments } from '@floating-ui/react-dom';
import { MiddlewareCallback, Middleware } from './middleware';
import { MiddlewareCallback, SideCarMedium, SideCarMediumOptions, SideMedium } from './types';
import { MiddlewareData } from '@floating-ui/core';
import { MiddlewareData } from '@floating-ui/dom';
import { MiddlewareData } from '@floating-ui/react-dom';
import { MiddlewareReturn } from '@floating-ui/core';
import { MiddlewareReturn } from '@floating-ui/dom';
import { MiddlewareReturn } from '@floating-ui/react-dom';
import { MiddlewareState } from '@floating-ui/dom';
import { MiddlewareState } from '@floating-ui/react-dom';
import { MileageFactorCard } from "./MileageFactorCard";
import { MinPointSize } from '../util/BarUtils';
import { Minimatch } from 'minimatch';
import { Minimatch, MinimatchOptions } from 'minimatch';
import { MinimatchOptions } from './index.js';
import { MinimatchOptions, MMRegExp } from './index.js';
import { Minipass } from 'minipass';
import { MissingDAEntryError, MissingTfOperatorError } from 'src/core/errors';
import { MkdirError } from './mkdir.js';
import { MkdirpOptions } from './opts-arg.js';
import { MkdirpOptionsResolved } from './opts-arg.js';
import { MockAgent, MockHttpsAgent } from './agents'
import { MockInstance } from '@vitest/spy';
import { MockInterceptor, Interceptable } from './mock-interceptor'
import { MockSocket } from '../Socket/MockSocket'
import { MockSocket } from './MockSocket'
import { MockedModule } from '@vitest/mocker';
import { MockedModule, MockedModuleType } from '@vitest/mocker';
import { MockedModuleType } from '@vitest/mocker';
import { Mode, ValidationModeFlags } from '../types';
import { Model } from "@/hooks/types/vehicle";
import { Modifiers } from 'types/Modifiers';
import { ModifiersProvider } from 'contexts/Modifiers/ModifiersContext';
import { Module } from "module";
import { ModuleBase } from '../../internal/module-base';
import { ModuleEvalOptions, QuickJSWASMModule } from "./module";
import { ModuleExecutionInfo } from 'vite-node/client';
import { ModuleImporter } from "./module-importer.cjs";
import { ModuleMemory } from "./memory";
import { ModuleNamespace, ViteHotContext } from '../../types/hot.js';
import { Month } from 'components/Month';
import { Month, MonthProps } from './Month';
import { MonthChangeEventHandler } from 'types/EventHandlers';
import { MonthWeek } from './getMonthWeeks';
import { Months } from './Months';
import { Months } from 'components/Months';
import { MonthsDropdown } from 'components/MonthsDropdown';
import { MonthsDropdown, MonthsDropdownProps } from './MonthsDropdown';
import { MonthsProps } from 'components/Months';
import { Moon, Sun } from "lucide-react";
import { MotionValue, UnresolvedValueKeyframe, Transition, ElementOrSelector, DOMKeyframesDefinition, AnimationOptions, AnimationPlaybackOptions, AnimationScope, AnimationPlaybackControlsWithThen, ValueAnimationTransition, AnimationPlaybackControls, DynamicOption } from 'motion-dom';
import { MotionValue, UnresolvedValueKeyframe, Transition, ElementOrSelector, DOMKeyframesDefinition, AnimationOptions, AnimationPlaybackOptions, AnimationScope, AnimationPlaybackControlsWithThen, ValueAnimationTransition, AnimationPlaybackControls, DynamicOption, MotionValueEventCallbacks, SpringOptions, TransformOptions } from 'motion-dom';
import { MouseButton } from './buttons';
import { MouseDownEvent, OnSkinToneChange } from './config';
import { MouseEvent } from 'react';
import { MouseEventHandler } from 'react';
import { MusicModule } from './modules/music';
import { Mutable } from './mutate';
import { MutableRefObject } from 'react';
import { Mutate, StateCreator, StoreApi, StoreMutatorIdentifier } from './vanilla';
import { Mutation } from './mutation'
import { MutationCache } from './mutationCache'
import { MutationFilters, QueryClient, MutationState, Mutation } from '@tanstack/query-core';
import { Mutex } from '../../../utils/Mutex.js';
import { Mutex } from '../util/Mutex.js';
import { N as Nullable, A as Arrayable } from './index.d-CWZbpOcv.js';
import { NAMED_COLORS } from './color';
import { NAMED_COLORS, convertColorToRgb } from './color';
import { NODE_TYPE } from '../nodes/identity';
import { NODE_TYPE } from './identity';
import { NativeEmoji } from './NativeEmoji';
import { NavButtonLabel } from 'types/Labels';
import { NavLink, useNavigate } from "react-router-dom";
import { Navbar } from "./Navbar";
import { Navbar } from "@/components/layout/Navbar";
import { Navigate } from "react-router-dom";
import { Navigate, Route, Routes } from "react-router-dom";
import { Navigate, useLocation } from "react-router-dom";
import { NavigateFunction, useNavigate } from "react-router-dom";
import { Navigation } from './Navigation.js';
import { Navigation } from 'components/Navigation';
import { Navigation, NavigationProps } from './Navigation';
import { NavigationContextValue, useNavigation } from './NavigationContext';
import { NavigationProvider } from './Navigation';
import { NavigationState, useNavigationState } from './useNavigationState';
import { NestedValue } from './form';
import { Network } from '../../../protocol/protocol.js';
import { Network, type EmptyResult } from '../../../protocol/protocol.js';
import { Network, type Storage } from '../../../protocol/protocol.js';
import { NetworkManager } from './NetworkManager.js';
import { NetworkRequest } from './NetworkRequest.js';
import { NextByteAssertionError } from 'src/core/errors';
import { NextStepsCard } from "./valuation-complete";
import { NextStepsCard } from "./valuation-complete/NextStepsCard";
import { NextStepsCard } from "@/components/valuation/valuation-complete/NextStepsCard";
import { NicbData, NicbError, NicbResponse } from "@/types/nicb";
import { NicbVinCheck } from "@/components/valuation/NicbVinCheck";
import { NoSearchResults } from "../inventory/NoSearchResults";
import { NoSearchResults } from "./NoSearchResults";
import { Node, ReportBase } from "istanbul-lib-report";
import { NodeBase } from './Node';
import { NodePath } from "../lib/node-path";
import { NodePath } from "./lib/node-path";
import { NodePath } from "./node-path";
import { NodeRectType } from './NodeRects';
import { NodeRectType } from './NodeRects.js';
import { NodeRectsType } from './NodeRects';
import { NodeRectsType } from './NodeRects.js';
import { NodeScroll } from '@floating-ui/dom';
import { NodeScroll } from '@floating-ui/react-dom';
import { NodeSnapshotEnvironment } from '@vitest/snapshot/environment';
import { Noop } from '../types';
import { NotEmptyArray } from './common-types';
import { NullObject } from './cache.js';
import { Nullable, Arrayable } from './types.js';
import { NullableElement } from '../../DomUtils/selectors';
import { NullableElement } from '../../DomUtils/selectors';
import { NullableElement } from '../DomUtils/selectors';
import { NullableElement } from '../DomUtils/selectors';
import { NullableElement } from './selectors';
import { NullableElement } from './selectors';
import { NumberModule } from './modules/number';
import { NumberParsingError } from 'src/core/errors';
import { OTPInput, OTPInputContext } from "input-otp";
import { OVERFLOW } from './property-descriptors/overflow';
import { Observable } from '../../third_party/rxjs/rxjs.js';
import { OfferModal } from "./OfferModal";
import { OfferScoreBadge } from "./OfferScoreBadge";
import { OfferScoreBadge } from "@/components/dealer/OfferScoreBadge";
import { OffsetOptions } from '@floating-ui/dom';
import { OffsetOptions } from '@floating-ui/react-dom';
import { Omit } from "../types";
import { OmitKeyof, HydrateOptions, QueryClient } from '@tanstack/query-core';
import { OpenElementStack, type StackHandler } from './open-element-stack.js';
import { OperationTypeNode } from '../language/ast';
import { OperationTypeNode } from 'graphql'
import { OperationTypeNode, DocumentNode, GraphQLError } from 'graphql';
import { OperationTypeNode, parse } from 'graphql'
import { OptionConfig } from "./Option.ts";
import { Options as ConfigOptions } from "lilconfig";
import { Options as OptionsInternal } from './settings';
import { Options } from "../../types";
import { Options } from "@swc/types";
import { Options } from '../options';
import { Options } from './typedef';
import { Options } from './typedef.js';
import { Options } from 'tinybench';
import { Options, Output, ResultCallback } from "../types";
import { Options, PathSeparator } from "../../types";
import { OptionsHandlerType } from './OptionsHandler';
import { OptionsHandlerType } from './OptionsHandler.js';
import { OptionsReceived, Plugin } from '@vitest/pretty-format';
import { OptionsType } from './Options';
import { OptionsType } from './Options.js';
import { OutgoingHttpHeaders, ClientRequestArgs, IncomingMessage, ClientRequest, Agent, Server, ServerResponse } from 'node
import { OutgoingMessage } from '../../OutgoingMessage.js';
import { OutgoingMessage } from './OutgoingMessage.js';
import { Outlet } from "react-router-dom";
import { Output } from "../types";
import { Output, OnlyCountsOutput, GroupOutput, PathsOutput, Options, FilterPredicate, ExcludePredicate, GlobParams } from "../types";
import { Output, Options } from "../types";
import { Output, Options, ResultCallback } from "../types";
import { Output, ResultCallback, WalkerState, Options } from "../../types";
import { OwnedHeapCharPointer, JSContextPointerPointer, JSValueConstPointerPointer, JSValuePointerPointer } from "./types-ffi";
import { OwnershipHistory } from "./OwnershipHistory";
import { P as PendingSuiteMock, b as MockFactory, a as MockOptions } from './chunks/mocker.d.BE_2ls6u.js';
import { PDFAcroForm } from "../acroform";
import { PDFAcroForm } from "../acroform";
import { PDFAcroForm } from 'src/core/acroform';
import { PDFAcroForm, PDFRef } from "../../core";
import { PDFAcroForm, PDFRef } from "../../core";
import { PDFActions } from "./sections/PDFActions";
import { PDFArrayIsNotRectangleError } from 'src/core/errors';
import { PDFDocument, PDFFont, PDFPage, rgb } from "pdf-lib";
import { PDFDocument, PDFPage, rgb } from "pdf-lib";
import { PDFDocument, rgb, StandardFonts } from "pdf-lib";
import { PDFDownloadButton } from "@/components/common/PDFDownloadButton";
import { PDFFont, PDFPage, rgb } from "pdf-lib";
import { PDFHexString } from "../../core";
import { PDFHexString } from "../../core";
import { PDFHexString } from 'src/core';
import { PDFHexString, PDFName, PDFNumber, PDFOperator } from "../core";
import { PDFHexString, PDFName, PDFNumber, PDFOperator } from "../core";
import { PDFHexString, PDFName, PDFNumber, PDFOperator } from 'src/core';
import { PDFName, PDFArray, PDFDict, PDFHexString, PDFRef } from 'src/core';
import { PDFName, PDFNumber } from "../core";
import { PDFName, PDFNumber } from "../core";
import { PDFName, PDFNumber } from 'src/core';
import { PDFOperator } from "../core";
import { PDFOperator } from "../core";
import { PDFOperator } from 'src/core';
import { PDFOperator, PDFPageLeaf, PDFRef } from "../core";
import { PDFOperator, PDFPageLeaf, PDFRef } from "../core";
import { PDFOperator, PDFWidgetAnnotation } from "../../core";
import { PDFOperator, PDFWidgetAnnotation } from "../../core";
import { PDFOperator, PDFWidgetAnnotation } from 'src/core';
import { PDFPage, RGB, rgb } from "pdf-lib";
import { PDFPage, rgb } from "pdf-lib";
import { PDFPageDrawCircleOptions, PDFPageDrawEllipseOptions, PDFPageDrawImageOptions, PDFPageDrawLineOptions, PDFPageDrawPageOptions, PDFPageDrawRectangleOptions, PDFPageDrawSquareOptions, PDFPageDrawSVGOptions, PDFPageDrawTextOptions } from "./PDFPageOptions";
import { PDFPageDrawCircleOptions, PDFPageDrawEllipseOptions, PDFPageDrawImageOptions, PDFPageDrawLineOptions, PDFPageDrawPageOptions, PDFPageDrawRectangleOptions, PDFPageDrawSquareOptions, PDFPageDrawSVGOptions, PDFPageDrawTextOptions } from "./PDFPageOptions";
import { PDFPageEmbedder, PDFRef } from "../core";
import { PDFPageEmbedder, PDFRef } from "../core";
import { PDFPageEmbedder, PDFRef } from 'src/core';
import { PDFRef } from "../core";
import { PDFRef } from "../core";
import { PDFRef, PDFAcroCheckBox } from "../../core";
import { PDFRef, PDFAcroCheckBox } from "../../core";
import { PDFRef, PDFAcroComboBox } from "../../core";
import { PDFRef, PDFAcroComboBox } from "../../core";
import { PDFRef, PDFAcroListBox } from "../../core";
import { PDFRef, PDFAcroListBox } from "../../core";
import { PDFRef, PDFAcroPushButton } from "../../core";
import { PDFRef, PDFAcroPushButton } from "../../core";
import { PDFRef, PDFAcroRadioButton } from "../../core";
import { PDFRef, PDFAcroRadioButton } from "../../core";
import { PDFRef, PDFAcroSignature } from "../../core";
import { PDFRef, PDFAcroSignature } from "../../core";
import { PDFRef, PDFAcroSignature } from 'src/core';
import { PDFRef, PDFAcroText } from "../../core";
import { PDFRef, PDFAcroText } from "../../core";
import { PDFRef, PDFWidgetAnnotation, PDFOperator, PDFName, PDFDict, PDFAcroTerminal } from "../../core";
import { PDFRef, PDFWidgetAnnotation, PDFOperator, PDFName, PDFDict, PDFAcroTerminal } from "../../core";
import { PNG } from 'src/utils/png';
import { PREMIUM_FEATURES } from "./database";
import { Pack, PackSync } from './pack.js';
import { Padding } from '@floating-ui/core';
import { Padding } from '@floating-ui/dom';
import { Padding } from '@floating-ui/react-dom';
import { Padding } from '@floating-ui/utils';
import { Padding, DataKey } from '../util/types';
import { Page, type GeolocationOptions, type MediaFeature, type Metrics, type NewDocumentScriptEvaluation, type ScreenshotOptions, type WaitTimeoutOptions } from '../api/Page.js';
import { Page, type NewDocumentScriptEvaluation, type ScreenshotOptions } from '../api/Page.js';
import { PageBoundingBox, PDFCatalog, PDFContext } from "../core";
import { PageBoundingBox, PDFCatalog, PDFContext } from "../core";
import { PageSizes } from 'src/api/sizes';
import { Pair } from '../../nodes/Pair';
import { Pair } from '../nodes/Pair';
import { Pair } from './Pair';
import { Panel } from "./Panel.js";
import { PanelData } from "../../Panel.js";
import { PanelGroup } from "./PanelGroup.js";
import { PanelResizeHandle } from "./PanelResizeHandle.js";
import { ParseError } from '@csstools/css-tokenizer';
import { ParseOptions } from 'effect/SchemaAST';
import { ParsedStack, TestError, SerializedError, ErrorWithDiff, Arrayable, Awaitable as Awaitable$1 } from '@vitest/utils';
import { Parser } from "../Parser.js";
import { Parser } from './parse.js';
import { Parser } from './postcss.js'
import { Parser } from 'acorn' 
import { Parser, type ParserOptions } from "./Parser.js";
import { Parser, type ParserOptions, type TreeAdapterTypeMap, type DefaultTreeAdapterMap } from 'parse5';
import { ParserOptions } from "@babel/parser";
import { ParserStream as Parse5Stream } from 'parse5-parser-stream';
import { PartialDeep } from 'type-fest';
import { PassThrough } from 'node
import { PassThrough } from 'stream'
import { Path } from "./path";
import { Path } from "d3-path";
import { Path } from '../path';
import { Path } from './matchRequestUrl.js';
import { Path } from './path';
import { Path } from './utils/matching/matchRequestUrl.js';
import { Path } from 'path-scurry';
import { Path, Location, LocationDescriptorObject } from './index';
import { Path, LocationState, LocationKey, Location, LocationDescriptor } from './index';
import { Path, isPath } from './utils/matching/matchRequestUrl'
import { PathParams, Path } from './utils/matching/matchRequestUrl.js';
import { PathParams, Path, Match } from '../utils/matching/matchRequestUrl.js';
import { PathReservations } from './path-reservations.js';
import { PathSeparator } from "./types";
import { Pattern } from '../types';
import { Pattern } from './pattern.js';
import { Pattern, MicromatchOptions, PatternRe } from '../../types';
import { Pattern, PatternsGroup } from '../types';
import { Pattern, ReaderOptions } from '../types';
import { Pax } from './pax.js';
import { Payload, Props as DefaultProps } from './DefaultLegendContent';
import { PaymentMethodCard } from "@/components/dealer/subscription/PaymentMethodCard";
import { PdfConstants, PdfFonts } from "../components/pdfCommon";
import { PdfPreview } from "./PdfPreview";
import { PercentOfViewType } from './PercentOfView';
import { PercentOfViewType } from './PercentOfView.js';
import { PersonModule } from './modules/person';
import { Phone } from "lucide-react";
import { PhoneModule } from './modules/phone';
import { Photo } from "@/types/photo";
import { Photo, PhotoFile } from "@/types/photo";
import { Photo, PhotoScore } from "@/types/photo";
import { PhotoAnalysis } from "./sections/PhotoAnalysis";
import { PhotoScoringWidget } from "./PhotoScoringWidget";
import { PhotoUpload } from "../../lookup/PhotoUpload";
import { PhotoUploadAndScore } from "./PhotoUploadAndScore";
import { PhotoUploadAndScore } from "@/components/valuation/PhotoUploadAndScore";
import { PhotoUploadList } from "./PhotoUploadList";
import { PhotoUploadTab } from "./PhotoUploadTab";
import { PhotosSummary } from "./review/PhotosSummary";
import { PickerConfig } from './config';
import { PickerConfig } from './config';
import { PickerConfig } from './config/config';
import { PickerConfig } from './config/config';
import { PickerConfig, PickerConfigInternal } from '../../config/config';
import { PickerConfigProvider } from './components/context/PickerConfigContext';
import { PickerProps } from './index';
import { PickerProps } from './index';
import { PickerStyleTag } from './Stylesheet/stylesheet';
import { Placeholder } from './providers/placeholder';
import { Placement } from '@floating-ui/core';
import { Placement } from '@floating-ui/dom';
import { Placement } from '@floating-ui/react-dom';
import { Placement } from '@floating-ui/utils';
import { PlanSelectorCarousel } from "@/components/dealer/subscription/PlanSelectorCarousel";
import { PlanToggle } from "@/components/dealer/subscription/PlanToggle";
import { PlateLookup } from "../../lookup/PlateLookup";
import { PlateLookup } from "@/components/lookup/PlateLookup";
import { PlateLookupInfo } from "./lookup";
import { PlateLookupInfo } from "@/types/lookup";
import { PlateLookupResponse } from "@/types/api";
import { PlateLookupTab } from "./PlateLookupTab";
import { PlateSchema, VinSchema } from "./validation/schemas";
import { Platform } from '@floating-ui/dom';
import { Platform } from '@floating-ui/react-dom';
import { Plugin } from '@vitest/pretty-format';
import { Plugin } from 'postcss'
import { Plugin } from 'vite';
import { Plugin, Plugins } from '@vitest/pretty-format';
import { Plugin, ProcessOptions, Transformer } from 'postcss';
import { Plugin, Rollup, ViteDevServer } from 'vite';
import { PluginCreator } from 'postcss'
import { PluginHooks, RollupError, SourceMap, ModuleInfo, PartialResolvedId, MinimalPluginContext, InputOptions, CustomPluginOptions, LoadResult, SourceDescription, RollupOptions, WatcherOptions, InputOption, ModuleFormat, RollupOutput, RollupWatcher, SourceMapInput, ExistingRawSourceMap, OutputBundle, OutputChunk, ObjectHook, PluginContext, ResolveIdResult, TransformPluginContext, GetManualChunk } from 'rollup';
import { PluginOption, ResolvedConfig } from 'vite';
import { Plus } from "lucide-react";
import { PlusCircle, Settings } from "lucide-react";
import { PointerCoords } from '../../event';
import { PointerEventType } from './DragTracker';
import { PointerEventType } from './DragTracker.js';
import { PointerHitAreaMargins } from "./PanelResizeHandleRegistry.js";
import { PointerHost } from './pointer';
import { PointerPosition } from './shared';
import { PollingOptions } from './QueryHandler.js';
import { PopoverMachine } from './popover-machine.js';
import { Portal as Portal$1 } from '@radix-ui/react-portal';
import { Position } from "../errors";
import { Position } from "../errors";
import { Positional } from './parse-command';
import { PostgrestClient, PostgrestFilterBuilder, PostgrestQueryBuilder } from '@supabase/postgrest-js';
import { PostgrestError } from '@supabase/postgrest-js'
import { PostgrestError } from '@supabase/postgrest-js';
import { PredefinedFormats } from './enums';
import { PredictionResult } from "./PredictionResult";
import { PredictionResult } from "@/components/valuation/PredictionResult";
import { PremiumBadge } from "./PremiumBadge";
import { PremiumBadge } from "./PremiumDealerBadge";
import { PremiumBadge } from "@/components/ui/premium-badge";
import { PremiumCard } from "@/components/premium/PremiumCard";
import { PremiumCheckoutButton } from "./PremiumCheckoutButton";
import { PremiumConditionSection } from "@/components/premium/sections/PremiumConditionSection";
import { PremiumDealerToggle } from "@/components/admin/PremiumDealerToggle";
import { PremiumFeaturesGrid } from "@/components/premium/features/PremiumFeaturesGrid";
import { PremiumFeaturesTabs } from "@/components/premium/features/PremiumFeaturesTabs";
import { PremiumFields } from "@/components/lookup/form-parts/PremiumFields";
import { PremiumHero } from "@/components/premium/PremiumHero";
import { PremiumPlansSection } from "./PremiumPlansSection";
import { PremiumServicesGrid } from "@/components/home/PremiumServicesGrid";
import { PremiumSubscriptionCard } from "./PremiumSubscriptionCard";
import { PremiumTabs } from "@/components/premium/PremiumTabs";
import { PremiumValuationForm } from "./form/PremiumValuationForm";
import { PremiumValuationForm } from "@/components/premium/form/PremiumValuationForm";
import { Preprocessor } from './preprocessor.js';
import { PresentationAttributesWithProps } from '../util/types';
import { PrettyFormatOptions } from '@vitest/pretty-format';
import { Preview } from './components/footer/Preview';
import { PreviewConfig } from './config';
import { PreviewEmoji } from '../components/footer/Preview';
import { PreviewEmoji } from '../components/footer/Preview';
import { PriceDisplay } from "./hero/PriceDisplay";
import { PriceDisplay } from "@/components/premium/hero/PriceDisplay";
import { PriceDistributionChart } from "./market-analysis/PriceDistributionChart";
import { Primitive } from "./helpers/typeAliases";
import { Primitive } from '../types';
import { Primitive } from '@radix-ui/react-primitive';
import { PrivateConstructorError } from 'src/core/errors';
import { ProcessOptions } from './postcss.js'
import { Processor } from './processor.js';
import { Profile } from "@/types/profile";
import { Progress } from "@/components/ui/progress";
import { ProgressEventPolyfill } from '../polyfills/ProgressEventPolyfill'
import { ProgressHandler, ProgressTracker } from "./ProgressTracker";
import { ProgressRing } from "@/components/animations/ProgressRing";
import { ProgressTracker, ProgressType } from "./ProgressTracker";
import { PromisifyAssertion, Tester, ExpectStatic } from '@vitest/expect';
import { Property } from './types';
import { Props as CartesianAxisProps } from './CartesianAxis';
import { Props as CurveProps, CurveType } from '../shape/Curve';
import { Props as DotProps } from '../shape/Dot';
import { Props as ErrorBarProps } from './ErrorBar';
import { Props as LegendProps } from '../component/Legend';
import { Props as PolarAngleAxisProps } from './PolarAngleAxis';
import { Props as PolarRadiusAxisProps } from './PolarRadiusAxis';
import { Props as RectangleProps } from '../shape/Rectangle';
import { Props as SectorProps } from '../shape/Sector';
import { Props as TrapezoidProps } from '../shape/Trapezoid';
import { Props as XAxisProps } from './XAxis';
import { Props as YAxisProps } from './YAxis';
import { Props as ZAxisProps } from './ZAxis';
import { Protocol } from './protocol';
import { Protocol } from 'devtools-protocol';
import { Protocol } from 'devtools-protocol';
import { ProtocolError } from './Errors.js';
import { PseudoSelector } from "css-what";
import { Puppeteer } from './common/Puppeteer.js';
import { PuppeteerNode } from 'puppeteer';
import { Query } from './query'
import { QueryCache } from './queryCache'
import { QueryClient } from '@tanstack/query-core';
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary.js';
import { QueryFilters, QueryClient } from '@tanstack/query-core';
import { QueryFunction, ThrowOnError, DefaultError, QueryClient } from '@tanstack/query-core';
import { QueryFunction, ThrowOnError, DefaultError, QueryKey, OmitKeyof, QueriesPlaceholderDataFunction, QueryClient } from '@tanstack/query-core';
import { QueryHandler } from './QueryHandler.js';
import { QueryHandler, type QuerySelector } from '../common/QueryHandler.js';
import { QueryHandler, type QuerySelector, type QuerySelectorAll } from './QueryHandler.js';
import { QueryHandler, type QuerySelectorAll } from './QueryHandler.js';
import { QueryHandler, type QuerySelectorAll, type QuerySelector } from './QueryHandler.js';
import { QueryKey, DefaultedQueryObserverOptions, QueryObserverResult, ThrowOnError, Query } from '@tanstack/query-core';
import { QueryKey, QueryObserver, QueryClient, QueryObserverResult } from '@tanstack/query-core';
import { QueryObserver } from './queryObserver'
import { QueryObserver } from '@tanstack/query-core'
import { QueryObserver, skipToken } from '@tanstack/query-core'
import { Queue } from "./api/queue";
import { QuickJSAsyncContext } from "./context-asyncify";
import { QuickJSAsyncEmscriptenModule } from "./emscripten-types";
import { QuickJSAsyncFFI } from "./variants";
import { QuickJSAsyncRuntime } from "./runtime-asyncify";
import { QuickJSContext } from "./context";
import { QuickJSDeferredPromise } from "./deferred-promise";
import { QuickJSEmscriptenModule } from "../emscripten-types";
import { QuickJSHandle } from "./types";
import { QuickJSModuleCallbacks } from "./module";
import { QuickJSRuntime } from "./runtime";
import { R as RawErrsMap$1, T as TscErrorInfo$1, C as CollectLineNumbers$1, a as CollectLines$1, b as RootAndTarget$1, c as Context$1 } from './chunks/global.d.CXRAxnWc.js';
import { R as RequestHandler } from '../../HttpResponse-DQOloMJy.js';
import { R as RequestHandler } from '../HttpResponse-DQOloMJy.js';
import { R as RequestHandler } from './HttpResponse-DQOloMJy.js';
import { R as RequestHandler, f as RequestHandlerDefaultInfo, a as ResponseResolver, c as RequestHandlerOptions, g as ResponseResolutionContext } from '../HttpResponse-DQOloMJy.js';
import { R as RequestHandler, f as RequestHandlerDefaultInfo, c as RequestHandlerOptions } from '../../HttpResponse-DQOloMJy.js';
import { R as ResolvedCoverageOptions, V as Vitest, C as CoverageMap, a as ReportContext } from './chunks/reporters.d.DG9VKi4m.js';
import { R as RuntimeCoverageModuleLoader } from './chunks/coverage.d.S9RMNXIe.js';
import { R as RuntimeRPC } from './chunks/worker.d.CHGSOG0s.js';
import { R as RuntimeRPC, W as WorkerGlobalState } from './chunks/worker.d.CHGSOG0s.js';
import { REQUEST_ID_REGEXP } from '../test/helpers'
import { RadialBarProps } from '../polar/RadialBar';
import { RadialCursorPoints } from './getRadialCursorPoints';
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { RandomModule } from './modules/random';
import { RangePosition } from './css-syntax-error.js'
import { RawSourceMap, SourceMapGenerator } from 'source-map-js'
import { ReactElement } from 'react';
import { ReactElement, ReactNode } from 'react';
import { ReactElement, SVGProps } from 'react';
import { ReactNode } from "react";
import { ReactNode } from 'react';
import { ReactNode } from 'react';
import { ReactNode, ReactElement } from "react";
import { ReactNode, ReactElement } from 'react';
import { ReactNode, useEffect } from "react";
import { ReactRef } from './types';
import { ReactRef, RefCallback } from './types';
import { ReactRef, RefObject } from './types';
import { ReactSVG, SVGProps, ForwardRefExoticComponent, RefAttributes } from 'react';
import { Reactions } from './components/Reactions/Reactions';
import { ReadEntry } from './read-entry.js';
import { ReadStream } from 'fs';
import { Readable } from "stream";
import { Readable } from 'node
import { Readable } from 'stream';
import { Readable, Writable } from "stream";
import { Readable, Writable } from 'bare-stream'
import { ReadableStream } from 'stream/web'
import { ReadableStreamAsyncIterator, ReadableStreamIteratorOptions } from './ponyfill';
import { ReaderOptions } from '../types';
import { Realm } from '../api/Realm.js';
import { Realm } from './Realm.js';
import { RealtimeChannel, RealtimeChannelOptions, RealtimeClient } from '@supabase/realtime-js';
import { RealtimeClientOptions } from '@supabase/realtime-js'
import { RealtimeClientOptions } from '@supabase/realtime-js';
import { Rect } from '@floating-ui/core';
import { Rect } from '@floating-ui/dom';
import { Rect } from '@floating-ui/react-dom';
import { Rect } from '@floating-ui/utils';
import { Rectangle } from "./types.js";
import { RedirectHandler, DecoratorHandler } from './handlers'
import { Ref } from '../types';
import { Ref, RefObject } from 'react';
import { RefAttributes } from 'react';
import { RefAttributes, SVGProps } from 'react';
import { RefObject } from "react";
import { RefObject } from 'react';
import { RefObject, useEffect } from 'react';
import { Reference, ReferenceFlag } from '../referencer/Reference';
import { ReferenceElement } from '@floating-ui/dom';
import { ReferenceElement } from '@floating-ui/react-dom';
import { Referral } from "@/contexts/ReferralContext";
import { ReferralHistoryList } from "@/components/referrals/ReferralHistoryList";
import { ReferralModal } from "@/components/referrals/ReferralModal";
import { ReferralStatusCard } from "@/components/referrals/ReferralStatusCard";
import { RefreshCw } from "lucide-react";
import { RegisterOptions } from './validator';
import { RegisterOptions, Validate } from './validator';
import { RegisterOptions, ValidateResult } from './validator';
import { Removable } from './removable'
import { Removable } from './removable.js';
import { RemoveScrollBar } from './component';
import { RemoveScrollType } from './types';
import { RemoveScrollUIType, IRemoveScrollSelfProps } from './types';
import { RenderConfigurations } from './canvas-renderer';
import { RenderConfigurations } from './canvas/canvas-renderer';
import { RenderFeatures, type HasDisplayName, type PropsForFeatures, type RefProp } from '../../utils/render.js';
import { RenderOptions } from './render/canvas/canvas-renderer';
import { RenderResult } from '@testing-library/react';
import { RenderResult, screen } from '@testing-library/react';
import { Renderer } from '../renderer';
import { RenderingContext2D } from '../types';
import { RenderingContext2D } from './types';
import { ReparseError } from 'src/core/errors';
import { ReplacedElementContainer } from '../../dom/replaced-elements';
import { ReplyToLeadModal } from "./ReplyToLeadModal";
import { ReportData } from "../types";
import { ReportData } from "../utils/pdf/types";
import { ReportData } from "./types";
import { ReportData } from "@/utils/pdf/types";
import { ReportData, ReportOptions } from "./types";
import { ReportData, SectionParams } from "../types";
import { ReportData, SectionParams } from "./types";
import { ReportOptions } from "./types";
import { Request } from './Request.js';
import { RequestController } from '../../RequestController'
import { RequestController } from './RequestController'
import { RequestHandler } from "../core/handlers/RequestHandler";
import { RequestHandler } from '../../handlers/RequestHandler'
import { RequestHandler } from '../handlers/RequestHandler'
import { RequestHandler } from './handlers/RequestHandler'
import { RequestHandler } from '~/core/handlers/RequestHandler'
import { RequestOptions, Agent as HttpsAgent } from 'https'
import { RequireDirectoryOptions } from 'require-directory';
import { RequiredDeep } from '../typeUtils'
import { RequiredDeep } from '../typeUtils.js';
import { RequiredDeep } from '~/core/typeUtils'
import { Resend } from "https
import { ResetPasswordForm } from "./forms/ResetPasswordForm";
import { ResizeHandlerOptionType } from './ResizeHandler';
import { ResizeHandlerOptionType } from './ResizeHandler.js';
import { ResizeHandlerType } from './ResizeHandler';
import { ResizeHandlerType } from './ResizeHandler.js';
import { Resolver } from './resolvers';
import { Resolver } from './types';
import { ResourceHeader } from "@/components/ui/resource-header";
import { ResponseResolutionContext } from '../utils/executeHandlers'
import { ResponseResolver } from './RequestHandler'
import { ResultCallback, Options } from "../types";
import { Root } from './Root';
import { Root } from './components/Root';
import { RootBoundary } from '@floating-ui/core';
import { RootBoundary } from '@floating-ui/dom';
import { RootBoundary } from '@floating-ui/react-dom';
import { RootProvider } from './contexts/RootProvider';
import { Rotation } from "../rotations";
import { Rotation } from "../rotations";
import { Rotation } from "./rotations";
import { Rotation } from "./rotations";
import { Rotation } from 'src/api/rotations';
import { Rotation, degrees, toRadians } from 'src/api/rotations';
import { RotationTypes } from "pdf-lib";
import { Route, Routes } from "react-router-dom";
import { RouteObject } from "react-router-dom";
import { Row } from 'components/Row';
import { Row, RowProps } from './Row';
import { RowProps } from 'components/Row';
import { Rule, AST } from 'eslint';
import { Rule, ESLint } from 'eslint';
import { RulesEngine } from "@/utils/rules/RulesEngine";
import { RulesEngineInput } from "../rules/types";
import { S as SerializedCoverageConfig, a as SerializedConfig } from './chunks/config.d.UqE-KR0o.js';
import { S as SerializedTestSpecification, g as CoverageProvider$1, a as ReportContext$1, h as CoverageProviderModule$1, i as CoverageReporter$1, j as CoverageProviderName, k as CoverageOptions$1, R as ResolvedCoverageOptions$1, B as BaseCoverageOptions$1, l as CoverageIstanbulOptions$1, c as CoverageV8Options$1, m as CustomProviderOptions$1, n as Reporter$1, V as Vitest$1, o as BrowserScript$1, p as BrowserConfigOptions$1, q as BuiltinEnvironment$1, r as VitestEnvironment$1, P as Pool$1, s as PoolOptions$1, t as CSSModuleScopeStrategy$1, A as ApiConfig$1, u as VitestRunMode$1, D as DepsOptimizationOptions$1, v as TransformModePatterns$1, I as InlineConfig$1, w as TypecheckConfig$1, x as UserConfig$1, y as ResolvedConfig$1, z as ProjectConfig$1, U as UserWorkspaceConfig$1, E as BenchmarkUserOptions$1 } from './chunks/reporters.d.DG9VKi4m.js';
import { S as SnapshotEnvironment } from './environment.d-DHdQ1Csl.js';
import { S as SnapshotEnvironment, P as ParsedStack } from './environment.d-DHdQ1Csl.js';
import { S as SnapshotEnvironment, a as SnapshotEnvironmentOptions } from './environment.d-DHdQ1Csl.js';
import { S as SnapshotStateOptions, a as SnapshotMatchOptions, b as SnapshotResult, R as RawSnapshotInfo } from './rawSnapshot.d-lFsMJFUd.js';
import { S as SnapshotStateOptions, e as SnapshotSummary, b as SnapshotResult } from './rawSnapshot.d-lFsMJFUd.js';
import { S as Suite, F as File, T as Task, a as Test } from './tasks.d-hsdzc98-.js';
import { STATUS_CODES, IncomingMessage, ServerResponse } from 'node
import { SVGAttributes, CSSProperties, PropsWithoutRef, RefAttributes, JSX } from 'react';
import { SVGCommand } from "./types";
import { SVGCommand, CommandM, CommandL, CommandH, CommandV, CommandZ, CommandQ, CommandT, CommandC, CommandS, CommandA } from 'svg-pathdata/lib/types';
import { SVGCommand, TransformFunction } from "./types";
import { SVGElementContainer } from './svg-element-container';
import { SVGPathData } from "./SVGPathData";
import { SVGPathData } from 'svg-pathdata';
import { SVGPathDataParser } from "./SVGPathDataParser";
import { SVGPathDataTransformer } from "./SVGPathDataTransformer";
import { SVGProps } from "react";
import { SYN_COLOR_TYPE, SYN_MIX, VAL_SPEC } from './constant';
import { SYN_FN_CALC, SYN_FN_REL, SYN_FN_VAR, VAL_COMP } from './constant';
import { SavedValuation } from "./types/savedValuation";
import { Scalar } from '../nodes/Scalar';
import { ScaleContinuousNumeric as D3ScaleContinuousNumeric } from 'victory-vendor/d3-scale';
import { ScalePoint } from 'victory-vendor/d3-scale';
import { ScaleType, DataKey, AxisDomain } from '../util/types';
import { ScatterPointItem } from '../cartesian/Scatter';
import { ScatterPointItem } from './Scatter';
import { Schema } from '../schema/Schema';
import { Schema } from './schema.js';
import { Schema } from 'effect';
import { Schema, fields, invalidData, validData } from './__fixtures__/data';
import { ScienceModule } from './modules/science';
import { Scope } from "./scope";
import { Scope } from '@radix-ui/react-context';
import { ScopeBase } from './ScopeBase';
import { ScopeManager } from './ScopeManager';
import { ScopeType } from './ScopeType';
import { Script } from '../../../protocol/protocol.js';
import { ScrollArea } from "@/components/ui/scroll-area";
import { ScrollBodyType } from './ScrollBody';
import { ScrollBodyType } from './ScrollBody.js';
import { ScrollBoundsType } from './ScrollBounds';
import { ScrollBoundsType } from './ScrollBounds.js';
import { ScrollContainOptionType } from './ScrollContain';
import { ScrollContainOptionType } from './ScrollContain.js';
import { ScrollLooperType } from './ScrollLooper';
import { ScrollLooperType } from './ScrollLooper.js';
import { ScrollProgressType } from './ScrollProgress';
import { ScrollProgressType } from './ScrollProgress.js';
import { ScrollTargetType } from './ScrollTarget';
import { ScrollTargetType } from './ScrollTarget.js';
import { ScrollToType } from './ScrollTo';
import { ScrollToType } from './ScrollTo.js';
import { Search } from "lucide-react";
import { Search, X } from "lucide-react";
import { SearchAndFilterBar } from "./SearchAndFilterBar";
import { SearchContainer } from './Search/Search';
import { SearchX } from "lucide-react";
import { SeasonalAdjustment } from "@/components/valuation/SeasonalAdjustment";
import { SectionHeader } from "@/components/ui/design-system";
import { SectionParams } from "../types";
import { SecureContextOptions } from "tls";
import { SecureContextOptions } from 'node
import { SecurityDetails } from '../common/SecurityDetails.js';
import { SelectMultipleContextValue } from 'contexts/SelectMultiple';
import { SelectMultipleEventHandler } from './EventHandlers';
import { SelectMultipleProvider } from './SelectMultiple';
import { SelectQueryError } from './select-query-parser/utils'
import { SelectQueryError } from './select-query-parser/utils';
import { SelectRangeContextValue } from 'contexts/SelectRange';
import { SelectRangeContextValue, useSelectRange } from './SelectRangeContext';
import { SelectRangeEventHandler } from './EventHandlers';
import { SelectRangeProvider } from './SelectRange';
import { SelectSingleContextValue } from 'contexts/SelectSingle';
import { SelectSingleEventHandler } from './EventHandlers';
import { SelectSingleProvider } from './SelectSingle';
import { SelectedDays, useSelectedDays } from 'hooks/useSelectedDays';
import { Selector } from "./types";
import { Selector } from "css-what";
import { Selector, Traversal } from "./types";
import { Separator } from "@/components/ui/separator";
import { SequenceHooks, SequenceSetupFiles } from '@vitest/runner';
import { Serializable, EvaluationArgument, PageFunction, PageFunctionOn, SmartHandle, ElementHandleForTag, BindingSource } from './structs';
import { SerializedCookieJar } from './constants';
import { SerializedDiffOptions } from '@vitest/utils/diff';
import { Series } from 'victory-vendor/d3-shape';
import { Server as HTTPSServer } from "https";
import { ServerOptions as HttpsServerOptions, Server as HttpsServer } from 'node
import { ServiceDetailsForm } from "./ServiceDetailsForm";
import { ServiceHistoryDisplay } from "../service-history/ServiceHistoryDisplay";
import { ServiceHistoryDisplay } from "@/components/service-history/ServiceHistoryDisplay";
import { ServiceHistorySection } from "./ServiceHistorySection";
import { ServiceHistoryUploader } from "../service-history/ServiceHistoryUploader";
import { ServiceWorkerInstanceTuple, FindWorker } from '../../glossary'
import { ServiceWorkerMessage } from './start/utils/createMessageChannel'
import { Session } from 'chromium-bidi/lib/cjs/protocol/protocol.js';
import { Session, User } from "@supabase/supabase-js";
import { SetupApi } from "../core/SetupApi";
import { SetupApi } from '~/core/SetupApi'
import { SetupServerApi } from './SetupServerApi'
import { SetupServerCommonApi } from '../node/SetupServerCommonApi'
import { SetupServerCommonApi } from './SetupServerCommonApi'
import { SetupWorker } from './glossary'
import { SetupWorkerInternalContext, StartHandler } from '../glossary'
import { SetupWorkerInternalContext, StartOptions } from '../../glossary'
import { SetupWorkerInternalContext, StartOptions } from '../glossary'
import { SetupWorkerInternalContext, StopHandler } from '../glossary'
import { ShadowTreeWalker } from "@react-aria/utils";
import { SharedLoginForm } from "@/components/auth/forms/SharedLoginForm";
import { SharedOptions, LifeCycleEventEmitter, LifeCycleEventsMap } from "../core/sharedOptions";
import { SharedOptions, LifeCycleEventsMap } from '../sharedOptions.js';
import { SharedWorkerRealm } from './Realm.js';
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Shield } from "lucide-react";
import { ShieldX } from "lucide-react";
import { ShiftOptions } from '@floating-ui/dom';
import { ShiftOptions } from '@floating-ui/react-dom';
import { Side } from '@floating-ui/core';
import { Side } from '@floating-ui/dom';
import { Side } from '@floating-ui/react-dom';
import { Side } from '@floating-ui/utils';
import { SideCarComponent, SideCarMedium } from './types';
import { SideCarHOC } from './types';
import { SideObject } from '@floating-ui/core';
import { SideObject } from '@floating-ui/dom';
import { SideObject } from '@floating-ui/react-dom';
import { SideObject } from '@floating-ui/utils';
import { Sign } from './getTicks';
import { SigninForm } from "@/components/auth/forms/SigninForm";
import { SignupForm } from "./forms/SignupForm";
import { SignupForm } from "@/components/auth/forms/SignupForm";
import { SimpleDateModule } from './modules/date';
import { SimpleErrorReporter, errors } from '@vinejs/vine';
import { SimpleFaker } from './simple-faker';
import { SimpleHelpersModule } from './modules/helpers';
import { SimpleModuleBase } from '../../internal/module-base';
import { SimpleRNG } from "../utils/rng";
import { SimpleRNG } from "../utils/rng";
import { SimpleRNG } from 'src/utils/rng';
import { SimpleTransport } from './SimpleTransport.js';
import { SimplifyDeep } from '../types'
import { SimplifyDeep } from '../types';
import { Size } from './types';
import { Size, CartesianViewBox, CartesianTickItem } from './types';
import { SizeOptions } from '@floating-ui/dom';
import { SizeOptions } from '@floating-ui/react-dom';
import { Skeleton } from "@/components/ui/skeleton";
import { SkinTonePicker } from '../SkinTonePicker/SkinTonePicker';
import { SkinTonePickerLocation } from '../types/exposedTypes';
import { SkinTonePickerLocation } from '../types/exposedTypes';
import { SkinTonePickerMenu } from '../header/SkinTonePicker/SkinTonePicker';
import { SkinTones } from '../../../types/exposedTypes';
import { SkinTones } from '../../../types/exposedTypes';
import { SkinTones } from '../../types/exposedTypes';
import { SkinTones } from '../../types/exposedTypes';
import { SkinTones } from '../types/exposedTypes';
import { SkinTones } from '../types/exposedTypes';
import { SkinTones, SuggestionMode } from '../types/exposedTypes';
import { SkinTones, SuggestionMode } from '../types/exposedTypes';
import { SlideFocusType } from './SlideFocus';
import { SlideFocusType } from './SlideFocus.js';
import { SlideLooperType } from './SlideLooper';
import { SlideLooperType } from './SlideLooper.js';
import { SlideRegistryType } from './SlideRegistry';
import { SlideRegistryType } from './SlideRegistry.js';
import { Slider } from "@/components/ui/slider";
import { SlidesHandlerOptionType } from './SlidesHandler';
import { SlidesHandlerOptionType } from './SlidesHandler.js';
import { SlidesHandlerType } from './SlidesHandler';
import { SlidesHandlerType } from './SlidesHandler.js';
import { SlidesInViewOptionsType } from './SlidesInView';
import { SlidesInViewOptionsType } from './SlidesInView.js';
import { SlidesInViewType } from './SlidesInView';
import { SlidesInViewType } from './SlidesInView.js';
import { SlidesToScrollOptionType } from './SlidesToScroll';
import { SlidesToScrollOptionType } from './SlidesToScroll.js';
import { SlidesToScrollType } from './SlidesToScroll';
import { SlidesToScrollType } from './SlidesToScroll.js';
import { Slot } from "@radix-ui/react-slot";
import { Slot } from '@radix-ui/react-slot';
import { SmartBuffer } from './smartbuffer';
import { SnapshotEnvironment } from '@vitest/snapshot/environment';
import { SnapshotManager } from '@vitest/snapshot/manager';
import { SnapshotResult } from '@vitest/snapshot';
import { SnapshotState } from '@vitest/snapshot';
import { SnapshotSummary, SnapshotStateOptions } from '@vitest/snapshot';
import { SnapshotUpdateState } from '@vitest/snapshot';
import { Socket } from "net";
import { Socket } from 'net'
import { Socket } from 'node
import { Socket, SocketConnectOpts } from 'net';
import { SocksClientError } from '../common/util';
import { SocksClientOptions, SocksClientChainOptions } from '../client/socksclient';
import { SocksClientOptions, SocksClientChainOptions } from './constants';
import { SocksClientOptions, SocksClientChainOptions, SocksRemoteHost, SocksProxy, SocksClientBoundEvent, SocksClientEstablishedEvent, SocksUDPFrameDetails } from '../common/constants';
import { SocksProxy } from 'socks';
import { Source } from '../language/source';
import { Source } from './source';
import { SourceMap } from './postcss.js'
import { SourceMapConsumer } from 'source-map-js'
import { Sparkles } from "lucide-react";
import { SpecIterableIterator } from './fetch'
import { StackTraceParserOptions } from '@vitest/utils/source-map';
import { StandardFonts } from "./StandardFonts";
import { StandardFonts } from "./StandardFonts";
import { StandardFonts } from 'src/api/StandardFonts';
import { Star } from "lucide-react";
import { StartOptions } from '../../glossary'
import { StartOptions, SetupWorker } from 'msw/browser';
import { StartOptions, SetupWorkerInternalContext } from '../../glossary'
import { StatCard } from "@/components/stats/StatCard";
import { StateCreator, StoreApi, StoreMutatorIdentifier } from '../vanilla';
import { StateCreator, StoreMutatorIdentifier } from '../vanilla';
import { Static } from '../typebox';
import { Static, Type } from '@sinclair/typebox';
import { Stats } from 'browserslist'
import { Stats } from 'node
import { Stats, createReadStream } from 'fs';
import { StatsCard } from "@/components/stats/StatsCard";
import { StepProgressIndicator } from "./StepProgressIndicator";
import { StorageApiError, StorageUnknownError } from './errors'
import { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'
import { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';
import { StorageError } from '../lib/errors';
import { Store } from '../store';
import { Store } from './store';
import { StoreApi } from 'zustand';
import { Strategy } from '@floating-ui/core';
import { Strategy } from '@floating-ui/dom';
import { Strategy } from '@floating-ui/react-dom';
import { Strategy } from '@floating-ui/utils';
import { Stream } from 'stream';
import { StreamType } from "./Stream";
import { StreamType } from "./Stream";
import { StreamType } from 'src/core/streams/Stream';
import { StringDecoder } from 'node
import { StringEncoding } from "./StringEncoding";
import { StringModule } from './modules/string';
import { StringValueToken } from '../syntax/tokenizer';
import { Stringifier } from './postcss.js'
import { Stringifier, Syntax } from './postcss.js'
import { Struct, validate } from 'superstruct';
import { StructError, validate } from 'superstruct';
import { StyledComponent } from 'types/Styles';
import { Styles } from 'flairup';
import { Styles, createSheet } from 'flairup';
import { Subject, Subscription } from '../utils/createSubject';
import { SubmitHandler, useForm } from 'react-hook-form';
import { SubmitOfferParams, useDealerOffers } from "@/hooks/useDealerOffers";
import { Subscribable } from './subscribable'
import { Subscribable } from './subscribable.js';
import { SubscriptionManager } from './SubscriptionManager.js';
import { SuccessOrFail } from "./vm-interface";
import { Suggested } from './Suggested';
import { SupabaseAuthClient } from './lib/SupabaseAuthClient'
import { SupabaseAuthClient } from './lib/SupabaseAuthClient';
import { SupabaseAuthClientOptions } from './types'
import { SupabaseAuthClientOptions } from './types';
import { SupabaseClientOptions } from './types'
import { SupabaseClientOptions } from './types';
import { SupportedStorage } from './types'
import { SupportedStorage } from './types';
import { Switch } from "@/components/ui/switch";
import { SymbolType as D3SymbolType } from 'victory-vendor/d3-shape';
import { SymbolType } from '../util/types';
import { SymlinkError } from './symlink-error.js';
import { SyntaxFlag, color as colorParser } from '@csstools/css-color-parser';
import { SyntaxKind } from 'typescript';
import { System } from '..';
import { System } from '../system';
import { SystemModule } from './modules/system';
import { T as TestExecutionMethod } from './worker.d.CHGSOG0s.js';
import { T as TransformMode, U as UserConsoleLog, A as AfterSuiteRunMeta, E as Environment } from './environment.d.Dmw5ulng.js';
import { TAG_ID as $ } from '../common/html.js';
import { TAG_ID as $, NS } from '../common/html.js';
import { TAG_ID as $, NS } from './html.js';
import { TLSSocket, ConnectionOptions } from 'tls'
import { TSESLint } from '@typescript-eslint/utils';
import { TSESTree } from '@typescript-eslint/utils';
import { TabContentWrapper } from "./TabContentWrapper";
import { Table } from 'components/Table';
import { Table, TableProps } from './Table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TabsContent } from "@/components/ui/tabs";
import { TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TaggedEventHandler } from './addEventListener';
import { TarOptions } from './options.js';
import { TarOptions, TarOptionsAsyncFile, TarOptionsAsyncNoFile, TarOptionsSyncFile, TarOptionsSyncNoFile, TarOptionsWithAliases, TarOptionsWithAliasesAsync, TarOptionsWithAliasesAsyncFile, TarOptionsWithAliasesAsyncNoFile, TarOptionsWithAliasesFile, TarOptionsWithAliasesNoFile, TarOptionsWithAliasesSync, TarOptionsWithAliasesSyncFile, TarOptionsWithAliasesSyncNoFile } from './options.js';
import { TarOptions, TarOptionsWithAliases } from './options.js';
import { Target, TargetType } from '../api/Target.js';
import { TargetManager } from './TargetManager.js';
import { TargetType } from '../api/Target.js';
import { Task } from '../managers/tasks';
import { Task, TaskMeta, Suite, File, TaskResultPack, SequenceSetupFiles, SequenceHooks, CancelReason } from '@vitest/runner';
import { TaskManager } from '../common/WaitTask.js';
import { TaskResult, Bench, Options } from 'tinybench';
import { Test } from '@vitest/runner';
import { TestimonialsSection } from "@/components/home/TestimonialsSection";
import { TextAlignment } from "../text/alignment";
import { TextAlignment } from "../text/alignment";
import { TextAlignment } from "./alignment";
import { TextAlignment } from "./alignment";
import { TextAlignment } from 'src/api/text/alignment';
import { TextBounds } from '../../css/layout/text';
import { TextBounds } from '../css/layout/text';
import { TextContainer } from '../../dom/text-container';
import { TextContainer } from './text-container';
import { TextDecoder, TextEncoder } from "util";
import { TextEncoder } from 'util'
import { Textarea } from "@/components/ui/textarea";
import { Theme } from '../../types/exposedTypes';
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { ThemeProvider } from "@/components/ui/theme-provider";
import { ThemeToggle } from "@/components/theme/ThemeToggle";
import { TimeoutError } from '../common/Errors.js';
import { TimeoutSettings } from '../common/TimeoutSettings.js';
import { TitleStatusFactorCard } from "./TitleStatusFactorCard";
import { TitleStatusSelector } from "./TitleStatusSelector";
import { TlsOptions } from 'tls'
import { Toaster as SonnerToaster } from "sonner";
import { Toaster } from "@/components/ui/sonner";
import { Toaster } from "@/components/ui/toaster";
import { Toaster } from "sonner";
import { Toggle } from '@radix-ui/react-toggle';
import { Token } from './ast';
import { TokenKind } from './tokenKind';
import { TokenType } from "../tokenizer/types";
import { TokenType, tokenize } from '@csstools/css-tokenizer';
import { Tokenizer, TokenizerMode, type TokenHandler } from '../tokenizer/index.js';
import { TooltipProvider } from "@/components/ui/tooltip";
import { TooltipType } from '../component/DefaultTooltipContent';
import { Touch } from 'react';
import { TouchEvent } from 'react';
import { TraceMap } from './trace-mapping';
import { Tracing } from '../cdp/Tracing.js';
import { Tracing } from './Tracing.js';
import { Trans } from "react-i18next";
import { Trans } from './index.js';
import { Trans, TransProps, ErrorCode, ErrorArgs } from './TransWithoutContext.js';
import { TransferListItem as TransferListItem$1, MessagePort } from 'node
import { Transform, type TransformCallback } from "node
import { TransformFunction } from "./types";
import { TransformOptions as esbuild_TransformOptions, TransformResult as esbuild_TransformResult, BuildOptions as esbuild_BuildOptions } from 'esbuild';
import { TransformOptions, JITIOptions, JITIImportOptions } from "./types";
import { TransformOptions, ParserOptions } from '@babel/core';
import { TransformOptions, TRANSFORM_RESULT } from "./types";
import { TransformProperties, SVGPathProperties, VariableKeyframesDefinition, MotionValue, JSAnimation, KeyframeResolver, OnKeyframesResolved, Transition as Transition$1, Batcher } from 'motion-dom';
import { TransformProperties, SVGPathProperties, VariableKeyframesDefinition, MotionValue, Transition as Transition$1, Batcher } from 'motion-dom';
import { TransformResult as TransformResult$1, UserConfig as UserConfig$1, DepOptimizationConfig, ServerOptions, ConfigEnv, AliasOptions, ViteDevServer, ModuleNode } from 'vite';
import { TransformResult } from 'vite';
import { TransformResult, ViteDevServer } from 'vite';
import { TransformValue } from './isTransform';
import { TransformableSVG } from "./TransformableSVG";
import { TransformationMatrix } from "../../types/matrix";
import { TransformationMatrix } from "../../types/matrix";
import { TransformationMatrix } from "../types/matrix";
import { TransformationMatrix } from "../types/matrix";
import { TransformationMatrix } from 'src/types/matrix';
import { TranslateType } from './Translate';
import { TranslateType } from './Translate.js';
import { Trash2 } from "lucide-react";
import { TrendIndicator } from "./TrendIndicator";
import { TrendingDown, TrendingUp } from "lucide-react";
import { Trie, int } from './Trie';
import { Trophy } from "lucide-react";
import { TrustedTypePolicy, TrustedHTML, TrustedTypesWindow } from 'trusted-types/lib';
import { TwelveMonthForecastTab } from "./TwelveMonthForecastTab";
import { Type } from "../lib/types";
import { Type } from '@sinclair/typebox';
import { Type } from 'arktype';
import { Type } from 'class-transformer';
import { TypeCheck } from '@sinclair/typebox/compiler';
import { TypeCompiler } from '@sinclair/typebox/compiler';
import { TypeFeatures } from "../types/fontkit";
import { TypeFeatures } from "../types/fontkit";
import { TypeFeatures } from 'src/types/fontkit';
import { TypeInfo } from '../utilities/TypeInfo';
import { U as UserConsoleLog } from './environment.d.Dmw5ulng.js';
import { UISelectionRange } from '../../document';
import { UNSAFE_ErrorResponseImpl as ErrorResponseImpl } from "@remix-run/router";
import { URIRegExps } from "./uri";
import { URISchemeHandler } from "../uri";
import { URISchemeHandler, URIComponents } from "../uri";
import { URISchemeHandler, URIComponents, URIOptions } from "../uri";
import { URISchemeHandler, URIOptions } from "../uri";
import { URL } from "url";
import { URL } from 'node
import { URL } from 'url'
import { URL } from 'url';
import { URL, URLSearchParams } from 'url'
import { URL, UrlObject } from 'url'
import { URNComponents } from "./urn";
import { UnauthorizedRedirectTab } from "./UnauthorizedRedirectTab";
import { UnexpectedObjectTypeError } from 'src/core/errors';
import { UnhandledRequestStrategy } from '../utils/request/onUnhandledRequest.js';
import { UnhandledRequestStrategy } from './utils/request/onUnhandledRequest.js';
import { UnifiedValuationHeader } from "./header/UnifiedValuationHeader";
import { UniqueOption } from '../util/payload/getUniqPayload';
import { Unpack, UnpackSync } from './unpack.js';
import { Unsplash } from './providers/unsplash';
import { Update, HMRPayload } from '../../types/hmrPayload.js';
import { Upload } from "lucide-react";
import { Upload, User } from "lucide-react";
import { Upload, X } from "lucide-react";
import { UploadCommand } from "./transfer";
import { UploadProgressIndicator } from "./UploadProgressIndicator";
import { UploadStatusButton } from "./UploadStatusButton";
import { UsageInstance } from './usage';
import { UsageInstance, FailureFunction } from './usage';
import { UseBaseQueryOptions } from './types.js';
import { UseFormReturn } from "react-hook-form";
import { UseInfiniteQueryOptions } from './types.js';
import { UseMutationOptions, UseMutationResult } from './types.js';
import { UseQueryOptions } from './types.js';
import { UseQueryResult } from "@tanstack/react-query";
import { UseQueryResult, DefinedUseQueryResult, UseQueryOptions } from './types.js';
import { UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult } from './types.js';
import { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types.js';
import { UseSuspenseQueryResult, UseSuspenseQueryOptions } from './types.js';
import { UseThemeProps, ThemeProviderProps } from './types.js';
import { User } from "@supabase/supabase-js";
import { User } from "lucide-react";
import { UserAuth } from "@/components/auth/UserAuth";
import { UserConfig as UserConfig$1, ConfigEnv } from 'vite';
import { UserContext } from './UserContext.js';
import { UserContext } from './core/UserContext.js';
import { UserContextConfig } from './UserContextConfig.js';
import { UserProfile } from "@/types/auth";
import { UserPrompt } from './UserPrompt.js';
import { UserRole } from "@/types/auth";
import { V as ViteNodeServerOptions } from './index.d-CWZbpOcv.js';
import { V as ViteRuntimeOptions, b as ViteModuleRunner, M as ModuleCacheMap, c as HMRClient, R as ResolvedResult, d as ViteRuntimeModuleContext } from './types.d-aGj9QkWt.js';
import { V as Vitest, T as TestProject, b as TestProjectConfiguration, I as InlineConfig } from './reporters.d.DG9VKi4m.js';
import { VALIDATION_MODE } from '../constants';
import { VFile } from 'vfile';
import { VFileMessage } from 'vfile-message';
import { VINLookupForm } from "./VINLookupForm";
import { VINLookupForm } from "@/components/lookup/vin/StandardVinLookupForm";
import { VINLookupForm } from "@/components/lookup/vin/VINLookupForm";
import { ValidationError } from "@/components/common/ValidationError";
import { ValidationError } from 'io-ts';
import { ValidationError, validate, validateSync } from 'class-validator';
import { ValidationInstance } from './validation';
import { ValidationInstance, KeyOrPos } from './validation';
import { ValidationMessage } from "./ValidationMessage";
import { ValidationModeFlags } from '../types';
import { ValidationOptions } from '@vinejs/vine/build/src/types';
import { ValidationRule } from '../types';
import { ValidationRule, ValidationValue, ValidationValueMessage } from '../types';
import { Validator } from 'fluentvalidation-ts';
import { ValidatorOptions } from 'class-validator';
import { Valuation } from "@/types/dealer";
import { Valuation } from "@/types/valuation-history";
import { Valuation, ValuationRowProps } from "../types";
import { ValuationAuditTrail } from "./ValuationAuditTrail";
import { ValuationCard } from "@/components/dashboard/ValuationCard";
import { ValuationErrorState } from "./shared/ValuationErrorState";
import { ValuationErrorState } from "@/components/premium/lookup/shared/ValuationErrorState";
import { ValuationFactorsGrid } from "./condition/factors/ValuationFactorsGrid";
import { ValuationFactorsGrid } from "./factors/ValuationFactorsGrid";
import { ValuationFactorsGrid } from "@/components/valuation/condition/factors/ValuationFactorsGrid";
import { ValuationInput } from "@/utils/valuation/types";
import { ValuationInput, ValuationResult } from "@/types/valuation";
import { ValuationParams, ValuationResult } from "./types";
import { ValuationProvider } from "./context/ValuationContext";
import { ValuationProvider } from "@/hooks/useValuationContext";
import { ValuationResult } from "@/modules/valuation-result";
import { ValuationResult } from "@/types/valuation";
import { ValuationResults } from "./ValuationResults";
import { ValuationResults } from "@/components/premium/common/ValuationResults";
import { ValuationResults } from "@/components/valuation/ValuationResults";
import { ValuationRow } from "./ValuationRow";
import { ValuationServiceId } from "../services";
import { ValuationServiceId } from "./services";
import { ValuationStages } from "./shared/ValuationStages";
import { ValuationTable } from "./components/ValuationTable";
import { ValuationTable } from "./valuation-history/ValuationTable";
import { ValuationWithCondition } from "@/types/dealer";
import { Value, type ValueError } from '@sinclair/typebox/value';
import { ValueErrorIterator } from '../errors/index';
import { ValuePropositionSection } from "@/components/home/ValuePropositionSection";
import { ValueSetter } from "./Setter.js";
import { ValueType, NameType, Payload, Props as ToltipContentProps } from './DefaultTooltipContent';
import { Variable } from '../variable';
import { VariableBase } from './VariableBase';
import { Variants } from "framer-motion";
import { Vector } from './vector';
import { Vector1DType } from './Vector1d';
import { Vector1DType } from './Vector1d.js';
import { VehicleBasicInfoFields } from "./components/VehicleBasicInfoFields";
import { VehicleBasicInfoFields } from "./manual/components/VehicleBasicInfoFields";
import { VehicleCard } from "../inventory/VehicleCard";
import { VehicleCard } from "./VehicleCard";
import { VehicleDetailsFields } from "./components/VehicleDetailsFields";
import { VehicleDetailsFields } from "./manual/components/VehicleDetailsFields";
import { VehicleDetailsFields } from "./vehicle-details/VehicleDetailsFields";
import { VehicleDetailsForm } from "./vehicle-details/VehicleDetailsForm";
import { VehicleDetailsForm } from "@/components/premium/form/steps/vehicle-details/VehicleDetailsForm";
import { VehicleDetailsGrid } from "./VehicleDetailsGrid";
import { VehicleDetailsInputs } from "@/components/lookup/form-parts/VehicleDetailsInputs";
import { VehicleDetailsSummary } from "./review/VehicleDetailsSummary";
import { VehicleForm } from "./modals/VehicleForm";
import { VehicleFormData } from "../schemas/vehicleSchema";
import { VehicleFormData } from "./schemas/vehicleSchema";
import { VehicleFormTooltip } from "@/components/form/VehicleFormToolTip";
import { VehicleFormValues, vehicleSchema } from "./schemas/vehicleSchema";
import { VehicleFoundCard } from "./plate/VehicleFoundCard";
import { VehicleFoundCard } from "@/components/premium/lookup/plate/VehicleFoundCard";
import { VehicleGrid } from "./VehicleGrid";
import { VehicleHistory } from "./VehicleHistory";
import { VehicleHistoryForm } from "./VehicleHistoryForm";
import { VehicleHistorySection } from "@/components/title-ownership/VehicleHistorySection";
import { VehicleHistoryTab } from "@/components/premium/VehicleHistoryTab";
import { VehicleInfoCard } from "@/components/lookup/VehicleInfoCard";
import { VehicleLookupSchema } from "@/utils/schemas";
import { VehicleMake, VehicleModel } from "@/hooks/useMakeModels";
import { VehicleModule } from './modules/vehicle';
import { VehicleScoreInfo } from "./scoring/VehicleScoreInfo";
import { VehicleScoring } from "./VehicleScoring";
import { VehicleSelectorWrapper } from "./vehicle-selector/VehicleSelectorWrapper";
import { VehicleSummary } from "./review/VehicleSummary";
import { VehicleUploadButton } from "./VehicleUploadButton";
import { VehicleUploadForm } from "./VehicleUploadForm";
import { VehicleUploadModal } from "./VehicleUploadModal";
import { VehicleUploadModal } from "@/components/dealer/vehicle-upload/VehicleUploadModal";
import { VehicleUploadProvider } from "./vehicle-upload/VehicleUploadProvider";
import { ViewBox } from '../util/types';
import { ViewOnlyEmoji } from '../emoji/ViewOnlyEmoji';
import { ViewOnlyEmoji } from './ViewOnlyEmoji';
import { VinDecoderForm } from "@/components/lookup/VinDecoderForm";
import { VinDecoderResponse } from "@/types/api";
import { VinInfoMessage } from "@/components/validation/VinInfoMessage";
import { VinInput } from "@/components/premium/lookup/VinInput";
import { VinInput } from "@/components/premium/lookup/vin/VinInput";
import { VinInputField } from "./components/VinInputField";
import { VinInputField } from "./manual/components/VinInputField";
import { VinInputSection } from "./VinInputSection";
import { VinLookupTab } from "./VinLookupTab";
import { VinSchema } from "@/utils/validation/schemas";
import { VinSubmitButton } from "@/components/premium/lookup/VinSubmitButton";
import { VineValidator } from '@vinejs/vine';
import { VirtualElement } from '@floating-ui/dom';
import { VirtualElement } from '@floating-ui/react-dom';
import { VirtualElement } from '@floating-ui/utils';
import { Virtualizer, PartialKeys, VirtualizerOptions } from '@tanstack/virtual-core';
import { Visitor } from "./gen/visitor";
import { Visitor } from './Visitor';
import { VisitorBase } from './VisitorBase';
import { ViteNodeResolveId, ModuleCacheMap, ModuleExecutionInfo } from 'vite-node';
import { ViteNodeRunner, ModuleExecutionInfo } from 'vite-node/client';
import { ViteNodeRunnerOptions } from 'vite-node';
import { ViteNodeServerOptions } from 'vite-node';
import { ViteRuntimeOptions, ViteModuleRunner, ViteRuntime, HMRRuntimeConnection } from 'vite/runtime';
import { VitestExecutor } from './execute.js';
import { VitestRunner, VitestRunnerImportSource, Suite, File, Task, CancelReason, TestContext } from '@vitest/runner';
import { VmCallResult } from "./vm-interface";
import { VpicVinLookup } from "@/components/valuation/VpicVinLookup";
import { W as WorkerContext } from './chunks/worker.d.C-KN07Ls.js';
import { W as WorkerContext$1 } from './chunks/worker.d.C-KN07Ls.js';
import { W as WorkerGlobalState, C as ContextRPC, B as BirpcOptions, R as RuntimeRPC } from './chunks/worker.d.CHGSOG0s.js';
import { WalkerBase } from "./walker.js";
import { WalkerState } from "../../types";
import { WalkerState } from "../types";
import { WalkerState, Options } from "../../types";
import { WarnData } from './warn-method.js';
import { WarnData, Warner, WarnEvent } from './warn-method.js';
import { WarnEvent, type WarnData, type Warner } from './warn-method.js';
import { WeakPasswordReasons } from './types'
import { WeakPasswordReasons } from './types';
import { WebSocketClassTransport } from './WebSocketClassTransport'
import { WebSocketClientConnectionProtocol } from '@mswjs/interceptors/WebSocket';
import { WebSocketClientConnectionProtocol } from '@mswjs/interceptors/lib/browser/interceptors/WebSocket'
import { WebSocketClientConnectionProtocol } from '@mswjs/interceptors/lib/browser/interceptors/WebSocket';
import { WebSocketClientConnectionProtocol, WebSocketData } from '@mswjs/interceptors/WebSocket';
import { WebSocketClientManager } from './ws/WebSocketClientManager'
import { WebSocketClientStore } from './WebSocketClientStore'
import { WebSocketClientStore, SerializedWebSocketClient } from './WebSocketClientStore.js';
import { WebSocketConnectionData } from '@mswjs/interceptors/WebSocket';
import { WebSocketConnectionData } from '@mswjs/interceptors/lib/browser/interceptors/WebSocket';
import { WebSocketConnectionData, WebSocketClientConnection } from '@mswjs/interceptors/WebSocket';
import { WebSocketData } from '@mswjs/interceptors/WebSocket'
import { WebSocketData } from '@mswjs/interceptors/WebSocket';
import { WebSocketData } from '@mswjs/interceptors/lib/browser/interceptors/WebSocket';
import { WebSocketData, WebSocketClientConnectionProtocol, WebSocketClientConnection } from '@mswjs/interceptors/WebSocket';
import { WebSocketHandler } from "../core/handlers/WebSocketHandler";
import { WebSocketHandler } from '../../handlers/WebSocketHandler'
import { WebSocketHandler } from '../../handlers/WebSocketHandler.js';
import { WebSocketHandler } from '../handlers/WebSocketHandler.js';
import { WebSocketHandler } from './WebSocketHandler'
import { WebSocketHandler } from './handlers/WebSocketHandler.js';
import { WebSocketHandler, kDispatchEvent } from '../handlers/WebSocketHandler'
import { WebSocketHandlerEventMap, WebSocketHandler } from './handlers/WebSocketHandler.js';
import { WebSocketIndexedDBClientStore } from './WebSocketIndexedDBClientStore'
import { WebSocketInterceptor } from '@mswjs/interceptors/WebSocket'
import { WebSocketInterceptor } from '@mswjs/interceptors/WebSocket';
import { WebSocketMemoryClientStore } from './WebSocketMemoryClientStore'
import { WebSocketServerConnection } from './WebSocketServerConnection'
import { WebWorker } from '../api/WebWorker.js';
import { WeekNumber } from 'components/WeekNumber';
import { WeekNumber, WeekNumberProps } from './WeekNumber';
import { WeekNumberLabel } from 'types/Labels';
import { WeekNumberProps } from 'components/WeekNumber';
import { WeekdayLabel } from 'types/Labels';
import { WindowRealm } from './Realm.js';
import { WindowType } from './utils';
import { WindowType } from './utils.js';
import { WordModule } from './modules/word';
import { Writable } from "node
import { Writable } from "stream";
import { Writable } from 'node
import { Writable, Readable } from "stream";
import { Writable, finished } from 'node
import { WriteEntry } from './write-entry.js';
import { WriteEntry, WriteEntrySync, WriteEntryTar } from './write-entry.js';
import { X } from "lucide-react";
import { XMLHttpRequestController } from './XMLHttpRequestController'
import { XMLHttpRequestEmitter } from '.'
import { XMLHttpRequestInterceptor } from '../interceptors/XMLHttpRequest'
import { XMLHttpRequestInterceptor } from '../interceptors/XMLHttpRequest/index.js';
import { XMLHttpRequestInterceptor } from './interceptors/XMLHttpRequest'
import { XMLHttpRequestInterceptor } from './interceptors/XMLHttpRequest/index.js';
import { XMLHttpRequestInterceptor } from '@mswjs/interceptors/XMLHttpRequest'
import { Y18N } from 'y18n';
import { YAMLMap } from '../../nodes/YAMLMap';
import { YAMLMap } from '../nodes/YAMLMap';
import { YAMLParseError, YAMLWarning } from '../errors';
import { YAMLSeq } from '../../nodes/YAMLSeq';
import { YAMLSeq } from '../nodes/YAMLSeq';
import { YError } from './yerror';
import { Yallist } from 'yallist';
import { YargsInstance } from './yargs';
import { YargsInstance, Arguments } from './yargs';
import { YargsInstance, Options, OptionDefinition, Context, Arguments, DetailedArguments } from './yargs';
import { YearFactorCard } from "./YearFactorCard";
import { YearMileageInputs } from "@/components/premium/lookup/form-parts/fields/YearMileageInputs";
import { YearsDropdown } from 'components/YearsDropdown';
import { YearsDropdown, YearsDropdownProps } from './YearsDropdown';
import { ZipCodeInput as CommonZipCodeInput } from "@/components/common/ZipCodeInput";
import { ZipCodeInput } from "../ZipCodeInput";
import { ZipCodeInput } from "./ZipCodeInput";
import { ZipCodeInput } from "@/components/common/ZipCodeInput";
import { ZipCodeInput } from "@/components/lookup/form-parts/ZipCodeInput";
import { ZipValidation } from "./ZipValidation";
import { ZipValidation } from "@/components/common/ZipValidation";
import { ZlibOptions } from "zlib";
import { ZlibOptions } from 'node
import { ZodError, z } from 'zod';
import { ZodErrorMap } from "../ZodError";
import { _isElementHandle } from './ElementHandleSymbol.js';
import { a as BatchInterceptor } from './BatchInterceptor-67bf41ba.js';
import { a as BirpcReturn, b as WorkerRPC$1 } from './chunks/worker.d.CHGSOG0s.js';
import { a as GraphQLQuery, b as GraphQLVariables, e as GraphQLHandlerNameSelector, f as GraphQLResolverExtras, g as GraphQLResponseBody, G as GraphQLHandler } from './GraphQLHandler-DOfinX9J.js';
import { a as ResponseResolver, c as RequestHandlerOptions } from './HttpResponse-DQOloMJy.js';
import { a as RuntimeCoverageProviderModule } from './coverage.d.S9RMNXIe.js';
import { a as SerializedConfig } from './chunks/config.d.UqE-KR0o.js';
import { a as SerializedConfig } from './config.d.UqE-KR0o.js';
import { a as SerializedConfig, F as FakeTimerInstallOpts } from './config.d.UqE-KR0o.js';
import { a as SerializedConfig, F as FakeTimerInstallOpts, R as RuntimeOptions } from './chunks/config.d.UqE-KR0o.js';
import { a2c, annotateArcCommand, arcAt, assertNumbers, bezierAt, bezierRoot,
import { aE as QueryObserverResult, b as QueryClient, ad as QueryObserverOptions, w as Query, c as QueryObserver } from './hydration-BaHDIfRR.js';
import { absurd, flow, identity, not, pipe } from 'fp-ts/function';
import { act } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import { act, render, screen, waitFor } from "@testing-library/react";
import { act, renderHook } from "@testing-library/react-hooks";
import { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';
import { addDays } from 'date-fns';
import { addDays, Locale, startOfISOWeek, startOfWeek } from 'date-fns';
import { addDays, addMonths } from 'date-fns';
import { addDays, endOfMonth, startOfMonth } from 'date-fns';
import { addDays, format, parseISO } from 'date-fns';
import { addDays, subDays } from 'date-fns';
import { addMonths } from 'date-fns';
import { addMonths, differenceInCalendarMonths, startOfMonth } from 'date-fns';
import { addMonths, differenceInMonths } from 'date-fns';
import { addMonths, differenceInYears } from 'date-fns';
import { addMonths, isBefore, isSameMonth } from 'date-fns';
import { addMonths, isSameMonth } from 'date-fns';
import { addMonths, startOfMonth } from 'date-fns';
import { addMonths, startOfMonth, subMonths } from 'date-fns';
import { addPairToJSMap } from './addPairToJSMap';
import { addToEnd, addToStart, ensureQueryFn } from './utils'
import { addToRange } from './addToRange';
import { addToRange } from './utils/addToRange';
import { afterEach, describe, it, beforeEach, expect } from 'vitest';
import { afterEach, vi } from "vitest";
import { ajvResolver } from '..';
import { aliases } from "./aliases.js";
import { allEmojis, emojiNames, emojiUnified } from './emojiSelectors';
import { alphaNumericEmojiIndex } from '../../dataUtils/alphaNumericEmojiIndex';
import { analyzeImagesWithOpenAI } from "./openai-service.ts";
import { analyzePhotos } from "./photo/analyzePhotos";
import { analyzePhotos } from "@/services/photo/analyzePhotos";
import { apiInvoke } from "@/utils/api";
import { approxEqual, debounce, memo, notUndefined } from './utils'
import { arktypeResolver } from '..';
import { arrayAsString } from 'src/utils';
import { arrow } from '@floating-ui/react-dom';
import { asNumber } from 'src/api/objects';
import { asNumber, asPDFName, asPDFNumber } from 'src/api/objects';
import { asSelectors, ClassNames } from '../DomUtils/classNames';
import { asSelectors, ClassNames } from './classNames';
import { assert } from "./utils/assert.js";
import { assertIs } from 'src/utils';
import { assertIs, Cache, assertOrUndefined } from 'src/utils';
import { assertIs, assertMultiple, assertOrUndefined } from 'src/utils';
import { assertIs, assertOrUndefined } from 'src/utils';
import { assertIs, assertOrUndefined, assertIsOneOf } from 'src/utils';
import { assertIs, assertOrUndefined, assertPositive } from 'src/utils';
import { assertIs, error } from 'src/utils';
import { assertRange, error } from 'src/utils';
import { asyncDisposeSymbol } from '../util/disposable.js';
import { asyncDisposeSymbol, disposeSymbol } from '../util/disposable.js';
import { attachWebSocketLogger } from '~/core/ws/utils/attachWebSocketLogger'
import { autoPlacement } from '@floating-ui/react-dom';
import { autoUpdate } from '@floating-ui/dom';
import { autoUpdate } from '@floating-ui/react-dom';
import { availablePlans } from "./subscriptionData";
import { axe } from 'vitest-axe';
import { b as Awaitable$1, U as UserConsoleLog, M as ModuleGraphData, P as ProvidedContext, N as Nullable$1, c as Arrayable$1, d as ArgumentsType$1, e as MutableArray$1, C as Constructable$1, a as EnvironmentReturn$1, V as VmEnvironmentReturn$1, E as Environment$1, R as ResolvedTestEnvironment$1, J as JSDOMOptions$1, H as HappyDOMOptions$1, f as EnvironmentOptions$1 } from './chunks/environment.d.Dmw5ulng.js';
import { b as Awaitable, U as UserConsoleLog, c as Arrayable$1, A as AfterSuiteRunMeta, f as EnvironmentOptions, P as ProvidedContext } from './environment.d.Dmw5ulng.js';
import { b as HTMLElements, D as DOMMotionComponents, c as MotionComponentProps, N as ForwardRefComponent, H as HTMLMotionProps, Q as SVGMotionProps } from '../types.d-CtuPurYT.js';
import { b as ModuleMockOptions, a as ModuleMockFactoryWithHelper } from './types.d-D_aRZRdy.js';
import { b7 as QueryBehavior, a5 as InfiniteData, ab as InfiniteQueryPageParamsOptions } from './hydration-BaHDIfRR.js';
import { backgroundClip } from './property-descriptors/background-clip';
import { backgroundImage } from './property-descriptors/background-image';
import { backgroundOrigin } from './property-descriptors/background-origin';
import { backgroundPosition } from './property-descriptors/background-position';
import { backgroundRepeat } from './property-descriptors/background-repeat';
import { backgroundSize } from './property-descriptors/background-size';
import { base64UrlToUint8Array, stringFromBase64URL, stringToBase64URL } from './base64url'
import { baseUrlFromConnectionOptions } from '../Socket/utils/baseUrlFromConnectionOptions'
import { beforeEach, describe, expect, it, vi } from "vitest";
import { bindEvent } from './bindEvent'
import { bindEvent } from './utils/bindEvent'
import { blockquote } from './blockquote.js';
import { borderBottomLeftRadius, borderBottomRightRadius, borderTopLeftRadius, borderTopRightRadius } from './property-descriptors/border-radius';
import { borderBottomStyle, borderLeftStyle, borderRightStyle, borderTopStyle } from './property-descriptors/border-style';
import { borderBottomWidth, borderLeftWidth, borderRightWidth, borderTopWidth } from './property-descriptors/border-width';
import { boxShadow } from './property-descriptors/box-shadow';
import { buildValuationReport } from "../lib/valuation/buildValuationReport";
import { buildValuationReport } from "@/lib/valuation/buildValuationReport";
import { builders } from "./gen/builders";
import { buttonFromTarget } from '../DomUtils/selectors';
import { buttonFromTarget, emojiFromElement } from '../DomUtils/selectors';
import { buttonVariants } from "@/components/ui/button";
import { bypass } from './bypass'
import { bytesFor, Cache, reverseArray, sizeInBytes, sum } from 'src/utils';
import { c as BenchmarkAPI, a as BenchFunction } from './benchmark.d.BwvBVTda.js';
import { c as CoverageV8Options, R as ResolvedCoverageOptions, U as UserWorkspaceConfig, d as UserProjectConfigFn, e as UserProjectConfigExport, b as TestProjectConfiguration } from './chunks/reporters.d.DG9VKi4m.js';
import { c as MockerRegistry } from './registry.d-D765pazg.js';
import { c as MockerRegistry, g as MockedModule } from './registry.d-D765pazg.js';
import { calc } from '@csstools/css-calc';
import { calculateFinalValuation } from "../utils/valuation/calculateFinalValuation";
import { calculateFinalValuation } from "./calculateFinalValuation";
import { calculateFinalValuation } from "./valuationCalculator";
import { calculateFinalValuation } from "@/utils/valuationEngine";
import { camelCase } from './utilities';
import { camelCase, CamelCaseOptions } from './utilities';
import { canFetch, createRetryer, isCancelledError } from './retryer'
import { canParseUrl } from '../../utils/canParseUrl'
import { cancel as cancelAnimationFrame, request as requestAnimationFrame } from './animationFrame';
import { categoryFromCategoryConfig } from '../../config/categoryConfig';
import { categoryNameFromDom } from '../DomUtils/categoryNameFromDom';
import { cdnUrl } from '../config/cdnUrls';
import { charFromCode } from 'src/utils';
import { charFromCode } from 'src/utils/strings';
import { charFromCode, copyStringIntoBuffer } from 'src/utils';
import { checkGlobals } from './utils/internal/checkGlobals'
import { checkPremiumAccess } from "@/utils/premiumService";
import { checkWorkerIntegrity } from '../../utils/checkWorkerIntegrity'
import { cheerio, food, eleven } from './__fixtures__/fixtures.js';
import { cheerio, food, fruits } from '../__fixtures__/fixtures.js';
import { cheerio, forms } from '../__fixtures__/fixtures.js';
import { cheerio, fruits, food, noscript } from './__fixtures__/fixtures.js';
import { cheerio, mixedText } from '../__fixtures__/fixtures.js';
import { chromium } from "playwright";
import { classValidatorResolver } from '..';
import { cleanUrl } from '../url/cleanUrl'
import { cleanUrl } from './cleanUrl'
import { cleanUrl, getSearchParams } from '../utils/url/cleanUrl'
import { cleanup } from "@testing-library/react";
import { cleanup, render, fireEvent } from '@testing-library/react';
import { clear, deselectOptions, selectOptions, type, upload } from '../utility';
import { click, dblClick, tripleClick, hover, unhover, tab } from '../convenience';
import { cloneObject } from '../../../utils/cloneObject'
import { cloneObject } from './cloneObject'
import { clsx } from "clsx";
import { cn } from "@/lib/utils";
import { cn } from "@/utils/cn";
import { code } from './code.js';
import { coercePath, matchRequestUrl } from './matchRequestUrl'
import { combineComparators, createIsCircular } from './utils';
import { commonInteractionStyles } from '../../Stylesheet/stylesheet';
import { commonStyles, stylesheet } from '../../Stylesheet/stylesheet';
import { compareConfig } from '../../config/compareConfig';
import { compareConfig } from './config/compareConfig';
import { compile, generate } from "./compile.js";
import { composeEventHandlers } from '@radix-ui/primitive';
import { computePosition } from '@floating-ui/dom';
import { computePosition } from '@floating-ui/react-dom';
import { computedTypesResolver } from '..';
import { concatArrayBuffer } from './concatArrayBuffer'
import { concatArrayBuffer } from './utils/concatArrayBuffer'
import { config } from './config-helper';
import { constants } from 'micromark-util-symbol';
import { contains } from '../static.js';
import { content } from './property-descriptors/content';
import { convertNewAdjustmentsToLegacyFormat } from "@/utils/formatters/adjustment-formatter";
import { convertVehicleInfoToReportData, downloadPdf } from "@/utils/pdf";
import { cookieStore } from '../cookieStore'
import { copy, cut, paste } from '../clipboard';
import { copyStringIntoBuffer } from 'src/utils';
import { copyStringIntoBuffer, last } from 'src/utils';
import { copyStringIntoBuffer, numberToString } from 'src/utils/index';
import { copyStringIntoBuffer, padStart } from 'src/utils';
import { copyStringIntoBuffer, waitForTick } from 'src/utils';
import { corsHeaders } from "../_shared/cors.ts";
import { corsHeaders } from "./cors.ts";
import { counterIncrement } from './property-descriptors/counter-increment';
import { counterReset } from './property-descriptors/counter-reset';
import { createBrowserRouter, RouterProvider } from "react-router-dom";
import { createClassGroupUtils } from './class-group-utils'
import { createClient } from "@supabase/supabase-js";
import { createClient } from "https
import { createCmap } from 'src/core/embedders/CMap';
import { createConfigUtils } from './config-utils'
import { createConnection } from "net";
import { createContext, ReactNode, useContext } from 'react';
import { createContext, ReactNode, useContext, useState } from "react";
import { createContext, ReactNode, useContext, useState } from 'react';
import { createContext, useContext, ReactNode } from 'react';
import { createContext, useContext, useEffect, useState } from "react";
import { createContextScope } from '@radix-ui/react-context';
import { createDialogScope } from '@radix-ui/react-dialog';
import { createEmailCampaign } from "@/utils/emailService";
import { createEvent } from './createEvent'
import { createEvent } from './utils/createEvent'
import { createFallbackRequestListener } from './createFallbackRequestListener'
import { createFallbackStart } from './start/createFallbackStart'
import { createFallbackStop } from './stop/createFallbackStop'
import { createFormControl } from './createFormControl';
import { createLocation, locationsAreEqual } from './LocationUtils';
import { createLruCache } from './lru-cache'
import { createNetworkError } from './createNetworkError'
import { createNetworkError } from './utils/createNetworkError'
import { createParseClassName } from './parse-class-name'
import { createProxy } from '../../utils/createProxy'
import { createProxy } from './createProxy'
import { createRef } from 'react';
import { createRequestId } from '../../createRequestId'
import { createRequestId } from './createRequestId'
import { createRequestId } from '@mswjs/interceptors'
import { createRequestId, encodeBuffer } from '@mswjs/interceptors'
import { createRequestListener } from './createRequestListener'
import { createResponse } from './utils/createResponse'
import { createResponseListener } from './createResponseListener'
import { createRetryer } from './retryer'
import { createSearchParams } from "./dom";
import { createServer, type Server } from 'node
import { createServerErrorResponse } from '../../utils/responseUtils'
import { createSlottable } from '@radix-ui/react-slot';
import { createStartHandler } from './start/createStartHandler'
import { createStop } from './stop/createStop'
import { createTailwindMerge } from './create-tailwind-merge'
import { createXMLHttpRequestProxy } from './XMLHttpRequestProxy'
import { cssCalc as csscalc } from './js/css-calc';
import { cssCalc } from './css-calc';
import { cssVar } from './js/css-var';
import { customRender } from 'test/render';
import { customRender } from 'test/render/customRender';
import { cva } from "class-variance-authority";
import { cva, type VariantProps } from "class-variance-authority";
import { cx } from 'flairup';
import { d as DefaultRequestMultipartBody } from '../../HttpResponse-DQOloMJy.js';
import { darkMode, stylesheet } from '../../../Stylesheet/stylesheet';
import { darkMode, stylesheet } from '../../Stylesheet/stylesheet';
import { daysToMonthWeeks } from './daysToMonthWeeks';
import { dealerFormSchema } from "../schemas/dealerSignupSchema";
import { decodeBuffer, encodeBuffer } from './bufferUtils'
import { decodeFromBase64DataUri } from 'src/utils/base64';
import { decodePDFRawStream } from 'src/core/streams/decode';
import { decodeVin } from "../services/vinService";
import { decodeXML, decodeHTML, DecodingMode } from "./decode.js";
import { decompressResponse } from './utils/decompression'
import { default as createBrowserHistory } from './createBrowserHistory';
import { default as createHashHistory } from './createHashHistory';
import { default as createMemoryHistory } from './createMemoryHistory';
import { defaultClassNames } from './defaultClassNames';
import { defaultClassNames } from 'contexts/DayPicker/defaultClassNames';
import { defaultLoaders, defaultLoadersSync, getDefaultSearchPlaces, getDefaultSearchPlacesSync, globalConfigSearchPlaces, globalConfigSearchPlacesSync } from './defaults';
import { defaultReportOptions } from "./defaultReportOptions";
import { defaultThrowOnError } from './suspense'
import { deferNetworkRequestsUntil } from './deferNetworkRequestsUntil'
import { defineConfig } from "vite";
import { defineConfig } from "vitest/config";
import { defineConfig } from 'vitest/config'
import { defineConfig, devices } from "@playwright/test";
import { defineConfig, globalIgnores } from "@eslint/config-helpers";
import { definition } from './definition.js';
import { degrees } from 'src/api/rotations';
import { degrees, Rotation, toDegrees } from 'src/api/rotations';
import { degreesToRadians } from 'src/api/rotations';
import { deriveFontFlags } from 'src/core/embedders/FontFlags';
import { describe, expect, it } from "vitest";
import { describe, expect, it, vi } from "vitest";
import { describe, it, expect } from "vitest";
import { describe, it, expect } from 'vitest'
import { describe, it, expect } from 'vitest';
import { describe, it, expect, afterEach } from 'vitest';
import { describe, it, expect, beforeEach } from 'vitest';
import { describe, it, expect, vitest } from "vitest";
import { describe, vi, it, expect, afterEach } from 'vitest'
import { detectEmojyPartiallyBelowFold } from '../DomUtils/detectEmojyPartiallyBelowFold';
import { detectOverflow } from '@floating-ui/dom';
import { detectOverflow } from '@floating-ui/react-dom';
import { devUtils } from '../../utils/internal/devUtils'
import { devUtils } from '../utils/internal/devUtils'
import { devUtils } from './devUtils'
import { devUtils } from './utils/internal/devUtils'
import { devUtils } from '~/core/utils/internal/devUtils'
import { diff, printDiffOrStringify } from '@vitest/utils/diff';
import { differenceInCalendarDays, format as _format, parse } from 'date-fns';
import { differenceInCalendarDays, isAfter, isDate, isSameDay } from 'date-fns';
import { differenceInCalendarDays, isSameDay } from 'date-fns';
import { direction } from './property-descriptors/direction';
import { dirname } from "path";
import { disableGlobalCursorStyles, enableGlobalCursorStyles } from "./utils/cursor.js";
import { dispatchEvent, dispatchUIEvent } from '../event';
import { display } from './property-descriptors/display';
import { disposeSymbol } from '../../util/disposable.js';
import { disposeSymbol } from '../util/disposable.js';
import { disposeSymbol } from './disposable.js';
import { disposeSymbol, asyncDisposeSymbol } from '../util/disposable.js';
import { domEach } from '../utils.js';
import { domEach, camelCase, cssCase } from '../utils.js';
import { domEach, isCheerio } from '../utils.js';
import { domEach, isHtml, isCheerio } from '../utils.js';
import { downloadPdf } from "@/utils/pdf";
import { drawConditionBox } from "./drawConditionBox";
import { drawConditionIssues } from "./drawConditionIssues";
import { drawImage, rotateInPlace } from '../operations';
import { drawVerificationBadge } from "./drawVerificationBadge";
import { duration } from './property-descriptors/duration';
import { e as HttpResponse } from './HttpResponse-DQOloMJy.js';
import { effectTsResolver } from '..';
import { emitAsync } from '../../utils/emitAsync'
import { emitAsync } from './emitAsync'
import { emojiByUnified } from '../../dataUtils/emojiSelectors';
import { emojiFromElement, NullableElement } from '../DomUtils/selectors';
import { emojiHasVariations } from '../dataUtils/emojiSelectors';
import { emojiHasVariations, emojiNames } from '../../dataUtils/emojiSelectors';
import { emojiNames } from '../dataUtils/emojiSelectors';
import { emojiStyles } from './emojiStyles';
import { emojiUnified } from '../dataUtils/emojiSelectors';
import { emojiUnified } from './emojiSelectors';
import { emojiUnified, emojiVariations } from '../dataUtils/emojiSelectors';
import { emojisByCategory, emojiUnified } from '../../dataUtils/emojiSelectors';
import { emphasis } from './emphasis.js';
import { enGB, enUS } from 'date-fns/locale';
import { enUS } from 'date-fns/locale';
import { enableMocking } from './utils/enableMocking'
import { encodeBuffer } from '@mswjs/interceptors'
import { encodeHTML, encodeNonAsciiHTML } from "./encode.js";
import { encodeSVGPath } from "./SVGPathDataEncoder";
import { endOfMonth, startOfDay, startOfMonth } from 'date-fns';
import { enforceRouteIntegrity } from "./route-validation/validateRoutes";
import { enhancedCache } from "@/utils/vehicle/enhancedCacheUtils";
import { enumUtil } from "./helpers/enumUtil";
import { errorHandler } from "./error-handling";
import { errorHandler } from "@/utils/error-handling";
import { errorUtil } from "./helpers/errorUtil";
import { es } from 'date-fns/locale';
import { eventMap } from './eventMap';
import { exceptions, ITrie, rules } from './data/trie';
import { executeHandlers } from './utils/executeHandlers'
import { expect, test } from "@playwright/test";
import { expiresAt, looksLikeFetchResponse, parseResponseAPIVersion } from './helpers'
import { extractDashedIdent, isColor as iscolor, splitValue } from './js/util';
import { extractRoutePaths } from "../route-validation";
import { fadeIn } from "./animations";
import { faker as fakerAF_ZA } from './af_ZA';
import { faker as fakerAR } from './ar';
import { faker as fakerAZ } from './az';
import { faker as fakerBASE } from './base';
import { faker as fakerCS_CZ } from './cs_CZ';
import { faker as fakerDA } from './da';
import { faker as fakerDE } from './de';
import { faker as fakerDE_AT } from './de_AT';
import { faker as fakerDE_CH } from './de_CH';
import { faker as fakerDV } from './dv';
import { faker as fakerEL } from './el';
import { faker as fakerEN } from './en';
import { faker as fakerEN_AU } from './en_AU';
import { faker as fakerEN_AU_ocker } from './en_AU_ocker';
import { faker as fakerEN_BORK } from './en_BORK';
import { faker as fakerEN_CA } from './en_CA';
import { faker as fakerEN_GB } from './en_GB';
import { faker as fakerEN_GH } from './en_GH';
import { faker as fakerEN_HK } from './en_HK';
import { faker as fakerEN_IE } from './en_IE';
import { faker as fakerEN_IN } from './en_IN';
import { faker as fakerEN_NG } from './en_NG';
import { faker as fakerEN_US } from './en_US';
import { faker as fakerEN_ZA } from './en_ZA';
import { faker as fakerEO } from './eo';
import { faker as fakerES } from './es';
import { faker as fakerES_MX } from './es_MX';
import { faker as fakerFA } from './fa';
import { faker as fakerFI } from './fi';
import { faker as fakerFR } from './fr';
import { faker as fakerFR_BE } from './fr_BE';
import { faker as fakerFR_CA } from './fr_CA';
import { faker as fakerFR_CH } from './fr_CH';
import { faker as fakerFR_LU } from './fr_LU';
import { faker as fakerFR_SN } from './fr_SN';
import { faker as fakerHE } from './he';
import { faker as fakerHR } from './hr';
import { faker as fakerHU } from './hu';
import { faker as fakerHY } from './hy';
import { faker as fakerID_ID } from './id_ID';
import { faker as fakerIT } from './it';
import { faker as fakerJA } from './ja';
import { faker as fakerKA_GE } from './ka_GE';
import { faker as fakerKO } from './ko';
import { faker as fakerLV } from './lv';
import { faker as fakerMK } from './mk';
import { faker as fakerNB_NO } from './nb_NO';
import { faker as fakerNE } from './ne';
import { faker as fakerNL } from './nl';
import { faker as fakerNL_BE } from './nl_BE';
import { faker as fakerPL } from './pl';
import { faker as fakerPT_BR } from './pt_BR';
import { faker as fakerPT_PT } from './pt_PT';
import { faker as fakerRO } from './ro';
import { faker as fakerRO_MD } from './ro_MD';
import { faker as fakerRU } from './ru';
import { faker as fakerSK } from './sk';
import { faker as fakerSR_RS_latin } from './sr_RS_latin';
import { faker as fakerSV } from './sv';
import { faker as fakerTH } from './th';
import { faker as fakerTR } from './tr';
import { faker as fakerUK } from './uk';
import { faker as fakerUR } from './ur';
import { faker as fakerVI } from './vi';
import { faker as fakerYO_NG } from './yo_NG';
import { faker as fakerZH_CN } from './zh_CN';
import { faker as fakerZH_TW } from './zh_TW';
import { faker as fakerZU_ZA } from './zu_ZA';
import { faker } from "@faker-js/faker";
import { fetchCarMaxApiListings } from "../utils/scrapers/carmax-api";
import { fetchCarMaxListings } from "../utils/scrapers/carmax"; // Use relative import for CLI
import { fetchCarsDotComListings } from "../utils/scrapers/carsdotcom";
import { fetchCraigslistListings } from "../utils/scrapers/craigslist";
import { fetchFacebookMarketplaceListings } from "../utils/scrapers/facebook";
import { fetchState } from './query'
import { fetchValuation } from "@/services/valuationService";
import { fetchVehicleData, getModelsByMakeId } from "@/api/vehicleApi";
import { fetchWithAuth } from './lib/fetch'
import { fields, invalidData, isSchema, validData } from './__fixtures__/data';
import { fields, invalidData, schema, validData } from './__fixtures__/data';
import { fileURLToPath } from "url";
import { filters } from "./filters.js";
import { findLastMatch } from 'src/utils';
import { findPropertySource } from './findPropertySource'
import { fireEvent, render, screen } from "@testing-library/react";
import { fireEvent, render, screen, waitFor } from "@testing-library/react";
import { fireEvent, screen } from "@testing-library/dom";
import { fireEvent, screen } from '@testing-library/react';
import { fireEvent, screen, waitFor } from "@testing-library/dom";
import { firstVisibleElementInContainer } from './elementPositionInRow';
import { flip } from '@floating-ui/react-dom';
import { float } from './property-descriptors/float';
import { fluentValidationResolver } from '..';
import { fluentValidationResolver } from '../fluentvalidation-ts';
import { flushSync } from 'react-dom'
import { focusElement } from '../../DomUtils/focusElement';
import { focusElement } from '../DomUtils/focusElement';
import { focusElement } from './focusElement';
import { focusElement, focusFirstElementChild } from '../DomUtils/focusElement';
import { focusFirstVisibleEmoji } from '../../DomUtils/keyboardNavigation';
import { focusManager } from './focusManager'
import { followFetchRedirect } from './utils/followRedirect'
import { fontFamily } from './property-descriptors/font-family';
import { fontStyle } from './property-descriptors/font-style';
import { fontVariant } from './property-descriptors/font-variant';
import { fontWeight } from './property-descriptors/font-weight';
import { footnoteReference } from './footnote-reference.js';
import { format } from "date-fns";
import { format } from 'date-fns';
import { format } from 'outvariant'
import { format, Locale } from 'date-fns';
import { format, formatDistanceToNow } from "date-fns";
import { format, parseISO } from "date-fns";
import { format, subMonths } from "date-fns";
import { formatCaption } from './formatCaption';
import { formatCurrency as formatCurrencyUtil } from "@/utils/formatters";
import { formatCurrency } from "../logic";
import { formatCurrency } from "@/utils/format";
import { formatCurrency } from "@/utils/formatCurrency";
import { formatCurrency } from "@/utils/formatters";
import { formatCurrency } from "@/utils/formatters/formatCurrency";
import { formatCurrency, formatDate } from "@/utils/formatters";
import { formatCurrency, formatNumber } from "@/utils/formatters";
import { formatDate } from "./formatDate";
import { formatDate, formatRelativeTime } from "@/utils/formatters";
import { formatDay } from './formatDay';
import { formatDistanceToNow } from "date-fns";
import { formatMonthCaption } from './formatMonthCaption';
import { formatNumber } from "@/utils/formatters/formatNumber";
import { formatWeekNumber } from './formatWeekNumber';
import { formatWeekdayName } from './formatWeekdayName';
import { formatYearCaption } from './formatYearCaption';
import { formatters } from "./_lib/format/formatters.js";
import { forwardRef } from 'react';
import { freezeBeforeAll } from 'test/utils';
import { fromTheme } from './from-theme'
import { g as MockedModule, c as MockerRegistry, M as MockedModuleType } from './registry.d-D765pazg.js';
import { generateDetailedExplanation } from "./fallbackGenerator.ts";
import { generateGPT4Explanation } from "./gptGenerator.ts";
import { generatePdf } from "./pdfGenerator";
import { generateValuationExplanation } from "../utils/generateValuationExplanation";
import { generateValuationExplanation } from "./generateValuationExplanation";
import { generateValuationExplanation } from "@/utils/generateValuationExplanation";
import { generateValuationForecast } from "@/utils/forecasting/valuation-forecast";
import { generateValuationPdf } from "../generateValuationPdf";
import { generateValuationPdf } from "../utils/pdf/generateValuationPdf";
import { generateValuationPdf } from "./generateValuationPdf";
import { generateValuationPdf } from "@/utils/pdf/generateValuationPdf";
import { getAbsoluteUrl } from '../url/getAbsoluteUrl'
import { getAbsoluteUrl } from './getAbsoluteUrl'
import { getAbsoluteWorkerUrl } from '../../../utils/getAbsoluteWorkerUrl'
import { getAbsoluteWorkerUrl } from './getAbsoluteWorkerUrl'
import { getActiveElement } from '../DomUtils/getActiveElement';
import { getActiveModifiers } from './getActiveModifiers';
import { getActiveModifiers } from 'contexts/Modifiers';
import { getActiveModifiers, useModifiers } from 'contexts/Modifiers';
import { getAllRequestCookies } from '../utils/request/getRequestCookies'
import { getBestPhotoAssessment } from "@/utils/valuationService";
import { getBodyByteLength } from './getBodyByteLength'
import { getBodyByteLength } from './utils/getBodyByteLength'
import { getCallFrame } from '../utils/internal/getCallFrame'
import { getCallFrame } from './getCallFrame'
import { getCarfaxReport } from "@/utils/carfax/mockCarfaxService";
import { getCleanUrl } from './getCleanUrl'
import { getCleanUrl } from '@mswjs/interceptors'
import { getConditionColor } from "./conditionColorUtil";
import { getConditionColorClass } from "@/utils/valuation/conditionHelpers";
import { getConditionMultiplier } from "./adjustments/conditionAdjustments";
import { getConditionTips } from "@/utils/valuation/conditionHelpers";
import { getConfirmation } from './DOMUtils';
import { getCurrentDate } from "../helpers/textUtils";
import { getCustomModifiers } from './getCustomModifiers';
import { getCustomModifiers } from './utils/getCustomModifiers';
import { getDayButton, queryMonthGrids } from 'test/selectors';
import { getDayClassNames } from './getDayClassNames';
import { getDayClassNames } from './utils/getDayClassNames';
import { getDayStyle } from './utils/getDayStyle';
import { getDefaultConfig } from './default-config'
import { getDefaultContextValues } from './defaultContextValues';
import { getDefaultContextValues } from 'contexts/DayPicker/defaultContextValues';
import { getDefaultState } from './mutation'
import { getDisplayMonths } from './utils/getDisplayMonths';
import { getDotPath, safeParseAsync } from 'valibot';
import { getESLintCoreRule } from '../util/getESLintCoreRule';
import { getFeatureAdjustments } from "../../adjustments/features";
import { getFeatureAdjustments } from "./adjustments/featureAdjustments";
import { getFeatureAdjustments } from "@/utils/adjustments/features";
import { getGapWidth } from './utils';
import { getIncomingMessageBody } from './getIncomingMessageBody'
import { getInitialFocusTarget } from './getInitialFocusTarget';
import { getInitialFocusTarget } from './utils/getInitialFocusTarget';
import { getInitialMonth } from './getInitialMonth';
import { getInitialMonth } from './utils/getInitialMonth';
import { getInternalModifiers } from './getInternalModifiers';
import { getInternalModifiers } from './utils/getInternalModifiers';
import { getIntersectingRectangle } from "./utils/rects/getIntersectingRectangle.js";
import { getLegendProps } from './getLegendProps';
import { getMarketMultiplier } from "../valuation/marketData";
import { getMarketMultiplier } from "./marketData";
import { getMessageLength } from './getMessageLength'
import { getMileageDescription } from "@/utils/adjustments/descriptions";
import { getModelsByMakeId } from "@/api/vehicleApi";
import { getMonthCaption } from 'test/selectors';
import { getMonthCaption, getMonthGrid } from 'test/selectors';
import { getMonthWeeks } from './getMonthWeeks';
import { getMonthWeeks } from './utils/getMonthWeeks';
import { getMriOptions, setDotProp, setByType, getFileName, camelcaseOptionName } from "./utils.ts";
import { getNextButton, getPrevButton } from 'test/selectors';
import { getNextMonth } from './getNextMonth';
import { getNextMonth } from './utils/getNextMonth';
import { getNormalizedSearchTerm } from '../../../hooks/useFilter';
import { getOverflowAncestors } from '@floating-ui/dom';
import { getOverflowAncestors } from '@floating-ui/react-dom';
import { getOverflowAncestors } from '@floating-ui/utils/dom';
import { getOwnerDocument } from '../utils/owner.js';
import { getPanelElement } from "./utils/dom/getPanelElement.js";
import { getPanelElementsForGroup } from "./utils/dom/getPanelElementsForGroup.js";
import { getPanelGroupElement } from "./utils/dom/getPanelGroupElement.js";
import { getParse } from './parse.js';
import { getPhotoScoreAdjustmentDescription } from "../descriptions";
import { getPhotoScoreAdjustmentDescription } from "../rules/descriptions";
import { getPreviousMonth } from './getPreviousMonth';
import { getPreviousMonth } from './utils/getPreviousMonth';
import { getPublicData } from './getPublicData'
import { getRawFetchHeaders } from './utils/recordRawHeaders'
import { getRegionalMarketMultiplier } from "./adjustments/locationAdjustments";
import { getResizeHandleElement } from "./utils/dom/getResizeHandleElement.js";
import { getResizeHandleElementIndex } from "./utils/dom/getResizeHandleElementIndex.js";
import { getResizeHandleElementsForGroup } from "./utils/dom/getResizeHandleElementsForGroup.js";
import { getResizeHandlePanelIds } from "./utils/dom/getResizeHandlePanelIds.js";
import { getResponse } from './getResponse'
import { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'
import { getStatusCodeColor } from './getStatusCodeColor'
import { getStrictProperties, hasOwn, sameValueZeroEqual } from './utils';
import { getSuggested } from '../../dataUtils/suggested';
import { getTableFooter, queryTableFooter } from 'test/selectors';
import { getTimestamp } from '../../utils/logging/getTimestamp'
import { getTimestamp } from '../utils/logging/getTimestamp'
import { getTimestamp } from './getTimestamp'
import { getUnixTime } from 'date-fns';
import { getUrlByRequestOptions } from '../../../utils/getUrlByRequestOptions'
import { getUrlByRequestOptions } from './getUrlByRequestOptions'
import { getValuationById } from "@/services/valuationService";
import { getValuationContext } from "@/utils/getValuationContext";
import { getValueBySymbol } from './getValueBySymbol'
import { getWeekdays } from './getWeekdays';
import { getWeekdays } from './utils';
import { getWorkerByRegistration } from './getWorkerByRegistration'
import { getWorkerInstance } from './utils/getWorkerInstance'
import { globalAgent as httpGlobalAgent, RequestOptions } from 'http'
import { graphql } from './graphql'
import { h as HandlersExecutionResult, R as RequestHandler } from '../HttpResponse-DQOloMJy.js';
import { h as Interceptor, E as ExtractEventNames } from './Interceptor-436630be.js';
import { h as Interceptor, H as HttpRequestEventMap } from '../../Interceptor-436630be.js';
import { h as Interceptor, H as HttpRequestEventMap } from './Interceptor-436630be.js';
import { handleRequest } from '../../utils/handleRequest'
import { handleRequest } from './utils/handleRequest'
import { handleRequest } from '~/core/utils/handleRequest'
import { handleRequest, HandleRequestOptions } from './handleRequest'
import { handleWebSocketEvent } from '~/core/ws/handleWebSocketEvent'
import { handlers } from "./mocks/handlers";
import { happyDomTypes, jsdomTypes } from 'vitest/optional-types.js';
import { hardBreak } from './break.js';
import { hasConfigurableGlobal } from '../../utils/hasConfigurableGlobal'
import { hasConfigurableGlobal } from './hasConfigurableGlobal'
import { hasNextElementSibling } from '../DomUtils/elementPositionInRow';
import { hashKey, shallowEqualObjects } from './utils'
import { hashQueryKeyByOptions, matchQuery } from './utils'
import { heading } from './heading.js';
import { hide } from '@floating-ui/react-dom';
import { hideBin } from "yargs/helpers";
import { homepageConfig } from "../homepage.config";
import { html } from './html.js';
import { htmlDecodeTree } from "./generated/decode-data-html.js";
import { htmlTrie } from "./generated/encode-html.js";
import { http } from '../http'
import { http } from './http'
import { httpEndpointURL } from './lib/transformers'
import { hydrate } from '@tanstack/query-core'
import { image } from './image.js';
import { imageReference } from './image-reference.js';
import { indexEmoji } from './alphaNumericEmojiIndex';
import { infiniteQueryBehavior } from './infiniteQueryBehavior'
import { initReactI18next } from "react-i18next";
import { inline } from '@floating-ui/react-dom';
import { inlineCode } from './inline-code.js';
import { innerText, textContent } from 'domutils';
import { inspect, InspectOptions } from 'node
import { interpolateHue, roundToPrecision } from './util';
import { intersects } from "./utils/rects/intersects.js";
import { invariant } from 'outvariant'
import { invariant, parsePath, warning } from "./history";
import { ioTsResolver } from '..';
import { isAbsoluteUrl } from './isAbsoluteUrl'
import { isAfter, isBefore, isSameDay } from 'date-fns';
import { isColor } from './util';
import { isColor, splitValue } from './util';
import { isCommonAssetRequest } from '../../isCommonAssetRequest'
import { isContentEditable } from './isContentEditable';
import { isCustomCategory } from '../../typeRefinements/typeRefinements';
import { isCustomEmoji } from '../../typeRefinements/typeRefinements';
import { isCustomEmoji } from '../typeRefinements/typeRefinements';
import { isDateInRange } from './isDateInRange';
import { isDayPickerMultiple } from 'types/DayPickerMultiple';
import { isDayPickerRange } from 'types/DayPickerRange';
import { isDayPickerSingle } from 'types/DayPickerSingle';
import { isDomParserSupportedType } from './utils/isDomParserSupportedType'
import { isGradient } from './js/css-gradient';
import { isHandlerKind } from '../utils/internal/isHandlerKind'
import { isHandlerKind } from './isHandlerKind'
import { isHandlerKind } from '~/core/utils/internal/isHandlerKind'
import { isHtml, isCheerio } from './utils.js';
import { isIterable } from './isIterable'
import { isLeft } from 'fp-ts/Either';
import { isMatch } from './isMatch';
import { isMatch } from 'contexts/Modifiers/utils/isMatch';
import { isNodeLikeError } from './isNodeLikeError'
import { isNodeProcess } from 'is-node-process'
import { isObject } from '../../../utils/isObject'
import { isObject } from './isObject'
import { isPropertyAccessible } from '../../utils/isPropertyAccessible'
import { isPropertyAccessible } from './isPropertyAccessible'
import { isSameDay } from 'date-fns';
import { isSameMonth } from 'date-fns';
import { isSameYear, setMonth, startOfMonth } from 'date-fns';
import { isServer } from './utils'
import { isServer, isValidTimeout } from './utils'
import { isServer, noop, notifyManager } from '@tanstack/query-core'
import { isServer, sleep } from './utils'
import { isStorageError, StorageError } from '../lib/errors'
import { isStorageError, StorageError, StorageUnknownError } from '../lib/errors'
import { isString } from './common';
import { isString, isStringOrNumber } from './common';
import { isStringEqual } from '../utils/internal/isStringEqual'
import { isStringEqual } from './isStringEqual'
import { isTag, type AnyNode } from 'domhandler';
import { isTag, type AnyNode, type Element } from 'domhandler';
import { isTag, type Element, type AnyNode } from 'domhandler';
import { isTypeAnyType, isTypeNeverType } from '../util';
import { isValidDate } from './utils/isValidDate';
import { isValidEmail, validatePassword } from "./validation";
import { isValidPhone } from "./validation";
import { isValidVIN } from "./vin-validation";
import { isValidVIN } from "@/utils/validation/vin-validation";
import { isValidVIN, validateVin } from "@/utils/validation/vin-validation";
import { it, expect } from 'vitest'
import { it, expect, afterEach } from 'vitest'
import { it, expect, beforeAll, afterEach, afterAll } from 'vitest'
import { joiResolver } from '..';
import { jsonParse } from './jsonParse'
import { kOnSend, kClose, WebSocketOverride } from './WebSocketOverride'
import { kResponsePromise, RequestController } from '../RequestController'
import { kResponsePromise, RequestController } from './RequestController'
import { kSetCookie } from '../HttpResponse/decorators'
import { keyboard } from '../keyboard';
import { keyboardKey } from '../system/keyboard';
import { labelDay } from './labelDay';
import { labelMonthDropdown } from './labelMonthDropdown';
import { labelNext } from './labelNext';
import { labelPrevious } from './labelPrevious';
import { labelWeekNumber } from './labelWeekNumber';
import { labelWeekday } from './labelWeekday';
import { labelYearDropdown } from './labelYearDropdown';
import { last, waitForTick } from 'src/utils';
import { launch } from '@puppeteer/browsers';
import { letterSpacing } from './property-descriptors/letter-spacing';
import { lightFormatters } from "./_lib/format/lightFormatters.js";
import { limitShift } from '@floating-ui/react-dom';
import { lineBreak } from './property-descriptors/line-break';
import { linearRegression } from "https
import { linearRegression } from "simple-statistics";
import { link } from './link.js';
import { linkReference } from './link-reference.js';
import { list } from './list.js';
import { listItem } from './list-item.js';
import { listStyleImage } from './property-descriptors/list-style-image';
import { listStylePosition } from './property-descriptors/list-style-position';
import { listStyleType } from './property-descriptors/list-style-type';
import { load } from "cheerio";
import { load } from '../index.js';
import { load } from '../load-parse.js';
import { load } from './index.js';
import { load } from './load-parse.js';
import { load, type Cheerio } from '../index.js';
import { load, type CheerioAPI } from '../index.js';
import { load, type CheerioAPI, type Cheerio } from '../index.js';
import { localStorageAdapter, memoryLocalStorageAdapter } from './lib/local-storage'
import { logV6DeprecationWarnings } from "./lib/deprecations";
import { longFormatters } from "./_lib/format/longFormatters.js";
import { lookupPlate } from "../services/plateService";
import { manualEntryToJson } from "@/utils/formatters";
import { match } from 'path-to-regexp'
import { match } from 'react-router';
import { matchMutation, noop } from './utils'
import { matcherToArray } from './matcherToArray';
import { matcherToArray } from 'contexts/Modifiers/utils/matcherToArray';
import { mergeClassList } from './merge-classlist'
import { mergeConfigs } from './merge-configs'
import { mergeIntoTypedArray } from 'src/utils';
import { mergeRight } from './mergeRight'
import { mergeRight } from '~/core/utils/internal/mergeRight'
import { mileageAdjustmentCurve } from "./adjustments/mileageAdjustments";
import { mockLeads, mockMessages } from "../mock-data";
import { mockPlateLookup } from "@/services/plateService";
import { mockedContexts } from 'test/mockedContexts';
import { motion } from "framer-motion";
import { motion, MotionProps } from "framer-motion";
import { namedTypes } from "./gen/namedTypes";
import { namedTypes } from "./namedTypes";
import { newQuickJSWASMModule, newQuickJSAsyncWASMModule, DEBUG_ASYNC, DEBUG_SYNC, RELEASE_ASYNC, RELEASE_SYNC, SyncBuildVariant, AsyncBuildVariant } from "./variants";
import { nextTickAsync } from './utils/nextTick'
import { noop } from "../helpers/helpers.core.js";
import { nopeResolver } from '..';
import { normalizeClientRequestArgs } from './normalizeClientRequestArgs'
import { normalizeClientRequestArgs } from './utils/normalizeClientRequestArgs'
import { normalizeListing } from "@/utils/normalization/normalizeListing";
import { normalizePath } from './normalizePath'
import { normalizeSocketWriteArgs } from './normalizeSocketWriteArgs'
import { notifyManager } from './notifyManager'
import { notifyManager } from '@tanstack/query-core'
import { notifyManager, replaceEqualDeep } from '@tanstack/query-core'
import { objectUtil, util } from "./helpers/util";
import { offset } from '@floating-ui/react-dom';
import { onUnhandledRequest } from './request/onUnhandledRequest'
import { onlineManager } from './onlineManager'
import { opacity } from './property-descriptors/opacity';
import { overflowWrap } from './property-descriptors/overflow-wrap';
import { overrides } from "./core.defaults.js";
import { paintOrder } from './property-descriptors/paint-order';
import { paragraph } from './paragraph.js';
import { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';
import { parse } from "./parse.js";
import { parse } from 'url'
import { parseDOM } from 'htmlparser2';
import { parseDocument as parseWithHtmlparser2 } from 'htmlparser2';
import { parseDocument } from 'htmlparser2';
import { parseExternalUrl } from '../util';
import { parseFromToProps } from './utils';
import { parseFromToProps } from 'contexts/DayPicker/utils';
import { parseJson } from '../../utils/parseJson'
import { parseJson } from './parseJson'
import { parseMultipartData } from './parseMultipartData'
import { parseNativeEmoji } from '../../dataUtils/parseNativeEmoji';
import { parseNativeEmoji } from '../dataUtils/parseNativeEmoji';
import { parsePath, createPath } from './PathUtils';
import { parseWithParse5 } from './parsers/parse5-adapter.js';
import { parseWorkerRequest } from '../../utils/parseWorkerRequest'
import { parsers } from "./parse/_lib/parsers.js";
import { partialUtil } from "./helpers/partialUtil";
import { passthrough } from '../passthrough'
import { passthrough } from './passthrough'
import { pendingThenable } from './thenable'
import { pipe } from 'fp-ts/function';
import { pipeEvents } from './pipeEvents'
import { pipeEvents } from './utils/internal/pipeEvents'
import { plainToClass } from 'class-transformer';
import { plateSchema, validateForm } from "@/components/form/validation";
import { platform } from '@floating-ui/dom';
import { platform } from '@floating-ui/react-dom';
import { platformInfo } from "./deno.ts";
import { pointer } from '../pointer';
import { pointerKey } from '../system/pointer';
import { pointerKey, PointerPosition } from './shared';
import { polyfillGlobalThis } from './lib/polyfills'
import { position } from './property-descriptors/position';
import { posix, win32 } from 'node
import { predictValuation, ValuationFeatures } from "../lib/inferenceModel.ts";
import { preloadEmoji } from './preloadEmoji';
import { printStartMessage } from './printStartMessage'
import { printStartMessage } from './utils/printStartMessage'
import { printStopMessage } from './printStopMessage'
import { printStopMessage } from './utils/printStopMessage'
import { processArgs } from "./deno.ts";
import { processExistingListings } from "@/utils/marketListings/processListings";
import { promise as queueAsPromised } from '../'
import { protocols as gProtocols, ProtocolOpts as GetUriOptions } from 'get-uri';
import { pruneGetRequestBody } from './pruneGetRequestBody'
import { pseudos } from "./pseudos.js";
import { quotes } from './property-descriptors/quotes';
import { readFileSync } from "node
import { rectToClientRect } from '@floating-ui/utils';
import { recursiveToCamel, resolveFetch } from '../lib/helpers'
import { reduceRotation, adjustDimsForRotation } from 'src/api/rotations';
import { removeBrackets, camelcaseOptionName } from "./utils.ts";
import { removeBrackets, findAllBrackets, findLongest, padRight, CACError } from "./utils.ts";
import { removeElement } from 'domutils';
import { render } from "@testing-library/react";
import { render, screen } from "@testing-library/react";
import { render, screen } from '@testing-library/react';
import { render, screen, waitFor } from "@testing-library/react";
import { renderDayPickerHook } from 'test/render';
import { renderDayPickerHook, RenderHookResult } from 'test/render';
import { renderWithParse5, parseWithParse5 } from './parsers/parse5-adapter.js';
import { replaceCodePoint, fromCodePoint } from "./decode-codepoint.js";
import { replaceEqualDeep } from './utils'
import { request, pipeline, stream, connect, upgrade } from './api'
import { resolveColor } from './resolve';
import { resolveDimension, serializeCalc } from './css-calc';
import { resolveFetch } from '../lib/helpers'
import { resolveFetch } from './helper'
import { resolveFetch } from './lib/helpers'
import { resolveRelativeColor } from './relative-color';
import { resolveResponse } from './helpers'
import { resolveVar } from './css-var';
import { rest } from "msw";
import { rgb } from "pdf-lib";
import { rgb } from 'src/api/colors';
import { root } from './root.js';
import { rotateInPlace } from 'src/api/operations';
import { roundToPrecision } from './util';
import { run } from "./transformation/index.ts";
import { sameValueZeroEqual } from './utils';
import { sameValueZeroEqual } from './utils.ts';
import { saveAs } from "file-saver";
import { scale, LineCapStyle } from "./operators";
import { scale, LineCapStyle } from "./operators";
import { scorePhotos } from "@/services/photoService";
import { scrapeListingsFromHtml } from "./craigslistHelpers"; // ✅ make sure filename matches exactly
import { screen } from "@testing-library/dom";
import { screen } from '@testing-library/react';
import { screen, waitFor } from "@testing-library/dom";
import { scrollEmojiAboveLabel } from './scrollTo';
import { scrollTo } from '../DomUtils/scrollTo';
import { serializeRequest } from '../utils/logging/serializeRequest'
import { serializeRequest } from './serializeRequest'
import { serializeResponse } from '../utils/logging/serializeResponse'
import { serializeResponse } from './serializeResponse'
import { serve } from "https
import { setFontAndSize } from 'src/api/operators';
import { setGlobalDispatcher, getGlobalDispatcher } from './global-dispatcher'
import { setGlobalOrigin, getGlobalOrigin } from './global-origin'
import { setMaxListeners } from 'node
import { setMonth, setYear } from 'date-fns';
import { setNonce } from "./utils/csp.js";
import { setSuggested } from '../dataUtils/suggested';
import { setYear, startOfMonth, startOfYear } from 'date-fns';
import { setupMain } from './setup';
import { setupServer } from "msw/node";
import { setupWorker } from './setupWorker'
import { shallow } from './vanilla/shallow';
import { shallow } from './vanilla/shallow';
import { shallowEqual, type Machine } from './machine.js';
import { shift } from '@floating-ui/react-dom';
import { shouldReduceMotion } from "@/components/animations/utils";
import { shouldReduceMotion } from "@/utils/animations";
import { shouldThrowError } from '@tanstack/query-core'
import { showDealerOfferNotification } from "@/components/notifications/DealerOfferNotification";
import { signals } from './signals.js';
import { size } from '@floating-ui/react-dom';
import { skinTonesNamed } from '../../../data/skinToneVariations';
import { skipToken } from '@tanstack/query-core'
import { sleep, waitForClientRequest } from '../../../test/helpers'
import { sprintf } from 'sprintf-js';
import { spyOn, fn, MaybeMockedDeep, MaybeMocked, MaybePartiallyMocked, MaybePartiallyMockedDeep, MockInstance } from '@vitest/spy';
import { startOfMonth } from 'date-fns';
import { states } from "@/components/premium/lookup/shared/states-data"; // Changed from US_STATES to states
import { states } from "@/components/premium/lookup/shared/states-data"; // Updated from US_STATES to states
import { states } from "@/data/states";
import { storeAssessmentResult } from "./database.ts";
import { storeResponseCookies } from './request/storeResponseCookies'
import { strikethrough } from './delete.js';
import { stringToHeaders } from 'headers-polyfill'
import { stringToUint8Array } from './lib/base64url'
import { stringify, Constructable } from '@vitest/utils';
import { stripTrailingSlash, applySettingDefaults } from './lib/helpers'
import { strong } from './strong.js';
import { stylesheet } from '../../../Stylesheet/stylesheet';
import { stylesheet } from '../../Stylesheet/stylesheet';
import { sum } from "../helpers";
import { supabase } from "../integrations/supabase/client";
import { supabase } from "@/integrations/supabase/client";
import { supabase } from "@/utils/supabaseClient";
import { superstructResolver } from '..';
import { supportsLocalStorage } from './helpers'
import { supportsReadableStreamTransfer } from '../utils/supportsReadableStreamTransfer'
import { svgPathToOperators } from 'src/api/svgPath';
import { table } from './table.js';
import { tableCell } from './table-cell.js';
import { tableRow } from './table-row.js';
import { testDeduplication } from "../useValuationHistory";
import { text as staticText } from '../static.js';
import { text } from '../static.js';
import { text } from './text.js';
import { textAlign } from './property-descriptors/text-align';
import { textContent } from 'domutils';
import { textDecorationLine } from './property-descriptors/text-decoration-line';
import { textShadow } from './property-descriptors/text-shadow';
import { textTransform } from './property-descriptors/text-transform';
import { thematicBreak } from './thematic-break.js';
import { toCharCode } from 'src/utils/strings';
import { toCodePoint, toHexString } from 'src/utils';
import { toHexString } from 'src/utils/strings';
import { toHexString, toHexStringOfMinLength } from 'src/utils';
import { toNestErrors } from '@hookform/resolvers';
import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';
import { toPublicUrl } from '../../utils/request/toPublicUrl'
import { toPublicUrl } from '../request/toPublicUrl'
import { toPublicUrl } from '../utils/request/toPublicUrl'
import { toPublicUrl } from './toPublicUrl'
import { toReadonlyArray } from './toReadonlyArray'
import { toReadonlyArray } from './utils/internal/toReadonlyArray'
import { toResponseInit } from '~/core/utils/toResponseInit'
import { toast as sonnerToast } from "sonner";
import { toast } from "@/components/ui/use-toast";
import { toast } from "@/hooks/use-toast";
import { toast } from "sonner";
import { toast, Toaster as Sonner } from "sonner";
import { toast, Toaster as SonnerToaster } from "sonner";
import { toast, useToast } from "@/hooks/use-toast";
import { toggleVariants } from "@/components/ui/toggle";
import { transform } from './property-descriptors/transform';
import { transform } from 'sucrase'
import { transformOrigin } from './property-descriptors/transform-origin';
import { truncateMessage } from './truncateMessage'
import { tryCatch } from './tryCatch'
import { twMerge } from "tailwind-merge";
import { typanionResolver } from '..';
import { type AnchorProps } from '../../internal/floating.js';
import { type AnchorPropsWithSelection } from '../../internal/floating.js';
import { type AnyNode } from 'domhandler';
import { type AnyNode, Document, type ParentNode } from 'domhandler';
import { type AnyNode, type Document, type ParentNode } from 'domhandler';
import { type AnyNode, type Element } from 'domhandler';
import { type AnyNode, type Element, type Document } from 'domhandler';
import { type AnyNode, type Element, type Text, isText } from 'domhandler';
import { type AnyNode, type ParentNode, type ChildNode, Element, Document, ProcessingInstruction, Comment, Text } from 'domhandler';
import { type Bluetooth, type EmptyResult } from '../../../protocol/protocol.js';
import { type Browser } from '../../../protocol/protocol.js';
import { type Browser } from './browser-data/browser-data.js';
import { type Browser, ChromiumBidi, type BrowsingContext } from '../../../protocol/protocol.js';
import { type Browser, type BrowserPlatform, type ChromeReleaseChannel } from './browser-data/browser-data.js';
import { type Browser, type BrowsingContext, ChromiumBidi } from '../../../protocol/protocol.js';
import { type BrowsingContext } from '../../../protocol/protocol.js';
import { type BrowsingContext, Network } from '../../../protocol/protocol.js';
import { type BrowsingContext, type ChromiumBidi, type Emulation, Session } from '../../../protocol/protocol.js';
import { type BrowsingContext, type Script } from '../../../protocol/protocol.js';
import { type ButtonProps, type _internal_ComponentButton } from '../button/button.js';
import { type ByComparator } from '../../hooks/use-by-comparator.js';
import { type CDPEvents, CDPSession, type CommandOptions } from '../api/CDPSession.js';
import { type CDPSession } from '../api/CDPSession.js';
import { type CDPSession, type CDPSessionEvents } from '../api/CDPSession.js';
import { type Cdp } from '../../../protocol/protocol.js';
import { type CdpTarget } from './Target.js';
import { type Cheerio } from './index.js';
import { type CheerioAPI } from '../index.js';
import { type CheerioAPI } from './index.js';
import { type CheerioAPI } from './load.js';
import { type CheerioAPI, getLoad } from './load.js';
import { type CheerioOptions } from './options.js';
import { type CheerioOptions, type InternalOptions } from './options.js';
import { type ChildProcess } from 'child_process';
import { type ChromiumBidi } from '../protocol/protocol.js';
import { type ClassInfo } from "../util/getClassInfo";
import { type ClassValue, clsx } from "clsx";
import { type CommonPuppeteerSettings, Puppeteer } from '../common/Puppeteer.js';
import { type ContinueRequestOverrides, HTTPRequest, type ResourceType, type ResponseForRequest } from '../api/HTTPRequest.js';
import { type CustomQueryHandler } from './CustomQueryHandler.js';
import { type DefaultTreeAdapterMap } from '../tree-adapters/default.js';
import { type DependencyList, type EffectCallback } from 'react';
import { type DialogProps } from "@radix-ui/react-dialog";
import { type Disposables } from '../../utils/disposables.js';
import { type DomHandlerOptions, type ChildNode, type Element, type Document } from "domhandler";
import { type EditableInputOrTextarea } from '../../utils';
import { type Element, type AnyNode } from 'domhandler';
import { type ElementType } from 'react';
import { type ElementType, type Ref } from 'react';
import { type Emitter } from '../../third_party/mitt/mitt.js';
import { type EmptyResult, Session } from '../../../protocol/protocol.js';
import { type EmptyResult, type Browser } from '../../../protocol/protocol.js';
import { type EmptyResult, type Permissions } from '../../../protocol/protocol.js';
import { type EmptyResult, type Script } from '../../../protocol/protocol.js';
import { type EventType, type EventTypeInit, type FixedDocumentEventMap } from './types';
import { type EventType, type Handler, type WildcardHandler } from 'mitt';
import { type Feed } from "domutils";
import { type GzipOptions, type ZlibOptions } from 'minizlib';
import { type Handler, type ParserOptions } from "./Parser.js";
import { type HasDisplayName } from '../../utils/render.js';
import { type HasDisplayName, type PropsForFeatures, type RefProp } from '../../utils/render.js';
import { type HasDisplayName, type RefProp } from '../../utils/render.js';
import { type HasDisplayName, type RefProp } from '../utils/render.js';
import { type InnerProps } from '@floating-ui/react';
import { type InquirerReadline } from '@inquirer/type';
import { type Instance } from '../../setup';
import { type Instance } from '../setup';
import { type JSXPragmaInfo } from "../util/getJSXPragmaInfo";
import { type JscTarget, type ParserConfig, type Options as SWCOptions } from '@swc/core';
import { type KeyInput } from '../common/USKeyboardLayout.js';
import { type KeypressEvent } from './key.ts';
import { type Layout } from './lines.ts';
import { type Locator } from './locators/locators.js';
import { type LogPrefix } from '../utils/log.js';
import { type LoggerFn } from '../../../utils/log.js';
import { type LoggerFn } from '../utils/log.js';
import { type LoggerFn } from './log.js';
import { type Minipass } from 'minipass';
import { type MouseEventHandler } from 'react';
import { type MutableRefObject } from 'react';
import { type NetworkManagerEvents } from '../common/NetworkManagerEvents.js';
import { type Observable } from '../../third_party/rxjs/rxjs.js';
import { type Options as CSSSelectOptions } from "css-select";
import { type Options } from "./index";
import { type Options } from '../options';
import { type Page } from '../api/Page.js';
import { type ParsedUrlPattern } from './NetworkUtils.js';
import { type ParserOptions } from './parser/index.js';
import { type Permission } from '../api/Browser.js';
import { type PointerCoords } from '../event';
import { type PointerInput } from '../pointer';
import { type Prettify } from '@inquirer/type';
import { type Process } from '@puppeteer/browsers';
import { type Prompt, type Prettify } from '@inquirer/type';
import { type PuppeteerLifeCycleEvent } from './LifecycleWatcher.js';
import { type RawSourceMap } from "./computeSourceMap";
import { type ReadEntry } from './read-entry.js';
import { type SelectionRange } from '.';
import { type SnifferOptions } from 'encoding-sniffer';
import { type Stats } from 'fs';
import { type Stats } from 'node
import { type StopState } from "../traverser/expression";
import { type System } from '.';
import { type System } from '../system';
import { type Theme } from '../theme.ts';
import { type Theme } from './theme.ts';
import { type Theme } from '@inquirer/core';
import { type ThemeProviderProps } from "next-themes/dist/types";
import { type Token, type CharacterToken, type DoctypeToken, type TagToken, type EOFToken, type CommentToken, type Attribute, type Location } from '../common/token.js';
import { type Token, type CommentToken, type CharacterToken, type TagToken, type DoctypeToken, type EOFToken, type LocationWithAttributes } from '../common/token.js';
import { type TokenType } from "../tokenizer/types";
import { type TokenType } from "./parser/tokenizer/types";
import { type TokenType } from "./types";
import { type Traversal } from "css-what";
import { type TreeAdapterTypeMap, type TreeAdapter } from 'parse5';
import { type UserEventApi } from './setup';
import { type VariantProps } from "class-variance-authority";
import { type WarnData } from './warn-method.js';
import { type WarnData, type Warner } from './warn-method.js';
import { type WebExtension, type EmptyResult } from '../../../protocol/protocol.js';
import { type _internal_ComponentDescription } from '../description/description.js';
import { type _internal_ComponentLabel } from '../label/label.js';
import { type keyboardKey } from './system/keyboard';
import { type pointerKey } from '.';
import { type pointerKey } from '../system/pointer';
import { type pointerKey } from './shared';
import { type pointerKey } from './system/pointer';
import { type } from 'arktype';
import { typeboxResolver } from '..';
import { typedArrayFor } from 'src/utils';
import { typeschemaResolver } from '..';
import { until } from '@open-draft/until'
import { update as updateDOM } from '../parse.js';
import { uploadAndAnalyzePhotos } from "../services/photoService";
import { uploadPhotos } from "@/services/photo/uploadPhotoService";
import { urlToHttpOptions } from 'node
import { useAICondition } from "@/hooks/useAICondition";
import { useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteId, useRouteLoaderData, useRoutes, useRoutesImpl } from "./lib/hooks";
import { useActiveCategoryScrollDetection } from '../../hooks/useActiveCategoryScrollDetection';
import { useActiveModifiers } from './useActiveModifiers';
import { useActiveModifiers } from 'hooks/useActiveModifiers';
import { useAdminAnalytics } from "@/hooks/useAdminAnalytics";
import { useAdminRole } from "@/hooks/useAdminRole";
import { useAllowExpandReactions, useOpenConfig } from './config/useConfig';
import { useAppendSearch, useClearSearch } from './useFilter';
import { useAuctionIndex } from "@/hooks/useAuctionIndex";
import { useAuth as useAuthFromContext } from "@/components/auth/AuthContext";
import { useAuth } from "./AuthContext";
import { useAuth } from "./useAuth";
import { useAuth } from "@/components/auth/AuthContext";
import { useAuth } from "@/components/auth/AuthContext"; // ✅ FIXED
import { useAuth } from "@/hooks/useAuth";
import { useBaseQuery } from './useBaseQuery'
import { useBodyRef } from '../components/context/ElementRefContext';
import { useBodyRef } from '../context/ElementRefContext';
import { useCallback } from 'react';
import { useCallback, useEffect } from "react";
import { useCallback, useEffect, useMemo } from 'react';
import { useCallback, useEffect, useState } from "react";
import { useCallback, useReducer } from "react";
import { useCallback, useState } from "react";
import { useCategoriesConfig } from '../../config/useConfig';
import { useCategoryNavigationRef } from '../context/ElementRefContext';
import { useCensus } from "@/hooks/useCensus";
import { useClearSearch } from '../../../hooks/useFilter';
import { useCloseAllOpenToggles } from '../../../hooks/useCloseAllOpenToggles';
import { useCloseAllOpenToggles } from './useCloseAllOpenToggles';
import { useComposedRefs } from '@radix-ui/react-compose-refs';
import { useControlledValue } from './useControlledValue';
import { useControlledValue } from 'hooks/useControlledValue';
import { useCustomEmojisConfig } from '../config/useConfig';
import { useDayPicker } from '../DayPicker';
import { useDayPicker } from 'contexts/DayPicker';
import { useDayRender } from './useDayRender';
import { useDayRender } from 'hooks/useDayRender';
import { useDealerInsights } from "@/hooks/useDealerInsights";
import { useDealerInventory } from "../hooks/useDealerInventory";
import { useDealerInventory } from "./hooks/useDealerInventory";
import { useDealerOfferComparison } from "@/hooks/useDealerOfferComparison";
import { useDealerOffers } from "@/hooks/useDealerOffers";
import { useDealerSignup } from "./hooks/useDealerSignup";
import { useDealerValuations } from "@/hooks/useDealerValuations";
import { useDebouncedState } from '../../hooks/useDebouncedState';
import { useDisallowMouseMove } from './useDisallowMouseMove';
import { useDisallowMouseRef } from '../components/context/PickerContext';
import { useDisallowedEmojis } from '../../hooks/useDisallowedEmojis';
import { useDropzone } from "react-dropzone";
import { useDropzone, DropzoneProps } from "../../";
import { useEffect } from "react";
import { useEffect } from 'react';
import { useEffect, RefObject } from 'react';
import { useEffect, useLayoutEffect, useState } from 'react';
import { useEffect, useRef } from 'react';
import { useEffect, useRef, useState } from "react";
import { useEffect, useState } from "react";
import { useEffect, useState } from 'react';
import { useEmojiPreviewEvents } from '../../hooks/useEmojiPreviewEvents';
import { useEmojiStyleConfig, useGetEmojiUrlConfig } from '../config/useConfig';
import { useEmojiVariationPickerState } from '../components/context/PickerContext';
import { useEmojiVariationPickerState } from '../context/PickerContext';
import { useEmojiVersionConfig } from '../config/useConfig';
import { useEmojisThatFailedToLoadState } from '../components/context/PickerContext';
import { useEmojisThatFailedToLoadState } from '../context/PickerContext';
import { useEpaMpg } from "@/hooks/useEpaMpg";
import { useFilter } from '../../../hooks/useFilter';
import { useFocusContext } from 'contexts/Focus';
import { useFocusSearchInput } from '../../../hooks/useFocus';
import { useFocusSearchInput } from './useFocus';
import { useForecast } from "@/hooks/useForecast";
import { useForecastData } from "./forecast/useForecastData";
import { useForm } from "react-hook-form";
import { useForm } from 'react-hook-form';
import { useFormContext } from "react-hook-form";
import { useFullValuationPipeline } from "@/hooks/useFullValuationPipeline";
import { useId } from 'hooks/useId';
import { useInView } from "framer-motion";
import { useInView } from "react-intersection-observer";
import { useIsEmojiDisallowed } from '../../hooks/useDisallowedEmojis';
import { useIsEmojiFiltered } from './useFilter';
import { useIsEmojiHidden } from '../../hooks/useIsEmojiHidden';
import { useIsEverMounted } from '../../hooks/useIsEverMounted';
import { useIsMobile } from "@/hooks/use-mobile";
import { useIsRestoring } from './IsRestoringProvider'
import { useIsSkinToneInPreview } from '../../hooks/useShouldShowSkinTonePicker';
import { useIsSkinToneInSearch } from '../../../hooks/useShouldShowSkinTonePicker';
import { useIsUnicodeHidden } from './useHideEmojisByUniocode';
import { useKeyboardNavigation } from '../../hooks/useKeyboardNavigation';
import { useLayoutEffect } from '@radix-ui/react-use-layout-effect';
import { useLeads } from "../context/LeadsContext";
import { useLeads } from "./context/LeadsContext";
import { useLocalization } from "@/i18n/useLocalization";
import { useLocation, useNavigate } from "react-router-dom";
import { useMakeModels } from "@/hooks/useMakeModels";
import { useMarkInitialLoad } from '../../hooks/useInitialLoad';
import { useMarketListings } from "@/hooks/useMarketListings";
import { useMediaQuery } from "@/hooks/use-mobile";
import { useMemo } from "react";
import { useModifiers } from '../Modifiers';
import { useModifiers } from 'contexts/Modifiers';
import { useMouseDownHandlers } from '../../hooks/useMouseDownHandlers';
import { useMutableConfig } from './mutableConfig';
import { useNavigate } from "react-router-dom";
import { useNavigate, useParams } from "react-router-dom";
import { useNavigate, useSearchParams } from "react-router-dom";
import { useNavigation } from '../Navigation';
import { useNavigation } from 'contexts/Navigation';
import { useNavigationState } from './useNavigationState';
import { useNhtsaRecalls } from "@/hooks/useNhtsaRecalls";
import { useNicbVinCheck } from "@/hooks/useNicbVinCheck";
import { useOnFocus } from '../../hooks/useOnFocus';
import { useOnMouseMove } from '../../hooks/useDisallowMouseMove';
import { useOnScroll } from '../../hooks/useOnScroll';
import { useOsmGeocode } from "@/hooks/useOsmGeocode";
import { useParams } from "react-router-dom";
import { useParams, useSearchParams } from "react-router-dom";
import { usePhotoScoring } from "./usePhotoScoring";
import { usePhotoUpload } from "@/hooks/usePhotoUpload";
import { usePickerConfig } from '../components/context/PickerConfigContext';
import { usePickerMainRef } from '../context/ElementRefContext';
import { usePlateLookup } from "@/hooks/usePlateLookup";
import { usePremiumDealer } from "@/hooks/usePremiumDealer";
import { usePremiumPayment } from "@/hooks/usePremiumPayment";
import { usePremiumStatus } from "@/hooks/usePremiumStatus";
import { useQueries } from './useQueries'
import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from './QueryClientProvider'
import { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'
import { useReactionsModeState } from '../context/PickerContext';
import { useReactionsModeState } from './components/context/PickerContext';
import { useReactionsRef } from '../context/ElementRefContext';
import { useRef } from 'react';
import { useRef, useMemo } from 'react';
import { useRef, useState } from 'react';
import { useReferrals } from "@/contexts/ReferralContext";
import { useSaveValuation } from "@/hooks/useSaveValuation";
import { useSavedValuations } from "@/hooks/useSavedValuations";
import { useScrollCategoryIntoView } from '../../hooks/useScrollCategoryIntoView';
import { useScrollTo } from '../DomUtils/scrollTo';
import { useSearchDisabledConfig } from '../config/useConfig';
import { useSearchInputRef } from '../../context/ElementRefContext';
import { useSearchParams } from "react-router-dom";
import { useSearchResultsConfig } from '../config/useConfig';
import { useSearchTermState } from '../components/context/PickerContext';
import { useSelectMultiple } from 'contexts/SelectMultiple';
import { useSelectRange } from 'contexts/SelectRange';
import { useSelectSingle } from 'contexts/SelectSingle';
import { useSelectedDays } from './useSelectedDays';
import { useSetAnchoredEmojiRef } from '../components/context/ElementRefContext';
import { useShouldHideCustomEmojis } from '../../hooks/useShouldHideCustomEmojis';
import { useSkinToneFanOpenState } from '../components/context/PickerContext';
import { useSkinTonePickerLocationConfig } from '../config/useConfig';
import { useSkinTonePickerRef } from '../../context/ElementRefContext';
import { useState } from "react";
import { useState } from 'react';
import { useStepNavigation } from "./useStepNavigation";
import { useStepTransition } from "./useStepTransition";
import { useSyncExternalStore } from 'use-sync-external-store/shim';
import { useTheme } from "@/hooks/useTheme";
import { useTheme } from "next-themes";
import { useToast } from "@/hooks/use-toast";
import { useTranslation } from "react-i18next";
import { useUnicodeToHide } from "../config/useConfig";
import { useUnifiedDecoder } from "@/hooks/useUnifiedDecoder";
import { useUpdateSuggested } from '../context/PickerContext';
import { useUser } from "./useUser";
import { useValidation } from "@/hooks/useValidation";
import { useValuation } from "@/contexts/ValuationContext";
import { useValuation } from "@/hooks/useValuation";
import { useValuationContext } from "@/hooks/useValuationContext";
import { useValuationFallback } from "@/hooks/useValuationFallback";
import { useValuationHistory } from "@/hooks/useValuationHistory";
import { useValuationLogic } from "./logic";
import { useValuationPdf } from "@/components/valuation/result/useValuationPdf";
import { useValuationPipeline } from "./valuation-pipeline";
import { useValuationResult } from "@/hooks/useValuationResult";
import { useVehicleDBData } from "./useVehicleDBData";
import { useVehicleDBData } from "@/hooks/useVehicleDBData";
import { useVehicleData } from "@/hooks/useVehicleData";
import { useVehicleLookup } from "./useVehicleLookup";
import { useVehicleLookup } from "@/hooks/useVehicleLookup";
import { useVehicleSelector } from "@/hooks/useVehicleSelector";
import { useVehicleSelectors } from "@/hooks/useVehicleSelectors";
import { useVehicleUpload } from "./hooks/useVehicleUpload";
import { useVehicleUpload } from "./useVehicleUpload";
import { useVehicleUploadModal } from "../hooks/useVehicleUploadModal";
import { useVehicleUploadModal } from "./hooks/useVehicleUploadModal";
import { useVehicleUploadModal } from "@/components/dealer/hooks/useVehicleUploadModal";
import { useVinDecoder } from "./useVinDecoder";
import { useVinDecoder } from "@/hooks/useVinDecoder";
import { useVinInput } from "@/hooks/useVinInput";
import { useVpicVinLookup } from "@/hooks/useVpicVinLookup";
import { useZipValidation } from "@/hooks/useZipValidation";
import { user } from 'test/user';
import { userEvent } from '@testing-library/user-event';
import { userEventApi } from './api';
import { util, ZodParsedType } from "./helpers/util";
import { v4 as uuidv4 } from "uuid";
import { valibotResolver } from '..';
import { validate } from '@typeschema/main';
import { validateCriticalRoutes } from "./route-validation";
import { validateStatePlate } from "./plate-validation-helpers";
import { validateVin as baseValidateVin } from "./vin-validation";
import { validateVin } from "@/utils/validation/vin-validation";
import { validateVinEnhanced } from "@/utils/validation/enhanced-vin-validation";
import { validateWorkerScope } from './utils/validateWorkerScope'
import { validateZipCode } from "../zipCodeValidator";
import { validateZipCode } from "@/utils/validation/zipCodeValidator";
import { valueToJsonString } from './util';
import { values as objectValues } from 'src/utils/objects';
import { vehicleSchema } from "./schemas/vehicleSchema";
import { vehicleSchema } from "@/components/dealer/schemas/vehicleSchema";
import { verifyPaymentStatus } from "@/utils/premiumService";
import { version } from './lib/version'
import { version } from './version'
import { vestResolver } from '..';
import { vi } from "vitest";
import { vi, beforeAll, afterEach, afterAll, it, expect } from 'vitest'
import { vi, it, expect } from 'vitest'
import { vi, it, expect, afterEach } from 'vitest'
import { vineResolver } from '..';
import { visibility } from './property-descriptors/visibility';
import { waitForTick } from 'src/utils';
import { webSocketInterceptor } from './webSocketInterceptor'
import { webSocketInterceptor } from '~/core/ws/webSocketInterceptor'
import { webkitTextStrokeWidth } from './property-descriptors/webkit-text-stroke-width';
import { wordBreak } from './property-descriptors/word-break';
import { ws } from './ws'
import { xmlDecodeTree } from "./generated/decode-data-xml.js";
import { xmlReplacer, getCodePoint } from "./escape.js";
import { y as ResolvedConfig, x as UserConfig, u as VitestRunMode, G as VitestOptions, V as Vitest, A as ApiConfig, T as TestProject, H as TestSequencer, J as TestSpecification, L as Logger, K as TestModule, M as ModuleDiagnostic } from './chunks/reporters.d.DG9VKi4m.js';
import { yupResolver } from '..';
import { z } from "https
import { z } from "zod";
import { z } from 'zod';
import { z, ZodSchema } from "zod";
import { z, type ZodType } from 'zod';
import { zIndex } from './property-descriptors/z-index';
import { zeroRightClassName, fullWidthClassName, noScrollbarsClassName, removedBarSizeVariable } from './constants';
import { zodResolver } from "@hookform/resolvers/zod";
import { zodResolver } from '..';
import {ARIAQueryHandler} from '../cdp/AriaQueryHandler.js';
import {ARIAQueryHandler} from './AriaQueryHandler.js';
import {ARIARole} from 'aria-query'
import {Accessibility} from '../cdp/Accessibility.js';
import {Accessibility} from './Accessibility.js';
import {AnimationEvent} from './animation.js';
import {AnyObject, EmptyObject} from './basic.js';
import {AnyObject} from './basic.js';
import {AriaLabelingProps, DOMProps, LinkDOMProps} from '@react-types/shared';
import {AriaLabelingProps, DOMProps} from '@react-types/shared';
import {AriaLabelingProps} from '@react-types/shared';
import {ArrayEntry, MapEntry, ObjectEntry, SetEntry} from './entry';
import {AsyncDisposableStack} from '../util/disposable.js';
import {AsyncIterableUtil} from '../util/AsyncIterableUtil.js';
import {AsyncReturnType} from 'type-fest';
import {Asyncify} from 'type-fest';
import {BackgroundColorValue, BackgroundColorValueV6, BorderColorValue, BorderColorValueV6, BorderRadiusValue, BorderSizeValue, DimensionValue} from './dna';
import {BaseEvent} from '@react-types/shared';
import {BidiBrowserContext} from './BrowserContext.js';
import {BidiBrowserTarget} from './Target.js';
import {BidiCdpSession} from './CDPSession.js';
import {BidiConnection} from './Connection.js';
import {BidiDeserializer} from './Deserializer.js';
import {BidiDialog} from './Dialog.js';
import {BidiElementHandle} from './ElementHandle.js';
import {BidiFrameRealm} from './Realm.js';
import {BidiFrameTarget, BidiPageTarget} from './Target.js';
import {BidiFrame} from './Frame.js';
import {BidiHTTPRequest, requests} from './HTTPRequest.js';
import {BidiHTTPResponse} from './HTTPResponse.js';
import {BidiJSHandle} from './JSHandle.js';
import {BidiKeyboard, BidiMouse, BidiTouchscreen} from './Input.js';
import {BidiPage} from './Page.js';
import {BidiSerializer} from './Serializer.js';
import {BidiWebWorker} from './WebWorker.js';
import {BidiWorkerRealm} from './Realm.js';
import {BidiWorkerTarget} from './Target.js';
import {Binding} from './Binding.js';
import {BoundFunctions, Queries} from './get-queries-for-element'
import {Browser as SupportedBrowsers, createProfile} from '@puppeteer/browsers';
import {BrowserContext, BrowserContextEvent} from '../api/BrowserContext.js';
import {BrowserContextEvent} from '../api/BrowserContext.js';
import {BrowserContext} from '../api/BrowserContext.js';
import {BrowserLauncher, type ResolvedLaunchArgs} from './BrowserLauncher.js';
import {BrowserPlatform, ChromeReleaseChannel} from './types.js';
import {BrowserPlatform, type ProfileOptions} from './types.js';
import {BrowserPlatform} from './browser-data/browser-data.js';
import {BrowserPlatform} from './types.js';
import {Browser} from './Browser.js';
import {BrowsingContext} from './BrowsingContext.js';
import {ByRoleMatcher, Matcher, MatcherOptions} from './matches'
import {CDPSession, CDPSessionEvent} from '../api/CDPSession.js';
import {CDPSessionEvent, type CDPSession} from '../api/CDPSession.js';
import {CDPSessionEvent} from '../api/CDPSession.js';
import {CDPSession} from '../api/CDPSession.js';
import {CDP_BINDING_PREFIX} from './utils.js';
import {CLI, Browser} from '@puppeteer/browsers';
import {CLI} from './CLI.js';
import {CSSProperties} from 'react';
import {CSSQueryHandler} from './CSSQueryHandler.js';
import {Cache, InstalledBrowser} from './Cache.js';
import {Cache} from './Cache.js';
import {CallableInstance} from './callable-instance.js'
import {CallbackRegistry} from '../common/CallbackRegistry.js';
import {CamelCase} from './camel-case';
import {CamelCase} from 'type-fest';
import {CdpBrowserContext} from './BrowserContext.js';
import {CdpBrowser} from '../cdp/Browser.js';
import {CdpBrowser} from './Browser.js';
import {CdpCDPSession} from './CdpSession.js';
import {CdpDialog} from './Dialog.js';
import {CdpElementHandle} from './ElementHandle.js';
import {CdpFrame} from './Frame.js';
import {CdpHTTPRequest} from './HTTPRequest.js';
import {CdpHTTPResponse} from './HTTPResponse.js';
import {CdpJSHandle} from './JSHandle.js';
import {CdpKeyboard, CdpMouse, CdpTouchscreen} from './Input.js';
import {CdpPage} from './Page.js';
import {CdpPreloadScript} from './CdpPreloadScript.js';
import {CdpTarget, InitializationStatus} from './Target.js';
import {CdpWebWorker} from './WebWorker.js';
import {ChartArea, Padding, Point} from './geometric.js';
import {ChartArea} from './geometric.js';
import {Chart} from '../dist/types.js';
import {Chart} from './index.js';
import {ChromeLauncher} from './ChromeLauncher.js';
import {ColorsPluginOptions} from '../plugins/plugin.colors.js';
import {Color} from './color.js';
import {ConditionalExcept} from 'type-fest';
import {ConditionalKeys} from './conditional-keys';
import {ConditionalKeys} from 'type-fest';
import {ConditionalPick} from 'type-fest';
import {Connection} from '../cdp/Connection.js';
import {Connection} from './Connection.js';
import {Coverage} from '../cdp/Coverage.js';
import {Coverage} from './Coverage.js';
import {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps, RefObject} from '@react-types/shared';
import {DOMAttributes, FocusableElement, FocusEvents} from '@react-types/shared';
import {DOMAttributes, FocusableElement, LongPressEvent} from '@react-types/shared';
import {DOMAttributes, FocusableElement, PressEvent as IPressEvent, PointerType, PressEvents, RefObject} from '@react-types/shared';
import {DOMAttributes, FocusableElement} from '@react-types/shared';
import {DOMAttributes, HoverEvents} from '@react-types/shared';
import {DOMAttributes, KeyboardEvents} from '@react-types/shared';
import {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';
import {DOMAttributes} from '@react-types/shared';
import {DeepPartial, DistributiveArray, UnionToIntersection} from './utils.js';
import {Deferred} from '../util/Deferred.js';
import {Deferred} from './Deferred.js';
import {DelimiterCase} from './delimiter-case';
import {DelimiterCase} from 'type-fest';
import {DeviceRequestPromptManager} from './DeviceRequestPrompt.js';
import {Dialog} from '../api/Dialog.js';
import {DiffOptions as DiffOptions_2} from 'jest-diff';
import {Dispatch, MutableRefObject, useRef, useState} from 'react';
import {DisposableStack, disposeSymbol} from '../../util/disposable.js';
import {DisposableStack, disposeSymbol} from '../util/disposable.js';
import {DisposableStack} from '../util/disposable.js';
import {EasingFunction} from '../helpers/helpers.easing.js';
import {EffectCallback, useEffect, useRef} from 'react';
import {EffectCallback, useRef} from 'react';
import {EmulationManager} from '../cdp/EmulationManager.js';
import {EmulationManager} from './EmulationManager.js';
import {Entries} from 'type-fest';
import {Entry} from 'type-fest';
import {EventEmitter, type EventType} from '../common/EventEmitter.js';
import {EventEmitter} from '../../common/EventEmitter.js';
import {EventEmitter} from '../common/EventEmitter.js';
import {EventEmitter} from 'events';
import {Exact} from 'type-fest';
import {Except} from './except';
import {Except} from 'type-fest';
import {ExecutionContext} from './ExecutionContext.js';
import {ExposableFunction} from './ExposedFunction.js';
import {FileChooser} from '../common/FileChooser.js';
import {FileWithPath, toFileWithPath} from './file';
import {FirefoxLauncher} from './FirefoxLauncher.js';
import {FixedLengthArray} from 'type-fest';
import {FocusEvent as ReactFocusEvent, SyntheticEvent, useCallback, useRef} from 'react';
import {FocusEvent, useCallback, useRef} from 'react';
import {FocusEvent, useCallback} from 'react';
import {FocusableElement, RefObject} from '@react-types/shared';
import {FocusableElement} from './dom';
import {FocusableElement} from '@react-types/shared';
import {FormData} from 'formdata-polyfill/esm.min.js';
import {ForwardedRef, MutableRefObject} from 'react';
import {Frame, FrameEvent, throwIfDetached} from '../api/Frame.js';
import {FrameEvent} from '../api/Frame.js';
import {FrameManagerEvent} from './FrameManagerEvents.js';
import {FrameManager} from './FrameManager.js';
import {FrameTree} from './FrameTree.js';
import {Get} from 'type-fest';
import {HTTPResponse, type RemoteAddress} from '../api/HTTPResponse.js';
import {Href, LinkDOMProps, RouterOptions} from '@react-types/shared';
import {IntervalPoller, MutationPoller, RAFPoller} from './Poller.js';
import {IsolatedWorld} from './IsolatedWorld.js';
import {JSHandle} from '../api/JSHandle.js';
import {JSHandle} from './JSHandle.js';
import {KebabCase} from 'type-fest';
import {Key, RefObject} from '@react-types/shared';
import {Key} from '@react-types/shared';
import {LayoutItem, LayoutPosition} from './layout.js';
import {LazyArg} from '../common/LazyArg.js';
import {LazyArg} from './LazyArg.js';
import {LinkDOMProps} from './dom';
import {LiteralUnion} from './literal-union';
import {LiteralUnion} from 'type-fest';
import {MAIN_WORLD, PUPPETEER_WORLD} from './IsolatedWorlds.js';
import {MAIN_WORLD} from './IsolatedWorlds.js';
import {Matcher, MatcherOptions} from './matches'
import {MergeExclusive} from 'type-fest';
import {Merge} from 'type-fest';
import {MouseDownEvent, OnSkinToneChange} from './config';
import {MouseEvent as RMouseEvent, TouchEvent as RTouchEvent, useContext, useEffect, useMemo, useRef, useState} from 'react';
import {MutableRefObject, useMemo, useRef} from 'react';
import {MutableRefObject} from 'react';
import {Mutable} from 'type-fest';
import {Mutex} from '../util/Mutex.js';
import {Mutex} from './Mutex.js';
import {Navigation} from './Navigation.js';
import {NetworkManagerEvent} from '../common/NetworkManagerEvents.js';
import {NetworkManager} from './NetworkManager.js';
import {NodeWebSocketTransport as WebSocketTransport} from './NodeWebSocketTransport.js';
import {Opaque} from 'type-fest';
import {Options as IndentStringOptions} from 'indent-string';
import {Options as LocatePathOptions} from 'locate-path';
import {OptionsReceived} from 'pretty-format'
import {Orientation} from '@react-types/shared';
import {PCombinator} from '../injected/PQuerySelector.js';
import {PQueryHandler} from './PQueryHandler.js';
import {PUPPETEER_REVISIONS} from '../revisions.js';
import {PUPPETEER_REVISIONS} from 'puppeteer-core/internal/revisions.js';
import {PageEvent, type Page} from '../api/Page.js';
import {PageEvent} from '../api/Page.js';
import {PartialDeep} from 'type-fest';
import {PascalCase} from 'type-fest';
import {PassThrough} from 'node
import {PierceQueryHandler} from './PierceQueryHandler.js';
import {PipeTransport} from './PipeTransport.js';
import {PollingOptions} from './QueryHandler.js';
import {PressProps, usePress} from './usePress';
import {PressProps} from './usePress';
import {PressResponderContext} from './context';
import {Primitive, ConditionalExcept} from 'type-fest';
import {Primitive, ConditionalPick} from 'type-fest';
import {Primitive} from './basic';
import {Promisable} from 'type-fest';
import {PromiseValue} from './promise-value';
import {PromiseValue} from 'type-fest';
import {ProtocolError, TargetCloseError} from './Errors.js';
import {ProtocolError, TimeoutError} from '../common/Errors.js';
import {ProtocolError, UnsupportedOperation} from '../common/Errors.js';
import {ProtocolError} from '../common/Errors.js';
import {ProxyAgent} from 'proxy-agent';
import {PuppeteerURL, evaluationString} from '../common/util.js';
import {PuppeteerURL} from '../common/util.js';
import {Puppeteer} from './common/Puppeteer.js';
import {QueryHandler, type QuerySelectorAll} from './QueryHandler.js';
import {QueryHandler, type QuerySelector} from '../common/QueryHandler.js';
import {QueryHandler} from './QueryHandler.js';
import {ReactElement, ReactNode} from 'react';
import {ReactElement, Ref, RefAttributes} from 'react';
import {ReactNode} from 'react';
import {ReadonlyDeep} from 'type-fest';
import {ReadonlyTuple} from 'type-fest';
import {Realm} from '../api/Realm.js';
import {RefObject, ScrollEvents} from '@react-types/shared';
import {RefObject, useCallback, useRef} from 'react';
import {RefObject, useCallback, useState} from 'react';
import {RefObject} from '@react-types/shared';
import {Replace} from 'type-fest';
import {RequestOptions} from 'http';
import {Request} from './Request.js';
import {RequireAtLeastOne} from 'type-fest';
import {RequireExactlyOne} from 'type-fest';
import {SecurityDetails} from '../common/SecurityDetails.js';
import {SelectorMatcherOptions} from './query-helpers'
import {Session} from './core/Session.js';
import {SetOptional} from 'type-fest';
import {SetRequired} from 'type-fest';
import {SetReturnType} from './set-return-type';
import {SetReturnType} from 'type-fest';
import {SharedWorkerRealm} from './Realm.js';
import {Simplify} from './simplify';
import {SnakeCase} from 'type-fest';
import {Split} from './utilities';
import {Static} from '@sinclair/typebox';
import {Stream} from 'node
import {Stream} from 'stream';
import {StringDigit} from '../source/utilities';
import {StringRepeat} from 'type-fest';
import {Stringified} from 'type-fest';
import {SyntheticEvent} from 'react';
import {TBoolean} from '@sinclair/typebox';
import {TNull} from '@sinclair/typebox';
import {TNumber} from '@sinclair/typebox';
import {TObject} from '@sinclair/typebox';
import {TReadonlyOptional} from '@sinclair/typebox';
import {TString} from '@sinclair/typebox';
import {Target, TargetType} from '../api/Target.js';
import {TargetCloseError, UnsupportedOperation} from '../common/Errors.js';
import {TargetCloseError} from '../common/Errors.js';
import {TargetManagerEvent} from './TargetManageEvents.js';
import {TargetManager} from './TargetManager.js';
import {TargetType} from '../api/Target.js';
import {TaskManager, WaitTask} from '../common/WaitTask.js';
import {TesterContext} from '@jest/expect-utils';
import {Tester} from '@jest/expect-utils';
import {TextQueryHandler} from './TextQueryHandler.js';
import {TimeUnit} from '../core/core.adapters.js';
import {TimeoutError} from '../common/Errors.js';
import {TimeoutError} from './Errors.js';
import {TimeoutSettings} from '../common/TimeoutSettings.js';
import {TouchError} from '../common/Errors.js';
import {Tracing} from '../cdp/Tracing.js';
import {Tracing} from './Tracing.js';
import {URL, urlToHttpOptions} from 'node
import {UnionToIntersection} from 'type-fest';
import {UnsupportedOperation} from '../common/Errors.js';
import {UpperCaseCharacters, WordSeparators} from '../source/utilities';
import {UserContext} from './UserContext.js';
import {UserContext} from './core/UserContext.js';
import {UserPrompt} from './UserPrompt.js';
import {ValueOf} from 'type-fest';
import {WEB_PERMISSION_TO_PROTOCOL_PERMISSION} from '../api/Browser.js';
import {WebWorker} from '../api/WebWorker.js';
import {WindowRealm} from './Realm.js';
import {WordSeparators} from '../source/utilities';
import {XPathQueryHandler} from './XPathQueryHandler.js';
import {YargsFactory} from './build/lib/yargs-factory';
import {_connectToBiDiBrowser} from '../bidi/BrowserConnector.js';
import {_connectToBrowser} from './BrowserConnector.js';
import {_connectToCdpBrowser} from '../cdp/BrowserConnector.js';
import {_isElementHandle} from '../api/ElementHandleSymbol.js';
import {_isElementHandle} from './ElementHandleSymbol.js';
import {accessSync} from 'node
import {act as reactAct} from 'react'
import {act as reactDeprecatedAct} from 'react-dom/test-utils'
import {ariaQuerySelectorAll} from './ARIAQuerySelector.js';
import {assert} from '../../util/assert.js';
import {assert} from '../util/assert.js';
import {asyncDisposeSymbol, disposeSymbol} from '../util/disposable.js';
import {asyncDisposeSymbol, disposeSymbol} from './disposable.js';
import {asyncDisposeSymbol} from '../util/disposable.js';
import {asyncFunction} from 'api';
import {bubble} from '../util/decorators.js';
import {chain} from './chain';
import {convertCookiesPartitionKeyFromPuppeteerToCdp} from './Page.js';
import {cosmiconfigSync} from 'cosmiconfig';
import {createEvaluationError} from './util.js';
import {createEventHandler} from './createEventHandler';
import {createFunction} from '../util/Function.js';
import {createIncrementalIdGenerator} from '../util/incremental-id-generator.js';
import {createProtocolErrorMessage} from '../util/ErrorLike.js';
import {createReadStream} from 'node
import {createSyntheticEvent, preventFocus, setEventTarget} from './utils';
import {createSyntheticEvent, setEventTarget, useSyntheticBlurEvent} from './utils';
import {createWriteStream} from 'node
import {customQueryHandlers} from './CustomQueryHandler.js';
import {customQuerySelectors} from './CustomQuerySelector.js';
import {debugError, DEFAULT_VIEWPORT} from '../common/util.js';
import {debugError, PuppeteerURL, UTILITY_WORLD_NAME} from '../common/util.js';
import {debugError, PuppeteerURL} from '../common/util.js';
import {debugError, fromAbortSignal, timeout} from '../../common/util.js';
import {debugError, fromEmitterEvent} from '../common/util.js';
import {debugError, isString} from '../common/util.js';
import {debugError, withSourcePuppeteerURLIfNone} from '../common/util.js';
import {debugError} from '../common/util.js';
import {debugError} from './util.js';
import {debug} from '../common/Debug.js';
import {debug} from './Debug.js';
import {debug} from './debug.js';
import {detectBrowserPlatform} from './detectPlatform.js';
import {dirname} from 'node
import {disableTextSelection, restoreTextSelection}  from './textSelection';
import {disableTextSelection, restoreTextSelection} from './textSelection';
import {disposeSymbol, asyncDisposeSymbol} from '../util/disposable.js';
import {disposeSymbol} from '../util/disposable.js';
import {disposeSymbol} from './disposable.js';
import {downloadFile, getJSON, headHttpRequest} from './httpUtil.js';
import {environment} from '../environment.js';
import {environment} from './environment.js';
import {existsSync, readFileSync} from 'node
import {existsSync} from 'node
import {expect} from '@jest/globals'
import {expect} from 'bun
import {expect} from 'vitest'
import {firstValueFrom, from, raceWith} from '../../third_party/rxjs/rxjs.js';
import {firstValueFrom, map, raceWith} from '../../third_party/rxjs/rxjs.js';
import {flushSync} from 'react-dom';
import {focusSafely, getInteractionModality} from '@react-aria/interactions';
import {focusSafely} from './';
import {focusWithoutScrolling, getOwnerDocument, mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';
import {focusWithoutScrolling, getOwnerWindow, isFocusable, useEffectEvent, useLayoutEffect} from '@react-aria/utils';
import {focusWithoutScrolling, isMac, isWebKit} from './index';
import {getActiveElement, getEventTarget, getOwnerDocument, nodeContains, useGlobalListeners} from '@react-aria/utils';
import {getActiveElement, getEventTarget, getOwnerDocument} from '@react-aria/utils';
import {getActiveElement, getOwnerDocument} from '@react-aria/utils';
import {getConfiguration} from '../getConfiguration.js';
import {getConfiguration} from './getConfiguration.js';
import {getData, onlyBar} from './main';
import {getFocusableTreeWalker} from './FocusScope';
import {getInteractionModality} from './useFocusVisible';
import {getJSON} from '../httpUtil.js';
import {getOffset} from './getOffset';
import {getOwnerDocument, getOwnerWindow, isMac, isVirtualClick} from '@react-aria/utils';
import {getOwnerDocument, isIOS, runAfterTransition} from '@react-aria/utils';
import {getOwnerDocument, nodeContains, useGlobalListeners} from '@react-aria/utils';
import {getOwnerDocument, useEffectEvent} from '@react-aria/utils';
import {getOwnerWindow, isFocusable, mergeProps, mergeRefs, useObjectRef, useSyncRef} from '@react-aria/utils';
import {getOwnerWindow, isFocusable, mergeProps, mergeRefs, useObjectRef} from '@react-aria/utils';
import {getOwnerWindow} from '@react-aria/utils';
import {getQueriesForElement} from './get-queries-for-element'
import {getQueryHandlerAndSelector} from '../common/GetQueryHandler.js';
import {getScrollParents} from './getScrollParents';
import {getText} from '../httpUtil.js';
import {guarded} from '../util/decorators.js';
import {homedir} from 'node
import {ignoreFocusEvent} from './utils';
import {inertIfDisposed, throwIfDisposed} from '../../util/decorators.js';
import {inertIfDisposed} from '../../util/decorators.js';
import {install} from './install.js';
import {interpolateFunction, stringifyFunction} from '../util/Function.js';
import {invokeAtMostOnceForArguments} from '../util/decorators.js';
import {isAndroid} from './platform';
import {isDate, isPlainObject, isRegExp} from '../common/util.js';
import {isElementVisible} from './isElementVisible';
import {isErrorLike} from '../util/ErrorLike.js';
import {isFirefox, isIPad} from './platform';
import {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';
import {isMac} from './platform';
import {isNode} from '../environment.js';
import {isScrollable} from './isScrollable';
import {isShadowRoot} from '../domHelpers';
import {isString, withSourcePuppeteerURLIfNone} from '../common/util.js';
import {isTargetClosedError} from './Connection.js';
import {join} from 'node
import {mergeIds} from './useId';
import {mergeProps, useObjectRef, useSyncRef} from '@react-aria/utils';
import {mergeProps} from '@react-aria/utils';
import {mergeUint8Arrays, stringToTypedArray} from '../util/encoding.js';
import {mkdir, readdir} from 'node
import {mkdir, unlink} from 'node
import {mkdtemp} from 'node
import {moveable, throwIfDisposed} from '../util/decorators.js';
import {nodeContains} from './DOMFunctions';
import {packageVersion} from '../generated/version.js';
import {packageVersion} from './generated/version.js';
import {packageVersion} from 'puppeteer-core/internal/generated/version.js';
import {paperFormats} from './PDFOptions.js';
import {parsePSelectors} from './PSelectorParser.js';
import {pierce, pierceAll} from './util.js';
import {releaseObject} from './JSHandle.js';
import {rename, unlink, mkdtemp} from 'node
import {rewriteError} from '../util/ErrorLike.js';
import {rewriteNavigationError} from './util.js';
import {rm} from './util/fs.js';
import {runInNewContext} from 'node
import {scriptInjector} from '../common/ScriptInjector.js';
import {scriptInjector} from './ScriptInjector.js';
import {shadowDOM} from '@react-stately/flags';
import {source as injectedSource} from '../generated/injected.js';
import {spawn, spawnSync} from 'node
import {spawnSync, spawn} from 'node
import {spawnSync} from 'node
import {stdin as input, stdout as output} from 'node
import {stringToBase64} from '../util/encoding.js';
import {stringToTypedArray} from '../util/encoding.js';
import {stringifyFunction} from '../util/Function.js';
import {textQuerySelectorAll} from './TextQuerySelector.js';
import {throwIfDisposed} from '../util/decorators.js';
import {tmpdir} from 'node
import {transposeIterableHandle} from '../common/HandleIterator.js';
import {transposeIterableHandle} from './HandleIterator.js';
import {type ARIARole} from 'aria-query'
import {type CDPSession, CDPSessionEvent} from '../api/CDPSession.js';
import {type CommonPuppeteerSettings, Puppeteer} from '../common/Puppeteer.js';
import {type Frame, FrameEvent} from '../api/Frame.js';
import {type TestingLibraryMatchers as _TLM} from './matchers'
import {type TestingLibraryMatchers} from './matchers'
import {type expect} from '@jest/globals'
import {type expect} from 'bun
import {typedArrayToBase64} from '../util/encoding.js';
import {unpackArchive} from './fileUtil.js';
import {useCallback, useEffect, useRef, useState} from 'react';
import {useCallback, useEffect, useRef} from 'react';
import {useCallback, useRef, useState} from 'react';
import {useCallback, useRef} from 'react';
import {useCallback} from 'react';
import {useEffect, useMemo, useRef, useState} from 'react';
import {useEffect, useRef} from 'react';
import {useEffect, useState} from 'react';
import {useEffectEvent, useGlobalListeners} from '@react-aria/utils';
import {useEffectEvent, useLayoutEffect} from './';
import {useEffectEvent} from './useEffectEvent';
import {useEffect} from 'react';
import {useEvent} from './useEvent';
import {useEvent} from '@react-aria/utils';
import {useFocusRing} from './useFocusRing';
import {useFocusable} from './useFocusable';
import {useFocus} from './useFocus';
import {useId} from './useId';
import {useIsSSR} from '@react-aria/ssr';
import {useKeyboard} from './useKeyboard';
import {useLayoutEffect} from './';
import {useLayoutEffect} from './useLayoutEffect';
import {useLayoutEffect} from '@react-aria/utils';
import {usePress} from './usePress';
import {useRef} from 'react';
import {useSSRSafeId} from '@react-aria/ssr';
import {useState} from 'react';
import {useSyntheticBlurEvent} from './utils';
import {useValueEffect} from './';
import {valueFromRemoteObject} from './utils.js';
import {version} from 'react';
import {waitForOptions} from './wait-for'
import {withSourcePuppeteerURLIfNone} from '../common/util.js';
import {xpathQuerySelectorAll} from './XPathQuerySelector.js';
import {} from "events"; // Make this an ambient declaration
import {} from 'puppeteer'
importFresh('./foo')();
insert a new import during the declaration emit to make this work.
new CSSStyleSheet() (but non-empty if this is a constructed stylesheet imported
normally happen, if this is unimportant to what's being tested.
specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked
template contents, and imported documents) in a flattened array, as well as layout and
the JavaScript object wrapper, etc. It is important that client receives DOM events only for the
type ElectronType = typeof import('electron');
type FetchFunction = (id
type FixStyle = 'inline-type-imports' | 'separate-type-imports';
type MockFactoryWithHelper<M = unknown> = (importOriginal
type ModuleMockFactoryWithHelper<M = unknown> = (importOriginal
type Prefer = 'no-type-imports' | 'type-imports';
type ResolveFn = (id
type ResolveIdFunction = (id
type ServiceWorkerUpdateViaCache = "all" | "imports" | "none";
type _Blob = typeof globalThis extends { onmessage
type _EventSource = typeof globalThis extends { onmessage
type _File = typeof globalThis extends { onmessage
type _FormData = typeof globalThis extends { onmessage
type _Headers = typeof globalThis extends { onmessage
type _MessageEvent = typeof globalThis extends { onmessage
type _Request = typeof globalThis extends { onmessage
type _Response = typeof globalThis extends { onmessage
type _WebSocket = typeof globalThis extends { onmessage
type browserType = typeof import("./resolve-targets-browser");
type indexBrowserType = typeof import("./index-browser");
type indexType = typeof import("./index");
type nodeType = typeof import("./resolve-targets");
type transformFileBrowserType = typeof import("./transform-file-browser");
type transformFileType = typeof import("./transform-file");
vi.mock('@typeschema/main', async (importOriginal) => {
{"fileNames"
{"mappings"
{"version"
} & import("react").RefAttributes<ImperativePanelGroupHandle>>;
} & import("react").RefAttributes<ImperativePanelHandle>>;
} = import("@eslint/core").SourceCodeBaseTypeOptions & {
} | import("eslint/lib/rules/prefer-destructuring").DestructuringTypeConfig, (import("eslint/lib/rules/prefer-destructuring").Option1 | undefined)?], unknown, {
} | undefined)?], import("../../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
})[], import("../../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
}, defineMethod
}, use
}>, import("../typebox").TObject<{
}], import("../../rules").ESLintPluginDocs, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
